
quad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006470  08006470  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006470  08006470  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006470  08006470  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae0  20000010  08006488  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001af0  08006488  00021af0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fd3  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fca  00000000  00000000  0003900c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  0003bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001498  00000000  00000000  0003d5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002bc0  00000000  00000000  0003ea40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001015f  00000000  00000000  00041600  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ce6b  00000000  00000000  0005175f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce5ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cb0  00000000  00000000  000ce648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080063bc 	.word	0x080063bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080063bc 	.word	0x080063bc

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fcc9 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f83d 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f981 	bl	8000464 <MX_GPIO_Init>
  MX_DMA_Init();
 8000162:	f000 f961 	bl	8000428 <MX_DMA_Init>
  MX_I2C2_Init();
 8000166:	f000 f87d 	bl	8000264 <MX_I2C2_Init>
  MX_TIM2_Init();
 800016a:	f000 f8bf 	bl	80002ec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800016e:	f000 f931 	bl	80003d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	initIMU();
 8000172:	f000 f9c3 	bl	80004fc <initIMU>
	HAL_TIM_Base_Start(&htim2);
 8000176:	4811      	ldr	r0, [pc, #68]	; (80001bc <main+0x6c>)
 8000178:	f002 fcdb 	bl	8002b32 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800017c:	2104      	movs	r1, #4
 800017e:	480f      	ldr	r0, [pc, #60]	; (80001bc <main+0x6c>)
 8000180:	f002 fd52 	bl	8002c28 <HAL_TIM_PWM_Start>
	htim2.Instance->CCR1 = 50;
 8000184:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <main+0x6c>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	2232      	movs	r2, #50	; 0x32
 800018a:	635a      	str	r2, [r3, #52]	; 0x34

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800018c:	f003 fc4a 	bl	8003a24 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of pidTask */
  pidTaskHandle = osThreadNew(pidStart, NULL, &pidTask_attributes);
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <main+0x70>)
 8000192:	2100      	movs	r1, #0
 8000194:	480b      	ldr	r0, [pc, #44]	; (80001c4 <main+0x74>)
 8000196:	f003 fcab 	bl	8003af0 <osThreadNew>
 800019a:	4602      	mov	r2, r0
 800019c:	4b0a      	ldr	r3, [pc, #40]	; (80001c8 <main+0x78>)
 800019e:	601a      	str	r2, [r3, #0]

  /* creation of gpsPoll */
  gpsPollHandle = osThreadNew(startGps, NULL, &gpsPoll_attributes);
 80001a0:	4a0a      	ldr	r2, [pc, #40]	; (80001cc <main+0x7c>)
 80001a2:	2100      	movs	r1, #0
 80001a4:	480a      	ldr	r0, [pc, #40]	; (80001d0 <main+0x80>)
 80001a6:	f003 fca3 	bl	8003af0 <osThreadNew>
 80001aa:	4602      	mov	r2, r0
 80001ac:	4b09      	ldr	r3, [pc, #36]	; (80001d4 <main+0x84>)
 80001ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001b0:	f003 fc6a 	bl	8003a88 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int counter = 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	607b      	str	r3, [r7, #4]
	while (1) {
 80001b8:	e7fe      	b.n	80001b8 <main+0x68>
 80001ba:	bf00      	nop
 80001bc:	20001a24 	.word	0x20001a24
 80001c0:	08006410 	.word	0x08006410
 80001c4:	08000695 	.word	0x08000695
 80001c8:	20001a64 	.word	0x20001a64
 80001cc:	08006434 	.word	0x08006434
 80001d0:	080006e1 	.word	0x080006e1
 80001d4:	2000198c 	.word	0x2000198c

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b090      	sub	sp, #64	; 0x40
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f006 f8df 	bl	80063aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001fa:	2301      	movs	r3, #1
 80001fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000202:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000208:	2301      	movs	r3, #1
 800020a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020c:	2302      	movs	r3, #2
 800020e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000216:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800021a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021c:	f107 0318 	add.w	r3, r7, #24
 8000220:	4618      	mov	r0, r3
 8000222:	f002 f80f 	bl	8002244 <HAL_RCC_OscConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800022c:	f000 fa70 	bl	8000710 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000230:	230f      	movs	r3, #15
 8000232:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000234:	2302      	movs	r3, #2
 8000236:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2102      	movs	r1, #2
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fa7a 	bl	8002744 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000256:	f000 fa5b 	bl	8000710 <Error_Handler>
  }
}
 800025a:	bf00      	nop
 800025c:	3740      	adds	r7, #64	; 0x40
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <MX_I2C2_Init+0x50>)
 800026a:	4a13      	ldr	r2, [pc, #76]	; (80002b8 <MX_I2C2_Init+0x54>)
 800026c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <MX_I2C2_Init+0x50>)
 8000270:	4a12      	ldr	r2, [pc, #72]	; (80002bc <MX_I2C2_Init+0x58>)
 8000272:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <MX_I2C2_Init+0x50>)
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <MX_I2C2_Init+0x50>)
 800027c:	2200      	movs	r2, #0
 800027e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <MX_I2C2_Init+0x50>)
 8000282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000286:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000288:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <MX_I2C2_Init+0x50>)
 800028a:	2200      	movs	r2, #0
 800028c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <MX_I2C2_Init+0x50>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <MX_I2C2_Init+0x50>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <MX_I2C2_Init+0x50>)
 800029c:	2200      	movs	r2, #0
 800029e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002a0:	4804      	ldr	r0, [pc, #16]	; (80002b4 <MX_I2C2_Init+0x50>)
 80002a2:	f001 f841 	bl	8001328 <HAL_I2C_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002ac:	f000 fa30 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20001938 	.word	0x20001938
 80002b8:	40005800 	.word	0x40005800
 80002bc:	000186a0 	.word	0x000186a0

080002c0 <timerPostInit>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void timerPostInit(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002c6:	2302      	movs	r3, #2
 80002c8:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002ca:	2302      	movs	r3, #2
 80002cc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d2:	2302      	movs	r3, #2
 80002d4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d6:	463b      	mov	r3, r7
 80002d8:	4619      	mov	r1, r3
 80002da:	4803      	ldr	r0, [pc, #12]	; (80002e8 <timerPostInit+0x28>)
 80002dc:	f000 fe9a 	bl	8001014 <HAL_GPIO_Init>

}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40010800 	.word	0x40010800

080002ec <MX_TIM2_Init>:
static void MX_TIM2_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08e      	sub	sp, #56	; 0x38
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000300:	f107 0320 	add.w	r3, r7, #32
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
 8000318:	615a      	str	r2, [r3, #20]
 800031a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800031c:	4b2c      	ldr	r3, [pc, #176]	; (80003d0 <MX_TIM2_Init+0xe4>)
 800031e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000322:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000324:	4b2a      	ldr	r3, [pc, #168]	; (80003d0 <MX_TIM2_Init+0xe4>)
 8000326:	2247      	movs	r2, #71	; 0x47
 8000328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032a:	4b29      	ldr	r3, [pc, #164]	; (80003d0 <MX_TIM2_Init+0xe4>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000330:	4b27      	ldr	r3, [pc, #156]	; (80003d0 <MX_TIM2_Init+0xe4>)
 8000332:	2263      	movs	r2, #99	; 0x63
 8000334:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000336:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <MX_TIM2_Init+0xe4>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800033c:	4b24      	ldr	r3, [pc, #144]	; (80003d0 <MX_TIM2_Init+0xe4>)
 800033e:	2200      	movs	r2, #0
 8000340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000342:	4823      	ldr	r0, [pc, #140]	; (80003d0 <MX_TIM2_Init+0xe4>)
 8000344:	f002 fbca 	bl	8002adc <HAL_TIM_Base_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800034e:	f000 f9df 	bl	8000710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000356:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000358:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035c:	4619      	mov	r1, r3
 800035e:	481c      	ldr	r0, [pc, #112]	; (80003d0 <MX_TIM2_Init+0xe4>)
 8000360:	f002 fe62 	bl	8003028 <HAL_TIM_ConfigClockSource>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800036a:	f000 f9d1 	bl	8000710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800036e:	4818      	ldr	r0, [pc, #96]	; (80003d0 <MX_TIM2_Init+0xe4>)
 8000370:	f002 fc25 	bl	8002bbe <HAL_TIM_PWM_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800037a:	f000 f9c9 	bl	8000710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800037e:	2300      	movs	r3, #0
 8000380:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000382:	2300      	movs	r3, #0
 8000384:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000386:	f107 0320 	add.w	r3, r7, #32
 800038a:	4619      	mov	r1, r3
 800038c:	4810      	ldr	r0, [pc, #64]	; (80003d0 <MX_TIM2_Init+0xe4>)
 800038e:	f003 f9cb 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000398:	f000 f9ba 	bl	8000710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800039c:	2360      	movs	r3, #96	; 0x60
 800039e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2204      	movs	r2, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	4807      	ldr	r0, [pc, #28]	; (80003d0 <MX_TIM2_Init+0xe4>)
 80003b4:	f002 fd72 	bl	8002e9c <HAL_TIM_PWM_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80003be:	f000 f9a7 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  timerPostInit();
 80003c2:	f7ff ff7d 	bl	80002c0 <timerPostInit>

}
 80003c6:	bf00      	nop
 80003c8:	3738      	adds	r7, #56	; 0x38
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20001a24 	.word	0x20001a24

080003d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 80003da:	4a12      	ldr	r2, [pc, #72]	; (8000424 <MX_USART1_UART_Init+0x50>)
 80003dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 80003e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 80003fa:	220c      	movs	r2, #12
 80003fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 800040c:	f003 f9e2 	bl	80037d4 <HAL_UART_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000416:	f000 f97b 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200019dc 	.word	0x200019dc
 8000424:	40013800 	.word	0x40013800

08000428 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <MX_DMA_Init+0x38>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a0b      	ldr	r2, [pc, #44]	; (8000460 <MX_DMA_Init+0x38>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_DMA_Init+0x38>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2105      	movs	r1, #5
 800044a:	200e      	movs	r0, #14
 800044c:	f000 fc57 	bl	8000cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000450:	200e      	movs	r0, #14
 8000452:	f000 fc70 	bl	8000d36 <HAL_NVIC_EnableIRQ>

}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <MX_GPIO_Init+0x90>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a1d      	ldr	r2, [pc, #116]	; (80004f4 <MX_GPIO_Init+0x90>)
 800047e:	f043 0320 	orr.w	r3, r3, #32
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <MX_GPIO_Init+0x90>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0320 	and.w	r3, r3, #32
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_GPIO_Init+0x90>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a17      	ldr	r2, [pc, #92]	; (80004f4 <MX_GPIO_Init+0x90>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <MX_GPIO_Init+0x90>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <MX_GPIO_Init+0x90>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <MX_GPIO_Init+0x90>)
 80004ae:	f043 0308 	orr.w	r3, r3, #8
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_GPIO_Init+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0308 	and.w	r3, r3, #8
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80004c6:	480c      	ldr	r0, [pc, #48]	; (80004f8 <MX_GPIO_Init+0x94>)
 80004c8:	f000 fefe 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2302      	movs	r3, #2
 80004dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <MX_GPIO_Init+0x94>)
 80004e6:	f000 fd95 	bl	8001014 <HAL_GPIO_Init>

}
 80004ea:	bf00      	nop
 80004ec:	3720      	adds	r7, #32
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010c00 	.word	0x40010c00

080004fc <initIMU>:

/* USER CODE BEGIN 4 */
void initIMU(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read(&hi2c2, 0x68, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000506:	9302      	str	r3, [sp, #8]
 8000508:	2301      	movs	r3, #1
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2301      	movs	r3, #1
 8000512:	2275      	movs	r2, #117	; 0x75
 8000514:	2168      	movs	r1, #104	; 0x68
 8000516:	4829      	ldr	r0, [pc, #164]	; (80005bc <initIMU+0xc0>)
 8000518:	f001 f928 	bl	800176c <HAL_I2C_Mem_Read>
	Data = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	71bb      	strb	r3, [r7, #6]
	if (check == 0x68) {
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b68      	cmp	r3, #104	; 0x68
 8000524:	d141      	bne.n	80005aa <initIMU+0xae>
		Data = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	9302      	str	r3, [sp, #8]
 8000530:	2301      	movs	r3, #1
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	1dbb      	adds	r3, r7, #6
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2301      	movs	r3, #1
 800053a:	226b      	movs	r2, #107	; 0x6b
 800053c:	2168      	movs	r1, #104	; 0x68
 800053e:	481f      	ldr	r0, [pc, #124]	; (80005bc <initIMU+0xc0>)
 8000540:	f001 f81a 	bl	8001578 <HAL_I2C_Mem_Write>
				1000);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000544:	2307      	movs	r3, #7
 8000546:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 8000548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054c:	9302      	str	r3, [sp, #8]
 800054e:	2301      	movs	r3, #1
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	1dbb      	adds	r3, r7, #6
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2301      	movs	r3, #1
 8000558:	2219      	movs	r2, #25
 800055a:	2168      	movs	r1, #104	; 0x68
 800055c:	4817      	ldr	r0, [pc, #92]	; (80005bc <initIMU+0xc0>)
 800055e:	f001 f80b 	bl	8001578 <HAL_I2C_Mem_Write>
				1000);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000562:	2300      	movs	r3, #0
 8000564:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	9302      	str	r3, [sp, #8]
 800056c:	2301      	movs	r3, #1
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	1dbb      	adds	r3, r7, #6
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2301      	movs	r3, #1
 8000576:	221c      	movs	r2, #28
 8000578:	2168      	movs	r1, #104	; 0x68
 800057a:	4810      	ldr	r0, [pc, #64]	; (80005bc <initIMU+0xc0>)
 800057c:	f000 fffc 	bl	8001578 <HAL_I2C_Mem_Write>
				1000);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000580:	2300      	movs	r3, #0
 8000582:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 8000584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000588:	9302      	str	r3, [sp, #8]
 800058a:	2301      	movs	r3, #1
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	1dbb      	adds	r3, r7, #6
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	221b      	movs	r2, #27
 8000596:	2168      	movs	r1, #104	; 0x68
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <initIMU+0xc0>)
 800059a:	f000 ffed 	bl	8001578 <HAL_I2C_Mem_Write>
				1000);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a4:	4806      	ldr	r0, [pc, #24]	; (80005c0 <initIMU+0xc4>)
 80005a6:	f000 fe8f 	bl	80012c8 <HAL_GPIO_WritePin>

	} else {

	}
	debugLED(check);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f809 	bl	80005c4 <debugLED>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20001938 	.word	0x20001938
 80005c0:	40010c00 	.word	0x40010c00

080005c4 <debugLED>:
void debugLED(uint8_t check) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d4:	482e      	ldr	r0, [pc, #184]	; (8000690 <debugLED+0xcc>)
 80005d6:	f000 fe77 	bl	80012c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	482b      	ldr	r0, [pc, #172]	; (8000690 <debugLED+0xcc>)
 80005e2:	f000 fe71 	bl	80012c8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ea:	f000 fab1 	bl	8000b50 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f4:	4826      	ldr	r0, [pc, #152]	; (8000690 <debugLED+0xcc>)
 80005f6:	f000 fe67 	bl	80012c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000600:	4823      	ldr	r0, [pc, #140]	; (8000690 <debugLED+0xcc>)
 8000602:	f000 fe61 	bl	80012c8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060a:	f000 faa1 	bl	8000b50 <HAL_Delay>
	for (int i = 0; i < 8; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	e01f      	b.n	8000654 <debugLED+0x90>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000618:	481d      	ldr	r0, [pc, #116]	; (8000690 <debugLED+0xcc>)
 800061a:	f000 fe6d 	bl	80012f8 <HAL_GPIO_TogglePin>
		if (((check >> i) & 1) == 0) {
 800061e:	79fa      	ldrb	r2, [r7, #7]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	fa42 f303 	asr.w	r3, r2, r3
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d106      	bne.n	800063c <debugLED+0x78>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000634:	4816      	ldr	r0, [pc, #88]	; (8000690 <debugLED+0xcc>)
 8000636:	f000 fe47 	bl	80012c8 <HAL_GPIO_WritePin>
 800063a:	e005      	b.n	8000648 <debugLED+0x84>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000642:	4813      	ldr	r0, [pc, #76]	; (8000690 <debugLED+0xcc>)
 8000644:	f000 fe40 	bl	80012c8 <HAL_GPIO_WritePin>
		}
		HAL_Delay(150);
 8000648:	2096      	movs	r0, #150	; 0x96
 800064a:	f000 fa81 	bl	8000b50 <HAL_Delay>
	for (int i = 0; i < 8; i++) {
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2b07      	cmp	r3, #7
 8000658:	dddc      	ble.n	8000614 <debugLED+0x50>

	}
	//SIGNAL COMPLETE
	for (int i = 0; i < 15; i++) {
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	e00a      	b.n	8000676 <debugLED+0xb2>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <debugLED+0xcc>)
 8000666:	f000 fe47 	bl	80012f8 <HAL_GPIO_TogglePin>

		HAL_Delay(25);
 800066a:	2019      	movs	r0, #25
 800066c:	f000 fa70 	bl	8000b50 <HAL_Delay>
	for (int i = 0; i < 15; i++) {
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	3301      	adds	r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	2b0e      	cmp	r3, #14
 800067a:	ddf1      	ble.n	8000660 <debugLED+0x9c>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <debugLED+0xcc>)
 8000684:	f000 fe20 	bl	80012c8 <HAL_GPIO_WritePin>

}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40010c00 	.word	0x40010c00

08000694 <pidStart>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_pidStart */
void pidStart(void *argument)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
//	HAL_UART_Transmit_IT(&huart1, data, sizeof (data));
	int counter = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
//			HAL_UART_Transmit_IT(&huart1, data, sizeof (data));
//
//		}
//		readIMUGyro();
//		readIMUAccel();
		if (counter <= 100) {
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2b64      	cmp	r3, #100	; 0x64
 80006a4:	dc0f      	bgt.n	80006c6 <pidStart+0x32>
			htim2.Instance->CCR1 = counter;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <pidStart+0x44>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
			counter = counter + 10;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	330a      	adds	r3, #10
 80006b2:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b8:	4808      	ldr	r0, [pc, #32]	; (80006dc <pidStart+0x48>)
 80006ba:	f000 fe1d 	bl	80012f8 <HAL_GPIO_TogglePin>
			osDelay(100);
 80006be:	2064      	movs	r0, #100	; 0x64
 80006c0:	f003 fac0 	bl	8003c44 <osDelay>
 80006c4:	e7ec      	b.n	80006a0 <pidStart+0xc>
		} else {
			counter = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80006ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ce:	4803      	ldr	r0, [pc, #12]	; (80006dc <pidStart+0x48>)
 80006d0:	f000 fe12 	bl	80012f8 <HAL_GPIO_TogglePin>
		if (counter <= 100) {
 80006d4:	e7e4      	b.n	80006a0 <pidStart+0xc>
 80006d6:	bf00      	nop
 80006d8:	20001a24 	.word	0x20001a24
 80006dc:	40010c00 	.word	0x40010c00

080006e0 <startGps>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startGps */
void startGps(void *argument)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGps */
	/* Infinite loop */
	for (;;) {
 80006e8:	e7fe      	b.n	80006e8 <startGps+0x8>
	...

080006ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d101      	bne.n	8000702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006fe:	f000 fa0b 	bl	8000b18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40000800 	.word	0x40000800

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_MspInit+0x68>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <HAL_MspInit+0x68>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6193      	str	r3, [r2, #24]
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_MspInit+0x68>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_MspInit+0x68>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a11      	ldr	r2, [pc, #68]	; (8000784 <HAL_MspInit+0x68>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x68>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	210f      	movs	r1, #15
 8000756:	f06f 0001 	mvn.w	r0, #1
 800075a:	f000 fad0 	bl	8000cfe <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_MspInit+0x6c>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_MspInit+0x6c>)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	40010000 	.word	0x40010000

0800078c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <HAL_I2C_MspInit+0x74>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d124      	bne.n	80007f6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_I2C_MspInit+0x78>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <HAL_I2C_MspInit+0x78>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_I2C_MspInit+0x78>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0308 	and.w	r3, r3, #8
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ca:	2312      	movs	r3, #18
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	4619      	mov	r1, r3
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <HAL_I2C_MspInit+0x7c>)
 80007da:	f000 fc1b 	bl	8001014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_I2C_MspInit+0x78>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_I2C_MspInit+0x78>)
 80007e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_I2C_MspInit+0x78>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40005800 	.word	0x40005800
 8000804:	40021000 	.word	0x40021000
 8000808:	40010c00 	.word	0x40010c00

0800080c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800081c:	d10b      	bne.n	8000836 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_TIM_Base_MspInit+0x34>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_TIM_Base_MspInit+0x34>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_TIM_Base_MspInit+0x34>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a2f      	ldr	r2, [pc, #188]	; (800091c <HAL_UART_MspInit+0xd8>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d157      	bne.n	8000914 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000864:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <HAL_UART_MspInit+0xdc>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a2d      	ldr	r2, [pc, #180]	; (8000920 <HAL_UART_MspInit+0xdc>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <HAL_UART_MspInit+0xdc>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <HAL_UART_MspInit+0xdc>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a27      	ldr	r2, [pc, #156]	; (8000920 <HAL_UART_MspInit+0xdc>)
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <HAL_UART_MspInit+0xdc>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000898:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4619      	mov	r1, r3
 80008a8:	481e      	ldr	r0, [pc, #120]	; (8000924 <HAL_UART_MspInit+0xe0>)
 80008aa:	f000 fbb3 	bl	8001014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4619      	mov	r1, r3
 80008c2:	4818      	ldr	r0, [pc, #96]	; (8000924 <HAL_UART_MspInit+0xe0>)
 80008c4:	f000 fba6 	bl	8001014 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_UART_MspInit+0xe4>)
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <HAL_UART_MspInit+0xe8>)
 80008cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <HAL_UART_MspInit+0xe4>)
 80008d0:	2210      	movs	r2, #16
 80008d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_UART_MspInit+0xe4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <HAL_UART_MspInit+0xe4>)
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_UART_MspInit+0xe4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_UART_MspInit+0xe4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_UART_MspInit+0xe4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <HAL_UART_MspInit+0xe4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <HAL_UART_MspInit+0xe4>)
 80008fa:	f000 fa2b 	bl	8000d54 <HAL_DMA_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000904:	f7ff ff04 	bl	8000710 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_UART_MspInit+0xe4>)
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
 800090e:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_UART_MspInit+0xe4>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40013800 	.word	0x40013800
 8000920:	40021000 	.word	0x40021000
 8000924:	40010800 	.word	0x40010800
 8000928:	20001994 	.word	0x20001994
 800092c:	40020044 	.word	0x40020044

08000930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	; 0x30
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	201e      	movs	r0, #30
 8000946:	f000 f9da 	bl	8000cfe <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800094a:	201e      	movs	r0, #30
 800094c:	f000 f9f3 	bl	8000d36 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <HAL_InitTick+0xa0>)
 8000952:	69db      	ldr	r3, [r3, #28]
 8000954:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <HAL_InitTick+0xa0>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	61d3      	str	r3, [r2, #28]
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <HAL_InitTick+0xa0>)
 800095e:	69db      	ldr	r3, [r3, #28]
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	f107 0210 	add.w	r2, r7, #16
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f002 f864 	bl	8002a40 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000978:	f002 f83a 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 800097c:	4603      	mov	r3, r0
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000984:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <HAL_InitTick+0xa4>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	0c9b      	lsrs	r3, r3, #18
 800098c:	3b01      	subs	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_InitTick+0xa8>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <HAL_InitTick+0xac>)
 8000994:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_InitTick+0xa8>)
 8000998:	f240 32e7 	movw	r2, #999	; 0x3e7
 800099c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800099e:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <HAL_InitTick+0xa8>)
 80009a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <HAL_InitTick+0xa8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_InitTick+0xa8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80009b0:	4809      	ldr	r0, [pc, #36]	; (80009d8 <HAL_InitTick+0xa8>)
 80009b2:	f002 f893 	bl	8002adc <HAL_TIM_Base_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d104      	bne.n	80009c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80009bc:	4806      	ldr	r0, [pc, #24]	; (80009d8 <HAL_InitTick+0xa8>)
 80009be:	f002 f8db 	bl	8002b78 <HAL_TIM_Base_Start_IT>
 80009c2:	4603      	mov	r3, r0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3730      	adds	r7, #48	; 0x30
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40021000 	.word	0x40021000
 80009d4:	431bde83 	.word	0x431bde83
 80009d8:	20001a6c 	.word	0x20001a6c
 80009dc:	40000800 	.word	0x40000800

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <HardFault_Handler+0x4>

080009f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <MemManage_Handler+0x4>

080009f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <BusFault_Handler+0x4>

080009fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <UsageFault_Handler+0x4>

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <DMA1_Channel4_IRQHandler+0x10>)
 8000a16:	f000 f9f7 	bl	8000e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20001994 	.word	0x20001994

08000a24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <TIM4_IRQHandler+0x10>)
 8000a2a:	f002 f92f 	bl	8002c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20001a6c 	.word	0x20001a6c

08000a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <SystemInit+0x5c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <SystemInit+0x5c>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <SystemInit+0x5c>)
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	4911      	ldr	r1, [pc, #68]	; (8000a94 <SystemInit+0x5c>)
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <SystemInit+0x60>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <SystemInit+0x5c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <SystemInit+0x5c>)
 8000a5a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a62:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <SystemInit+0x5c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <SystemInit+0x5c>)
 8000a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a6e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <SystemInit+0x5c>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <SystemInit+0x5c>)
 8000a76:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a7a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <SystemInit+0x5c>)
 8000a7e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a82:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SystemInit+0x64>)
 8000a86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a8a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40021000 	.word	0x40021000
 8000a98:	f8ff0000 	.word	0xf8ff0000
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000aa0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000aa2:	e003      	b.n	8000aac <LoopCopyDataInit>

08000aa4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000aa6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000aa8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aaa:	3104      	adds	r1, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ab0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ab2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ab4:	d3f6      	bcc.n	8000aa4 <CopyDataInit>
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ab8:	e002      	b.n	8000ac0 <LoopFillZerobss>

08000aba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000abc:	f842 3b04 	str.w	r3, [r2], #4

08000ac0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ac4:	d3f9      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ac6:	f7ff ffb7 	bl	8000a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f005 fc3f 	bl	800634c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ace:	f7ff fb3f 	bl	8000150 <main>
  bx lr
 8000ad2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ad4:	08006478 	.word	0x08006478
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000adc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000ae0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000ae4:	20001af0 	.word	0x20001af0

08000ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC1_2_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_Init+0x28>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_Init+0x28>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f000 f8f3 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff ff14 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b08:	f7ff fe08 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40022000 	.word	0x40022000

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20001aac 	.word	0x20001aac

08000b3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20001aac 	.word	0x20001aac

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff fff0 	bl	8000b3c <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_Delay+0x40>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffe0 	bl	8000b3c <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000008 	.word	0x20000008

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4906      	ldr	r1, [pc, #24]	; (8000c2c <__NVIC_EnableIRQ+0x34>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff4f 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff64 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ffb2 	bl	8000c84 <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff81 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff57 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e043      	b.n	8000df2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <HAL_DMA_Init+0xa8>)
 8000d72:	4413      	add	r3, r2
 8000d74:	4a22      	ldr	r2, [pc, #136]	; (8000e00 <HAL_DMA_Init+0xac>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	091b      	lsrs	r3, r3, #4
 8000d7c:	009a      	lsls	r2, r3, #2
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <HAL_DMA_Init+0xb0>)
 8000d86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000da2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	bffdfff8 	.word	0xbffdfff8
 8000e00:	cccccccd 	.word	0xcccccccd
 8000e04:	40020000 	.word	0x40020000

08000e08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	2204      	movs	r2, #4
 8000e26:	409a      	lsls	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d04f      	beq.n	8000ed0 <HAL_DMA_IRQHandler+0xc8>
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d04a      	beq.n	8000ed0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0320 	and.w	r3, r3, #32
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d107      	bne.n	8000e58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0204 	bic.w	r2, r2, #4
 8000e56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a66      	ldr	r2, [pc, #408]	; (8000ff8 <HAL_DMA_IRQHandler+0x1f0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d029      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0xae>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a65      	ldr	r2, [pc, #404]	; (8000ffc <HAL_DMA_IRQHandler+0x1f4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d022      	beq.n	8000eb2 <HAL_DMA_IRQHandler+0xaa>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a63      	ldr	r2, [pc, #396]	; (8001000 <HAL_DMA_IRQHandler+0x1f8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d01a      	beq.n	8000eac <HAL_DMA_IRQHandler+0xa4>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a62      	ldr	r2, [pc, #392]	; (8001004 <HAL_DMA_IRQHandler+0x1fc>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d012      	beq.n	8000ea6 <HAL_DMA_IRQHandler+0x9e>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a60      	ldr	r2, [pc, #384]	; (8001008 <HAL_DMA_IRQHandler+0x200>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00a      	beq.n	8000ea0 <HAL_DMA_IRQHandler+0x98>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a5f      	ldr	r2, [pc, #380]	; (800100c <HAL_DMA_IRQHandler+0x204>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d102      	bne.n	8000e9a <HAL_DMA_IRQHandler+0x92>
 8000e94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e98:	e00e      	b.n	8000eb8 <HAL_DMA_IRQHandler+0xb0>
 8000e9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e9e:	e00b      	b.n	8000eb8 <HAL_DMA_IRQHandler+0xb0>
 8000ea0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ea4:	e008      	b.n	8000eb8 <HAL_DMA_IRQHandler+0xb0>
 8000ea6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eaa:	e005      	b.n	8000eb8 <HAL_DMA_IRQHandler+0xb0>
 8000eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb0:	e002      	b.n	8000eb8 <HAL_DMA_IRQHandler+0xb0>
 8000eb2:	2340      	movs	r3, #64	; 0x40
 8000eb4:	e000      	b.n	8000eb8 <HAL_DMA_IRQHandler+0xb0>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	4a55      	ldr	r2, [pc, #340]	; (8001010 <HAL_DMA_IRQHandler+0x208>)
 8000eba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 8094 	beq.w	8000fee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000ece:	e08e      	b.n	8000fee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d056      	beq.n	8000f8e <HAL_DMA_IRQHandler+0x186>
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d051      	beq.n	8000f8e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0320 	and.w	r3, r3, #32
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10b      	bne.n	8000f10 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 020a 	bic.w	r2, r2, #10
 8000f06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a38      	ldr	r2, [pc, #224]	; (8000ff8 <HAL_DMA_IRQHandler+0x1f0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d029      	beq.n	8000f6e <HAL_DMA_IRQHandler+0x166>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a37      	ldr	r2, [pc, #220]	; (8000ffc <HAL_DMA_IRQHandler+0x1f4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d022      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x162>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a35      	ldr	r2, [pc, #212]	; (8001000 <HAL_DMA_IRQHandler+0x1f8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d01a      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x15c>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a34      	ldr	r2, [pc, #208]	; (8001004 <HAL_DMA_IRQHandler+0x1fc>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d012      	beq.n	8000f5e <HAL_DMA_IRQHandler+0x156>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a32      	ldr	r2, [pc, #200]	; (8001008 <HAL_DMA_IRQHandler+0x200>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d00a      	beq.n	8000f58 <HAL_DMA_IRQHandler+0x150>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a31      	ldr	r2, [pc, #196]	; (800100c <HAL_DMA_IRQHandler+0x204>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d102      	bne.n	8000f52 <HAL_DMA_IRQHandler+0x14a>
 8000f4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f50:	e00e      	b.n	8000f70 <HAL_DMA_IRQHandler+0x168>
 8000f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f56:	e00b      	b.n	8000f70 <HAL_DMA_IRQHandler+0x168>
 8000f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5c:	e008      	b.n	8000f70 <HAL_DMA_IRQHandler+0x168>
 8000f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f62:	e005      	b.n	8000f70 <HAL_DMA_IRQHandler+0x168>
 8000f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f68:	e002      	b.n	8000f70 <HAL_DMA_IRQHandler+0x168>
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	e000      	b.n	8000f70 <HAL_DMA_IRQHandler+0x168>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <HAL_DMA_IRQHandler+0x208>)
 8000f72:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d034      	beq.n	8000fee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f8c:	e02f      	b.n	8000fee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	2208      	movs	r2, #8
 8000f94:	409a      	lsls	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d028      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x1e8>
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d023      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 020e 	bic.w	r2, r2, #14
 8000fb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d004      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	4798      	blx	r3
    }
  }
  return;
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
}
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40020008 	.word	0x40020008
 8000ffc:	4002001c 	.word	0x4002001c
 8001000:	40020030 	.word	0x40020030
 8001004:	40020044 	.word	0x40020044
 8001008:	40020058 	.word	0x40020058
 800100c:	4002006c 	.word	0x4002006c
 8001010:	40020000 	.word	0x40020000

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b08b      	sub	sp, #44	; 0x2c
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e127      	b.n	8001278 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001028:	2201      	movs	r2, #1
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	429a      	cmp	r2, r3
 8001042:	f040 8116 	bne.w	8001272 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b12      	cmp	r3, #18
 800104c:	d034      	beq.n	80010b8 <HAL_GPIO_Init+0xa4>
 800104e:	2b12      	cmp	r3, #18
 8001050:	d80d      	bhi.n	800106e <HAL_GPIO_Init+0x5a>
 8001052:	2b02      	cmp	r3, #2
 8001054:	d02b      	beq.n	80010ae <HAL_GPIO_Init+0x9a>
 8001056:	2b02      	cmp	r3, #2
 8001058:	d804      	bhi.n	8001064 <HAL_GPIO_Init+0x50>
 800105a:	2b00      	cmp	r3, #0
 800105c:	d031      	beq.n	80010c2 <HAL_GPIO_Init+0xae>
 800105e:	2b01      	cmp	r3, #1
 8001060:	d01c      	beq.n	800109c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001062:	e048      	b.n	80010f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001064:	2b03      	cmp	r3, #3
 8001066:	d043      	beq.n	80010f0 <HAL_GPIO_Init+0xdc>
 8001068:	2b11      	cmp	r3, #17
 800106a:	d01b      	beq.n	80010a4 <HAL_GPIO_Init+0x90>
          break;
 800106c:	e043      	b.n	80010f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800106e:	4a89      	ldr	r2, [pc, #548]	; (8001294 <HAL_GPIO_Init+0x280>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d026      	beq.n	80010c2 <HAL_GPIO_Init+0xae>
 8001074:	4a87      	ldr	r2, [pc, #540]	; (8001294 <HAL_GPIO_Init+0x280>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d806      	bhi.n	8001088 <HAL_GPIO_Init+0x74>
 800107a:	4a87      	ldr	r2, [pc, #540]	; (8001298 <HAL_GPIO_Init+0x284>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d020      	beq.n	80010c2 <HAL_GPIO_Init+0xae>
 8001080:	4a86      	ldr	r2, [pc, #536]	; (800129c <HAL_GPIO_Init+0x288>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d01d      	beq.n	80010c2 <HAL_GPIO_Init+0xae>
          break;
 8001086:	e036      	b.n	80010f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001088:	4a85      	ldr	r2, [pc, #532]	; (80012a0 <HAL_GPIO_Init+0x28c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d019      	beq.n	80010c2 <HAL_GPIO_Init+0xae>
 800108e:	4a85      	ldr	r2, [pc, #532]	; (80012a4 <HAL_GPIO_Init+0x290>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d016      	beq.n	80010c2 <HAL_GPIO_Init+0xae>
 8001094:	4a84      	ldr	r2, [pc, #528]	; (80012a8 <HAL_GPIO_Init+0x294>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0xae>
          break;
 800109a:	e02c      	b.n	80010f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	623b      	str	r3, [r7, #32]
          break;
 80010a2:	e028      	b.n	80010f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	3304      	adds	r3, #4
 80010aa:	623b      	str	r3, [r7, #32]
          break;
 80010ac:	e023      	b.n	80010f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	3308      	adds	r3, #8
 80010b4:	623b      	str	r3, [r7, #32]
          break;
 80010b6:	e01e      	b.n	80010f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	330c      	adds	r3, #12
 80010be:	623b      	str	r3, [r7, #32]
          break;
 80010c0:	e019      	b.n	80010f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d102      	bne.n	80010d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ca:	2304      	movs	r3, #4
 80010cc:	623b      	str	r3, [r7, #32]
          break;
 80010ce:	e012      	b.n	80010f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d105      	bne.n	80010e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d8:	2308      	movs	r3, #8
 80010da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	611a      	str	r2, [r3, #16]
          break;
 80010e2:	e008      	b.n	80010f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e4:	2308      	movs	r3, #8
 80010e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69fa      	ldr	r2, [r7, #28]
 80010ec:	615a      	str	r2, [r3, #20]
          break;
 80010ee:	e002      	b.n	80010f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
          break;
 80010f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2bff      	cmp	r3, #255	; 0xff
 80010fa:	d801      	bhi.n	8001100 <HAL_GPIO_Init+0xec>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	e001      	b.n	8001104 <HAL_GPIO_Init+0xf0>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3304      	adds	r3, #4
 8001104:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	2bff      	cmp	r3, #255	; 0xff
 800110a:	d802      	bhi.n	8001112 <HAL_GPIO_Init+0xfe>
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x104>
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	3b08      	subs	r3, #8
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	210f      	movs	r1, #15
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	401a      	ands	r2, r3
 800112a:	6a39      	ldr	r1, [r7, #32]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	431a      	orrs	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 8096 	beq.w	8001272 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001146:	4b59      	ldr	r3, [pc, #356]	; (80012ac <HAL_GPIO_Init+0x298>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	4a58      	ldr	r2, [pc, #352]	; (80012ac <HAL_GPIO_Init+0x298>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6193      	str	r3, [r2, #24]
 8001152:	4b56      	ldr	r3, [pc, #344]	; (80012ac <HAL_GPIO_Init+0x298>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800115e:	4a54      	ldr	r2, [pc, #336]	; (80012b0 <HAL_GPIO_Init+0x29c>)
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4013      	ands	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4b      	ldr	r2, [pc, #300]	; (80012b4 <HAL_GPIO_Init+0x2a0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x19e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4a      	ldr	r2, [pc, #296]	; (80012b8 <HAL_GPIO_Init+0x2a4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x19a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a49      	ldr	r2, [pc, #292]	; (80012bc <HAL_GPIO_Init+0x2a8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x196>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a48      	ldr	r2, [pc, #288]	; (80012c0 <HAL_GPIO_Init+0x2ac>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x192>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x1a0>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x1a0>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x1a0>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x1a0>
 80011b2:	2300      	movs	r3, #0
 80011b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b6:	f002 0203 	and.w	r2, r2, #3
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4093      	lsls	r3, r2
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011c4:	493a      	ldr	r1, [pc, #232]	; (80012b0 <HAL_GPIO_Init+0x29c>)
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011de:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4938      	ldr	r1, [pc, #224]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	4933      	ldr	r1, [pc, #204]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001206:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	492e      	ldr	r1, [pc, #184]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	604b      	str	r3, [r1, #4]
 8001212:	e006      	b.n	8001222 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001214:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	43db      	mvns	r3, r3
 800121c:	4929      	ldr	r1, [pc, #164]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 800121e:	4013      	ands	r3, r2
 8001220:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	4924      	ldr	r1, [pc, #144]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	608b      	str	r3, [r1, #8]
 800123a:	e006      	b.n	800124a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	43db      	mvns	r3, r3
 8001244:	491f      	ldr	r1, [pc, #124]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 8001246:	4013      	ands	r3, r2
 8001248:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	491a      	ldr	r1, [pc, #104]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	60cb      	str	r3, [r1, #12]
 8001262:	e006      	b.n	8001272 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	43db      	mvns	r3, r3
 800126c:	4915      	ldr	r1, [pc, #84]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 800126e:	4013      	ands	r3, r2
 8001270:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	3301      	adds	r3, #1
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	fa22 f303 	lsr.w	r3, r2, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	f47f aed0 	bne.w	8001028 <HAL_GPIO_Init+0x14>
  }
}
 8001288:	bf00      	nop
 800128a:	372c      	adds	r7, #44	; 0x2c
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	10210000 	.word	0x10210000
 8001298:	10110000 	.word	0x10110000
 800129c:	10120000 	.word	0x10120000
 80012a0:	10310000 	.word	0x10310000
 80012a4:	10320000 	.word	0x10320000
 80012a8:	10220000 	.word	0x10220000
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	40010800 	.word	0x40010800
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40011400 	.word	0x40011400
 80012c4:	40010400 	.word	0x40010400

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012e4:	e003      	b.n	80012ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	041a      	lsls	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	611a      	str	r2, [r3, #16]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	4013      	ands	r3, r2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001310:	887a      	ldrh	r2, [r7, #2]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001316:	e002      	b.n	800131e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001318:	887a      	ldrh	r2, [r7, #2]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	611a      	str	r2, [r3, #16]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e10f      	b.n	800155a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d106      	bne.n	8001354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fa1c 	bl	800078c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2224      	movs	r2, #36	; 0x24
 8001358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0201 	bic.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800136c:	f001 fb40 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8001370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a7b      	ldr	r2, [pc, #492]	; (8001564 <HAL_I2C_Init+0x23c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d807      	bhi.n	800138c <HAL_I2C_Init+0x64>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a7a      	ldr	r2, [pc, #488]	; (8001568 <HAL_I2C_Init+0x240>)
 8001380:	4293      	cmp	r3, r2
 8001382:	bf94      	ite	ls
 8001384:	2301      	movls	r3, #1
 8001386:	2300      	movhi	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	e006      	b.n	800139a <HAL_I2C_Init+0x72>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4a77      	ldr	r2, [pc, #476]	; (800156c <HAL_I2C_Init+0x244>)
 8001390:	4293      	cmp	r3, r2
 8001392:	bf94      	ite	ls
 8001394:	2301      	movls	r3, #1
 8001396:	2300      	movhi	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e0db      	b.n	800155a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4a72      	ldr	r2, [pc, #456]	; (8001570 <HAL_I2C_Init+0x248>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0c9b      	lsrs	r3, r3, #18
 80013ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	430a      	orrs	r2, r1
 80013c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4a64      	ldr	r2, [pc, #400]	; (8001564 <HAL_I2C_Init+0x23c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d802      	bhi.n	80013dc <HAL_I2C_Init+0xb4>
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3301      	adds	r3, #1
 80013da:	e009      	b.n	80013f0 <HAL_I2C_Init+0xc8>
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013e2:	fb02 f303 	mul.w	r3, r2, r3
 80013e6:	4a63      	ldr	r2, [pc, #396]	; (8001574 <HAL_I2C_Init+0x24c>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	099b      	lsrs	r3, r3, #6
 80013ee:	3301      	adds	r3, #1
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	430b      	orrs	r3, r1
 80013f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4956      	ldr	r1, [pc, #344]	; (8001564 <HAL_I2C_Init+0x23c>)
 800140c:	428b      	cmp	r3, r1
 800140e:	d80d      	bhi.n	800142c <HAL_I2C_Init+0x104>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1e59      	subs	r1, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	fbb1 f3f3 	udiv	r3, r1, r3
 800141e:	3301      	adds	r3, #1
 8001420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001424:	2b04      	cmp	r3, #4
 8001426:	bf38      	it	cc
 8001428:	2304      	movcc	r3, #4
 800142a:	e04f      	b.n	80014cc <HAL_I2C_Init+0x1a4>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d111      	bne.n	8001458 <HAL_I2C_Init+0x130>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1e58      	subs	r0, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	440b      	add	r3, r1
 8001442:	fbb0 f3f3 	udiv	r3, r0, r3
 8001446:	3301      	adds	r3, #1
 8001448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	e012      	b.n	800147e <HAL_I2C_Init+0x156>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1e58      	subs	r0, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	0099      	lsls	r1, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	fbb0 f3f3 	udiv	r3, r0, r3
 800146e:	3301      	adds	r3, #1
 8001470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_I2C_Init+0x15e>
 8001482:	2301      	movs	r3, #1
 8001484:	e022      	b.n	80014cc <HAL_I2C_Init+0x1a4>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10e      	bne.n	80014ac <HAL_I2C_Init+0x184>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1e58      	subs	r0, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6859      	ldr	r1, [r3, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a0:	3301      	adds	r3, #1
 80014a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014aa:	e00f      	b.n	80014cc <HAL_I2C_Init+0x1a4>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1e58      	subs	r0, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	0099      	lsls	r1, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	6809      	ldr	r1, [r1, #0]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69da      	ldr	r2, [r3, #28]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6911      	ldr	r1, [r2, #16]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68d2      	ldr	r2, [r2, #12]
 8001506:	4311      	orrs	r1, r2
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	430b      	orrs	r3, r1
 800150e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2220      	movs	r2, #32
 8001546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	000186a0 	.word	0x000186a0
 8001568:	001e847f 	.word	0x001e847f
 800156c:	003d08ff 	.word	0x003d08ff
 8001570:	431bde83 	.word	0x431bde83
 8001574:	10624dd3 	.word	0x10624dd3

08001578 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af02      	add	r7, sp, #8
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	4608      	mov	r0, r1
 8001582:	4611      	mov	r1, r2
 8001584:	461a      	mov	r2, r3
 8001586:	4603      	mov	r3, r0
 8001588:	817b      	strh	r3, [r7, #10]
 800158a:	460b      	mov	r3, r1
 800158c:	813b      	strh	r3, [r7, #8]
 800158e:	4613      	mov	r3, r2
 8001590:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001592:	f7ff fad3 	bl	8000b3c <HAL_GetTick>
 8001596:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b20      	cmp	r3, #32
 80015a2:	f040 80d9 	bne.w	8001758 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2319      	movs	r3, #25
 80015ac:	2201      	movs	r2, #1
 80015ae:	496d      	ldr	r1, [pc, #436]	; (8001764 <HAL_I2C_Mem_Write+0x1ec>)
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 fc6b 	bl	8001e8c <I2C_WaitOnFlagUntilTimeout>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80015bc:	2302      	movs	r3, #2
 80015be:	e0cc      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_I2C_Mem_Write+0x56>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e0c5      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d007      	beq.n	80015f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001602:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2221      	movs	r2, #33	; 0x21
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2240      	movs	r2, #64	; 0x40
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4a4d      	ldr	r2, [pc, #308]	; (8001768 <HAL_I2C_Mem_Write+0x1f0>)
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001636:	88f8      	ldrh	r0, [r7, #6]
 8001638:	893a      	ldrh	r2, [r7, #8]
 800163a:	8979      	ldrh	r1, [r7, #10]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	4603      	mov	r3, r0
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 fac6 	bl	8001bd8 <I2C_RequestMemoryWrite>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d052      	beq.n	80016f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e081      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 fcec 	bl	8002038 <I2C_WaitOnTXEFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00d      	beq.n	8001682 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	2b04      	cmp	r3, #4
 800166c:	d107      	bne.n	800167e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800167c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169c:	3b01      	subs	r3, #1
 800169e:	b29a      	uxth	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d11b      	bne.n	80016f8 <HAL_I2C_Mem_Write+0x180>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d017      	beq.n	80016f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1aa      	bne.n	8001656 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 fcd8 	bl	80020ba <I2C_WaitOnBTFFlagUntilTimeout>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00d      	beq.n	800172c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	2b04      	cmp	r3, #4
 8001716:	d107      	bne.n	8001728 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001726:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e016      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	00100002 	.word	0x00100002
 8001768:	ffff0000 	.word	0xffff0000

0800176c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	817b      	strh	r3, [r7, #10]
 800177e:	460b      	mov	r3, r1
 8001780:	813b      	strh	r3, [r7, #8]
 8001782:	4613      	mov	r3, r2
 8001784:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001786:	f7ff f9d9 	bl	8000b3c <HAL_GetTick>
 800178a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b20      	cmp	r3, #32
 8001796:	f040 8218 	bne.w	8001bca <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2319      	movs	r3, #25
 80017a0:	2201      	movs	r2, #1
 80017a2:	4981      	ldr	r1, [pc, #516]	; (80019a8 <HAL_I2C_Mem_Read+0x23c>)
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 fb71 	bl	8001e8c <I2C_WaitOnFlagUntilTimeout>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80017b0:	2302      	movs	r3, #2
 80017b2:	e20b      	b.n	8001bcc <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_I2C_Mem_Read+0x56>
 80017be:	2302      	movs	r3, #2
 80017c0:	e204      	b.n	8001bcc <HAL_I2C_Mem_Read+0x460>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d007      	beq.n	80017e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2222      	movs	r2, #34	; 0x22
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2240      	movs	r2, #64	; 0x40
 8001804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001818:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a61      	ldr	r2, [pc, #388]	; (80019ac <HAL_I2C_Mem_Read+0x240>)
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800182a:	88f8      	ldrh	r0, [r7, #6]
 800182c:	893a      	ldrh	r2, [r7, #8]
 800182e:	8979      	ldrh	r1, [r7, #10]
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4603      	mov	r3, r0
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 fa56 	bl	8001cec <I2C_RequestMemoryRead>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e1c0      	b.n	8001bcc <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	2b00      	cmp	r3, #0
 8001850:	d113      	bne.n	800187a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	623b      	str	r3, [r7, #32]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	623b      	str	r3, [r7, #32]
 8001866:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e194      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187e:	2b01      	cmp	r3, #1
 8001880:	d11d      	bne.n	80018be <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001890:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001892:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018ba:	b662      	cpsie	i
 80018bc:	e172      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d11d      	bne.n	8001902 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018d6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018fe:	b662      	cpsie	i
 8001900:	e150      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001910:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001928:	e13c      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192e:	2b03      	cmp	r3, #3
 8001930:	f200 80f5 	bhi.w	8001b1e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	2b01      	cmp	r3, #1
 800193a:	d123      	bne.n	8001984 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 fbfb 	bl	800213c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e13d      	b.n	8001bcc <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001978:	b29b      	uxth	r3, r3
 800197a:	3b01      	subs	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001982:	e10f      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001988:	2b02      	cmp	r3, #2
 800198a:	d150      	bne.n	8001a2e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001992:	2200      	movs	r2, #0
 8001994:	4906      	ldr	r1, [pc, #24]	; (80019b0 <HAL_I2C_Mem_Read+0x244>)
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 fa78 	bl	8001e8c <I2C_WaitOnFlagUntilTimeout>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d008      	beq.n	80019b4 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e112      	b.n	8001bcc <HAL_I2C_Mem_Read+0x460>
 80019a6:	bf00      	nop
 80019a8:	00100002 	.word	0x00100002
 80019ac:	ffff0000 	.word	0xffff0000
 80019b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80019f8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a2c:	e0ba      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a34:	2200      	movs	r2, #0
 8001a36:	4967      	ldr	r1, [pc, #412]	; (8001bd4 <HAL_I2C_Mem_Read+0x468>)
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 fa27 	bl	8001e8c <I2C_WaitOnFlagUntilTimeout>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0c1      	b.n	8001bcc <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a92:	2200      	movs	r2, #0
 8001a94:	494f      	ldr	r1, [pc, #316]	; (8001bd4 <HAL_I2C_Mem_Read+0x468>)
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f9f8 	bl	8001e8c <I2C_WaitOnFlagUntilTimeout>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e092      	b.n	8001bcc <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ae8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b1c:	e042      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fb0a 	bl	800213c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e04c      	b.n	8001bcc <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d118      	bne.n	8001ba4 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f47f aebe 	bne.w	800192a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8001bca:	2302      	movs	r3, #2
  }
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	00010004 	.word	0x00010004

08001bd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	4608      	mov	r0, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	4603      	mov	r3, r0
 8001be8:	817b      	strh	r3, [r7, #10]
 8001bea:	460b      	mov	r3, r1
 8001bec:	813b      	strh	r3, [r7, #8]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f93c 	bl	8001e8c <I2C_WaitOnFlagUntilTimeout>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e05f      	b.n	8001cde <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c1e:	897b      	ldrh	r3, [r7, #10]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	6a3a      	ldr	r2, [r7, #32]
 8001c32:	492d      	ldr	r1, [pc, #180]	; (8001ce8 <I2C_RequestMemoryWrite+0x110>)
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f980 	bl	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e04c      	b.n	8001cde <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f9ea 	bl	8002038 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d107      	bne.n	8001c82 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e02b      	b.n	8001cde <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d105      	bne.n	8001c98 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c8c:	893b      	ldrh	r3, [r7, #8]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	e021      	b.n	8001cdc <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c98:	893b      	ldrh	r3, [r7, #8]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca8:	6a39      	ldr	r1, [r7, #32]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f9c4 	bl	8002038 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00d      	beq.n	8001cd2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d107      	bne.n	8001cce <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ccc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e005      	b.n	8001cde <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cd2:	893b      	ldrh	r3, [r7, #8]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	00010002 	.word	0x00010002

08001cec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	4608      	mov	r0, r1
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	817b      	strh	r3, [r7, #10]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	813b      	strh	r3, [r7, #8]
 8001d02:	4613      	mov	r3, r2
 8001d04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f8aa 	bl	8001e8c <I2C_WaitOnFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e09e      	b.n	8001e80 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	6a3a      	ldr	r2, [r7, #32]
 8001d56:	494c      	ldr	r1, [pc, #304]	; (8001e88 <I2C_RequestMemoryRead+0x19c>)
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f8ee 	bl	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e08b      	b.n	8001e80 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d80:	6a39      	ldr	r1, [r7, #32]
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f958 	bl	8002038 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00d      	beq.n	8001daa <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d107      	bne.n	8001da6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e06a      	b.n	8001e80 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001db0:	893b      	ldrh	r3, [r7, #8]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	611a      	str	r2, [r3, #16]
 8001dba:	e021      	b.n	8001e00 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001dbc:	893b      	ldrh	r3, [r7, #8]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dcc:	6a39      	ldr	r1, [r7, #32]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f932 	bl	8002038 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00d      	beq.n	8001df6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d107      	bne.n	8001df2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e044      	b.n	8001e80 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001df6:	893b      	ldrh	r3, [r7, #8]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e02:	6a39      	ldr	r1, [r7, #32]
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 f917 	bl	8002038 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00d      	beq.n	8001e2c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d107      	bne.n	8001e28 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e029      	b.n	8001e80 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f81f 	bl	8001e8c <I2C_WaitOnFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e013      	b.n	8001e80 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e58:	897b      	ldrh	r3, [r7, #10]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	6a3a      	ldr	r2, [r7, #32]
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <I2C_RequestMemoryRead+0x19c>)
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f863 	bl	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	00010002 	.word	0x00010002

08001e8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e9c:	e025      	b.n	8001eea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d021      	beq.n	8001eea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea6:	f7fe fe49 	bl	8000b3c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d302      	bcc.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d116      	bne.n	8001eea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f043 0220 	orr.w	r2, r3, #32
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e023      	b.n	8001f32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d10d      	bne.n	8001f10 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4013      	ands	r3, r2
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf0c      	ite	eq
 8001f06:	2301      	moveq	r3, #1
 8001f08:	2300      	movne	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	e00c      	b.n	8001f2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf0c      	ite	eq
 8001f22:	2301      	moveq	r3, #1
 8001f24:	2300      	movne	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d0b6      	beq.n	8001e9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f48:	e051      	b.n	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f58:	d123      	bne.n	8001fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f043 0204 	orr.w	r2, r3, #4
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e046      	b.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d021      	beq.n	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001faa:	f7fe fdc7 	bl	8000b3c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d116      	bne.n	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f043 0220 	orr.w	r2, r3, #32
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e020      	b.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10c      	bne.n	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4013      	ands	r3, r2
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	bf14      	ite	ne
 800200a:	2301      	movne	r3, #1
 800200c:	2300      	moveq	r3, #0
 800200e:	b2db      	uxtb	r3, r3
 8002010:	e00b      	b.n	800202a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	43da      	mvns	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4013      	ands	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf14      	ite	ne
 8002024:	2301      	movne	r3, #1
 8002026:	2300      	moveq	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d18d      	bne.n	8001f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002044:	e02d      	b.n	80020a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f8ce 	bl	80021e8 <I2C_IsAcknowledgeFailed>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e02d      	b.n	80020b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d021      	beq.n	80020a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205e:	f7fe fd6d 	bl	8000b3c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d302      	bcc.n	8002074 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d116      	bne.n	80020a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f043 0220 	orr.w	r2, r3, #32
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e007      	b.n	80020b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ac:	2b80      	cmp	r3, #128	; 0x80
 80020ae:	d1ca      	bne.n	8002046 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020c6:	e02d      	b.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f88d 	bl	80021e8 <I2C_IsAcknowledgeFailed>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e02d      	b.n	8002134 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020de:	d021      	beq.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e0:	f7fe fd2c 	bl	8000b3c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d302      	bcc.n	80020f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e007      	b.n	8002134 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b04      	cmp	r3, #4
 8002130:	d1ca      	bne.n	80020c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002148:	e042      	b.n	80021d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b10      	cmp	r3, #16
 8002156:	d119      	bne.n	800218c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0210 	mvn.w	r2, #16
 8002160:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e029      	b.n	80021e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218c:	f7fe fcd6 	bl	8000b3c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	429a      	cmp	r2, r3
 800219a:	d302      	bcc.n	80021a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d116      	bne.n	80021d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f043 0220 	orr.w	r2, r3, #32
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e007      	b.n	80021e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021da:	2b40      	cmp	r3, #64	; 0x40
 80021dc:	d1b5      	bne.n	800214a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fe:	d11b      	bne.n	8002238 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002208:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e26c      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8087 	beq.w	8002372 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002264:	4b92      	ldr	r3, [pc, #584]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b04      	cmp	r3, #4
 800226e:	d00c      	beq.n	800228a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002270:	4b8f      	ldr	r3, [pc, #572]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	d112      	bne.n	80022a2 <HAL_RCC_OscConfig+0x5e>
 800227c:	4b8c      	ldr	r3, [pc, #560]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d10b      	bne.n	80022a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228a:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d06c      	beq.n	8002370 <HAL_RCC_OscConfig+0x12c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d168      	bne.n	8002370 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e246      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x76>
 80022ac:	4b80      	ldr	r3, [pc, #512]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a7f      	ldr	r2, [pc, #508]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e02e      	b.n	8002318 <HAL_RCC_OscConfig+0xd4>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x98>
 80022c2:	4b7b      	ldr	r3, [pc, #492]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7a      	ldr	r2, [pc, #488]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b78      	ldr	r3, [pc, #480]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a77      	ldr	r2, [pc, #476]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0xd4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0xbc>
 80022e6:	4b72      	ldr	r3, [pc, #456]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a71      	ldr	r2, [pc, #452]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b6f      	ldr	r3, [pc, #444]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6e      	ldr	r2, [pc, #440]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0xd4>
 8002300:	4b6b      	ldr	r3, [pc, #428]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a6a      	ldr	r2, [pc, #424]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a67      	ldr	r2, [pc, #412]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe fc0c 	bl	8000b3c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7fe fc08 	bl	8000b3c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1fa      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0xe4>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fbf8 	bl	8000b3c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe fbf4 	bl	8000b3c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1e6      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x10c>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d063      	beq.n	8002446 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800237e:	4b4c      	ldr	r3, [pc, #304]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800238a:	4b49      	ldr	r3, [pc, #292]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b08      	cmp	r3, #8
 8002394:	d11c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x18c>
 8002396:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d116      	bne.n	80023d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x176>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e1ba      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4939      	ldr	r1, [pc, #228]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	e03a      	b.n	8002446 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d8:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7fe fbad 	bl	8000b3c <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e6:	f7fe fba9 	bl	8000b3c <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e19b      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4927      	ldr	r1, [pc, #156]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
 8002418:	e015      	b.n	8002446 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fb8c 	bl	8000b3c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002428:	f7fe fb88 	bl	8000b3c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e17a      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d03a      	beq.n	80024c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d019      	beq.n	800248e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245a:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7fe fb6c 	bl	8000b3c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7fe fb68 	bl	8000b3c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e15a      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002486:	2001      	movs	r0, #1
 8002488:	f000 fb0a 	bl	8002aa0 <RCC_Delay>
 800248c:	e01c      	b.n	80024c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002494:	f7fe fb52 	bl	8000b3c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249a:	e00f      	b.n	80024bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe fb4e 	bl	8000b3c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d908      	bls.n	80024bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e140      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	42420000 	.word	0x42420000
 80024b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	4b9e      	ldr	r3, [pc, #632]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e9      	bne.n	800249c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a6 	beq.w	8002622 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024da:	4b97      	ldr	r3, [pc, #604]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10d      	bne.n	8002502 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	4b94      	ldr	r3, [pc, #592]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a93      	ldr	r2, [pc, #588]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	61d3      	str	r3, [r2, #28]
 80024f2:	4b91      	ldr	r3, [pc, #580]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fe:	2301      	movs	r3, #1
 8002500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	4b8e      	ldr	r3, [pc, #568]	; (800273c <HAL_RCC_OscConfig+0x4f8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d118      	bne.n	8002540 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250e:	4b8b      	ldr	r3, [pc, #556]	; (800273c <HAL_RCC_OscConfig+0x4f8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a8a      	ldr	r2, [pc, #552]	; (800273c <HAL_RCC_OscConfig+0x4f8>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251a:	f7fe fb0f 	bl	8000b3c <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002522:	f7fe fb0b 	bl	8000b3c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b64      	cmp	r3, #100	; 0x64
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0fd      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x4f8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x312>
 8002548:	4b7b      	ldr	r3, [pc, #492]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a7a      	ldr	r2, [pc, #488]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	e02d      	b.n	80025b2 <HAL_RCC_OscConfig+0x36e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x334>
 800255e:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4a75      	ldr	r2, [pc, #468]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	6213      	str	r3, [r2, #32]
 800256a:	4b73      	ldr	r3, [pc, #460]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a72      	ldr	r2, [pc, #456]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	e01c      	b.n	80025b2 <HAL_RCC_OscConfig+0x36e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d10c      	bne.n	800259a <HAL_RCC_OscConfig+0x356>
 8002580:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4a6c      	ldr	r2, [pc, #432]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	6213      	str	r3, [r2, #32]
 800258c:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4a69      	ldr	r2, [pc, #420]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6213      	str	r3, [r2, #32]
 8002598:	e00b      	b.n	80025b2 <HAL_RCC_OscConfig+0x36e>
 800259a:	4b67      	ldr	r3, [pc, #412]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a66      	ldr	r2, [pc, #408]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	4b64      	ldr	r3, [pc, #400]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a63      	ldr	r2, [pc, #396]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d015      	beq.n	80025e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ba:	f7fe fabf 	bl	8000b3c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe fabb 	bl	8000b3c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0ab      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d8:	4b57      	ldr	r3, [pc, #348]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ee      	beq.n	80025c2 <HAL_RCC_OscConfig+0x37e>
 80025e4:	e014      	b.n	8002610 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7fe faa9 	bl	8000b3c <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe faa5 	bl	8000b3c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e095      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002604:	4b4c      	ldr	r3, [pc, #304]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ee      	bne.n	80025ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002610:	7dfb      	ldrb	r3, [r7, #23]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d105      	bne.n	8002622 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002616:	4b48      	ldr	r3, [pc, #288]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4a47      	ldr	r2, [pc, #284]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002620:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8081 	beq.w	800272e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262c:	4b42      	ldr	r3, [pc, #264]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b08      	cmp	r3, #8
 8002636:	d061      	beq.n	80026fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d146      	bne.n	80026ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002640:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <HAL_RCC_OscConfig+0x4fc>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe fa79 	bl	8000b3c <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe fa75 	bl	8000b3c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e067      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	4b35      	ldr	r3, [pc, #212]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002674:	d108      	bne.n	8002688 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	492d      	ldr	r1, [pc, #180]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a19      	ldr	r1, [r3, #32]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	430b      	orrs	r3, r1
 800269a:	4927      	ldr	r1, [pc, #156]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x4fc>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7fe fa49 	bl	8000b3c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ae:	f7fe fa45 	bl	8000b3c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e037      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x46a>
 80026cc:	e02f      	b.n	800272e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <HAL_RCC_OscConfig+0x4fc>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe fa32 	bl	8000b3c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fa2e 	bl	8000b3c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e020      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x498>
 80026fa:	e018      	b.n	800272e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e013      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	429a      	cmp	r2, r3
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
 8002740:	42420060 	.word	0x42420060

08002744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0d0      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b6a      	ldr	r3, [pc, #424]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d910      	bls.n	8002788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b67      	ldr	r3, [pc, #412]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 0207 	bic.w	r2, r3, #7
 800276e:	4965      	ldr	r1, [pc, #404]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0b8      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d020      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a0:	4b59      	ldr	r3, [pc, #356]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a58      	ldr	r2, [pc, #352]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b8:	4b53      	ldr	r3, [pc, #332]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a52      	ldr	r2, [pc, #328]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c4:	4b50      	ldr	r3, [pc, #320]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	494d      	ldr	r1, [pc, #308]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d040      	beq.n	8002864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b47      	ldr	r3, [pc, #284]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d115      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e07f      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b41      	ldr	r3, [pc, #260]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e073      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b3d      	ldr	r3, [pc, #244]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e06b      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002822:	4b39      	ldr	r3, [pc, #228]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f023 0203 	bic.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4936      	ldr	r1, [pc, #216]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002834:	f7fe f982 	bl	8000b3c <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7fe f97e 	bl	8000b3c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e053      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 020c 	and.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d1eb      	bne.n	800283c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002864:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d210      	bcs.n	8002894 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 0207 	bic.w	r2, r3, #7
 800287a:	4922      	ldr	r1, [pc, #136]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e032      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4916      	ldr	r1, [pc, #88]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	490e      	ldr	r1, [pc, #56]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028d2:	f000 f821 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028d6:	4601      	mov	r1, r0
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	5cd3      	ldrb	r3, [r2, r3]
 80028e6:	fa21 f303 	lsr.w	r3, r1, r3
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1cc>)
 80028ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x1d0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe f81c 	bl	8000930 <HAL_InitTick>

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40022000 	.word	0x40022000
 8002908:	40021000 	.word	0x40021000
 800290c:	08006458 	.word	0x08006458
 8002910:	20000000 	.word	0x20000000
 8002914:	20000004 	.word	0x20000004

08002918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b490      	push	{r4, r7}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800291e:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002920:	1d3c      	adds	r4, r7, #4
 8002922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002928:	4b28      	ldr	r3, [pc, #160]	; (80029cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	2300      	movs	r3, #0
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002942:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d002      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x40>
 8002952:	2b08      	cmp	r3, #8
 8002954:	d003      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0x46>
 8002956:	e02d      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800295a:	623b      	str	r3, [r7, #32]
      break;
 800295c:	e02d      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	0c9b      	lsrs	r3, r3, #18
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800296a:	4413      	add	r3, r2
 800296c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002970:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	0c5b      	lsrs	r3, r3, #17
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800298a:	4413      	add	r3, r2
 800298c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002990:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	4a0f      	ldr	r2, [pc, #60]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002996:	fb02 f203 	mul.w	r2, r2, r3
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	e004      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029a8:	fb02 f303 	mul.w	r3, r2, r3
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	623b      	str	r3, [r7, #32]
      break;
 80029b2:	e002      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029b6:	623b      	str	r3, [r7, #32]
      break;
 80029b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ba:	6a3b      	ldr	r3, [r7, #32]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3728      	adds	r7, #40	; 0x28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc90      	pop	{r4, r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	080063e4 	.word	0x080063e4
 80029cc:	080063f4 	.word	0x080063f4
 80029d0:	40021000 	.word	0x40021000
 80029d4:	007a1200 	.word	0x007a1200
 80029d8:	003d0900 	.word	0x003d0900

080029dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e0:	4b02      	ldr	r3, [pc, #8]	; (80029ec <HAL_RCC_GetHCLKFreq+0x10>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	20000000 	.word	0x20000000

080029f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029f4:	f7ff fff2 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 80029f8:	4601      	mov	r1, r0
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4a03      	ldr	r2, [pc, #12]	; (8002a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000
 8002a14:	08006468 	.word	0x08006468

08002a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a1c:	f7ff ffde 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002a20:	4601      	mov	r1, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0adb      	lsrs	r3, r3, #11
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4a03      	ldr	r2, [pc, #12]	; (8002a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2e:	5cd3      	ldrb	r3, [r2, r3]
 8002a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	08006468 	.word	0x08006468

08002a40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_RCC_GetClockConfig+0x58>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0203 	and.w	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_RCC_GetClockConfig+0x58>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_GetClockConfig+0x58>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_RCC_GetClockConfig+0x58>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	08db      	lsrs	r3, r3, #3
 8002a7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_RCC_GetClockConfig+0x5c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0207 	and.w	r2, r3, #7
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40022000 	.word	0x40022000

08002aa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <RCC_Delay+0x34>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <RCC_Delay+0x38>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	0a5b      	lsrs	r3, r3, #9
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002abc:	bf00      	nop
  }
  while (Delay --);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1e5a      	subs	r2, r3, #1
 8002ac2:	60fa      	str	r2, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f9      	bne.n	8002abc <RCC_Delay+0x1c>
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	10624dd3 	.word	0x10624dd3

08002adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e01d      	b.n	8002b2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fd fe82 	bl	800080c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	f000 fb60 	bl	80031e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b06      	cmp	r3, #6
 8002b52:	d007      	beq.n	8002b64 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d007      	beq.n	8002bb2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e01d      	b.n	8002c0c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f815 	bl	8002c14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2202      	movs	r2, #2
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	f000 faef 	bl	80031e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2201      	movs	r2, #1
 8002c38:	6839      	ldr	r1, [r7, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fd50 	bl	80036e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a10      	ldr	r2, [pc, #64]	; (8002c88 <HAL_TIM_PWM_Start+0x60>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d107      	bne.n	8002c5a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b06      	cmp	r3, #6
 8002c6a:	d007      	beq.n	8002c7c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40012c00 	.word	0x40012c00

08002c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d122      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d11b      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0202 	mvn.w	r2, #2
 8002cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa6a 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002cd4:	e005      	b.n	8002ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fa5d 	bl	8003196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fa6c 	bl	80031ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d122      	bne.n	8002d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d11b      	bne.n	8002d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0204 	mvn.w	r2, #4
 8002d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2202      	movs	r2, #2
 8002d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa40 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002d28:	e005      	b.n	8002d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fa33 	bl	8003196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fa42 	bl	80031ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d122      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d11b      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0208 	mvn.w	r2, #8
 8002d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2204      	movs	r2, #4
 8002d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fa16 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002d7c:	e005      	b.n	8002d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa09 	bl	8003196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fa18 	bl	80031ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d122      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b10      	cmp	r3, #16
 8002daa:	d11b      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0210 	mvn.w	r2, #16
 8002db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2208      	movs	r2, #8
 8002dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f9ec 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002dd0:	e005      	b.n	8002dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9df 	bl	8003196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f9ee 	bl	80031ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d10e      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d107      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0201 	mvn.w	r2, #1
 8002e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fd fc6e 	bl	80006ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1a:	2b80      	cmp	r3, #128	; 0x80
 8002e1c:	d10e      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e28:	2b80      	cmp	r3, #128	; 0x80
 8002e2a:	d107      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fcc3 	bl	80037c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	d10e      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d107      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f9b2 	bl	80031cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d10e      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d107      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0220 	mvn.w	r2, #32
 8002e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fc8e 	bl	80037b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e0b4      	b.n	8003020 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b0c      	cmp	r3, #12
 8002eca:	f200 809f 	bhi.w	800300c <HAL_TIM_PWM_ConfigChannel+0x170>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002f09 	.word	0x08002f09
 8002ed8:	0800300d 	.word	0x0800300d
 8002edc:	0800300d 	.word	0x0800300d
 8002ee0:	0800300d 	.word	0x0800300d
 8002ee4:	08002f49 	.word	0x08002f49
 8002ee8:	0800300d 	.word	0x0800300d
 8002eec:	0800300d 	.word	0x0800300d
 8002ef0:	0800300d 	.word	0x0800300d
 8002ef4:	08002f8b 	.word	0x08002f8b
 8002ef8:	0800300d 	.word	0x0800300d
 8002efc:	0800300d 	.word	0x0800300d
 8002f00:	0800300d 	.word	0x0800300d
 8002f04:	08002fcb 	.word	0x08002fcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f9c8 	bl	80032a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0208 	orr.w	r2, r2, #8
 8002f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0204 	bic.w	r2, r2, #4
 8002f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6999      	ldr	r1, [r3, #24]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	619a      	str	r2, [r3, #24]
      break;
 8002f46:	e062      	b.n	800300e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fa0e 	bl	8003370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6999      	ldr	r1, [r3, #24]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	021a      	lsls	r2, r3, #8
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	619a      	str	r2, [r3, #24]
      break;
 8002f88:	e041      	b.n	800300e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fa57 	bl	8003444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0208 	orr.w	r2, r2, #8
 8002fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0204 	bic.w	r2, r2, #4
 8002fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69d9      	ldr	r1, [r3, #28]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	61da      	str	r2, [r3, #28]
      break;
 8002fc8:	e021      	b.n	800300e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 faa1 	bl	8003518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69d9      	ldr	r1, [r3, #28]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	021a      	lsls	r2, r3, #8
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	61da      	str	r2, [r3, #28]
      break;
 800300a:	e000      	b.n	800300e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800300c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_TIM_ConfigClockSource+0x18>
 800303c:	2302      	movs	r3, #2
 800303e:	e0a6      	b.n	800318e <HAL_TIM_ConfigClockSource+0x166>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800305e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003066:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d067      	beq.n	8003148 <HAL_TIM_ConfigClockSource+0x120>
 8003078:	2b40      	cmp	r3, #64	; 0x40
 800307a:	d80b      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x6c>
 800307c:	2b10      	cmp	r3, #16
 800307e:	d073      	beq.n	8003168 <HAL_TIM_ConfigClockSource+0x140>
 8003080:	2b10      	cmp	r3, #16
 8003082:	d802      	bhi.n	800308a <HAL_TIM_ConfigClockSource+0x62>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d06f      	beq.n	8003168 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003088:	e078      	b.n	800317c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800308a:	2b20      	cmp	r3, #32
 800308c:	d06c      	beq.n	8003168 <HAL_TIM_ConfigClockSource+0x140>
 800308e:	2b30      	cmp	r3, #48	; 0x30
 8003090:	d06a      	beq.n	8003168 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003092:	e073      	b.n	800317c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003094:	2b70      	cmp	r3, #112	; 0x70
 8003096:	d00d      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0x8c>
 8003098:	2b70      	cmp	r3, #112	; 0x70
 800309a:	d804      	bhi.n	80030a6 <HAL_TIM_ConfigClockSource+0x7e>
 800309c:	2b50      	cmp	r3, #80	; 0x50
 800309e:	d033      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0xe0>
 80030a0:	2b60      	cmp	r3, #96	; 0x60
 80030a2:	d041      	beq.n	8003128 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80030a4:	e06a      	b.n	800317c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030aa:	d066      	beq.n	800317a <HAL_TIM_ConfigClockSource+0x152>
 80030ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b0:	d017      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030b2:	e063      	b.n	800317c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f000 faed 	bl	80036a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	609a      	str	r2, [r3, #8]
      break;
 80030e0:	e04c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f000 fad6 	bl	80036a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003104:	609a      	str	r2, [r3, #8]
      break;
 8003106:	e039      	b.n	800317c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	461a      	mov	r2, r3
 8003116:	f000 fa4d 	bl	80035b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2150      	movs	r1, #80	; 0x50
 8003120:	4618      	mov	r0, r3
 8003122:	f000 faa4 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8003126:	e029      	b.n	800317c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	461a      	mov	r2, r3
 8003136:	f000 fa6b 	bl	8003610 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2160      	movs	r1, #96	; 0x60
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fa94 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8003146:	e019      	b.n	800317c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	461a      	mov	r2, r3
 8003156:	f000 fa2d 	bl	80035b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2140      	movs	r1, #64	; 0x40
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fa84 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8003166:	e009      	b.n	800317c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4619      	mov	r1, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f000 fa7b 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8003178:	e000      	b.n	800317c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800317a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
	...

080031e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a29      	ldr	r2, [pc, #164]	; (8003298 <TIM_Base_SetConfig+0xb8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00b      	beq.n	8003210 <TIM_Base_SetConfig+0x30>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fe:	d007      	beq.n	8003210 <TIM_Base_SetConfig+0x30>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a26      	ldr	r2, [pc, #152]	; (800329c <TIM_Base_SetConfig+0xbc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_Base_SetConfig+0x30>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a25      	ldr	r2, [pc, #148]	; (80032a0 <TIM_Base_SetConfig+0xc0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d108      	bne.n	8003222 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <TIM_Base_SetConfig+0xb8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00b      	beq.n	8003242 <TIM_Base_SetConfig+0x62>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d007      	beq.n	8003242 <TIM_Base_SetConfig+0x62>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a19      	ldr	r2, [pc, #100]	; (800329c <TIM_Base_SetConfig+0xbc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <TIM_Base_SetConfig+0x62>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <TIM_Base_SetConfig+0xc0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d108      	bne.n	8003254 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <TIM_Base_SetConfig+0xb8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d103      	bne.n	8003288 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	615a      	str	r2, [r3, #20]
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	40012c00 	.word	0x40012c00
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800

080032a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f023 0201 	bic.w	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f023 0302 	bic.w	r3, r3, #2
 80032ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a1c      	ldr	r2, [pc, #112]	; (800336c <TIM_OC1_SetConfig+0xc8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d10c      	bne.n	800331a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0308 	bic.w	r3, r3, #8
 8003306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f023 0304 	bic.w	r3, r3, #4
 8003318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a13      	ldr	r2, [pc, #76]	; (800336c <TIM_OC1_SetConfig+0xc8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d111      	bne.n	8003346 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40012c00 	.word	0x40012c00

08003370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f023 0210 	bic.w	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0320 	bic.w	r3, r3, #32
 80033ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <TIM_OC2_SetConfig+0xd0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10d      	bne.n	80033ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a14      	ldr	r2, [pc, #80]	; (8003440 <TIM_OC2_SetConfig+0xd0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d113      	bne.n	800341c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	621a      	str	r2, [r3, #32]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	40012c00 	.word	0x40012c00

08003444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800348c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <TIM_OC3_SetConfig+0xd0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d10d      	bne.n	80034be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a14      	ldr	r2, [pc, #80]	; (8003514 <TIM_OC3_SetConfig+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d113      	bne.n	80034ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	621a      	str	r2, [r3, #32]
}
 8003508:	bf00      	nop
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40012c00 	.word	0x40012c00

08003518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	031b      	lsls	r3, r3, #12
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a0f      	ldr	r2, [pc, #60]	; (80035b0 <TIM_OC4_SetConfig+0x98>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d109      	bne.n	800358c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800357e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	019b      	lsls	r3, r3, #6
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	40012c00 	.word	0x40012c00

080035b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 030a 	bic.w	r3, r3, #10
 80035f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f023 0210 	bic.w	r2, r3, #16
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800363a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	031b      	lsls	r3, r3, #12
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800364c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	f043 0307 	orr.w	r3, r3, #7
 8003690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	609a      	str	r2, [r3, #8]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b087      	sub	sp, #28
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	021a      	lsls	r2, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	609a      	str	r2, [r3, #8]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2201      	movs	r2, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1a      	ldr	r2, [r3, #32]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	43db      	mvns	r3, r3
 8003702:	401a      	ands	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a1a      	ldr	r2, [r3, #32]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800373c:	2302      	movs	r3, #2
 800373e:	e032      	b.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003778:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	4313      	orrs	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e03f      	b.n	8003866 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd f822 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2224      	movs	r2, #36	; 0x24
 8003804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f829 	bl	8003870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800384c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038aa:	f023 030c 	bic.w	r3, r3, #12
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	68f9      	ldr	r1, [r7, #12]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a52      	ldr	r2, [pc, #328]	; (8003a1c <UART_SetConfig+0x1ac>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d14e      	bne.n	8003976 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038d8:	f7ff f89e 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 80038dc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	009a      	lsls	r2, r3, #2
 80038e8:	441a      	add	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	4a4a      	ldr	r2, [pc, #296]	; (8003a20 <UART_SetConfig+0x1b0>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	0119      	lsls	r1, r3, #4
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009a      	lsls	r2, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	fbb2 f2f3 	udiv	r2, r2, r3
 8003914:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <UART_SetConfig+0x1b0>)
 8003916:	fba3 0302 	umull	r0, r3, r3, r2
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2064      	movs	r0, #100	; 0x64
 800391e:	fb00 f303 	mul.w	r3, r0, r3
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	3332      	adds	r3, #50	; 0x32
 8003928:	4a3d      	ldr	r2, [pc, #244]	; (8003a20 <UART_SetConfig+0x1b0>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003934:	4419      	add	r1, r3
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009a      	lsls	r2, r3, #2
 8003940:	441a      	add	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	fbb2 f2f3 	udiv	r2, r2, r3
 800394c:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <UART_SetConfig+0x1b0>)
 800394e:	fba3 0302 	umull	r0, r3, r3, r2
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2064      	movs	r0, #100	; 0x64
 8003956:	fb00 f303 	mul.w	r3, r0, r3
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	3332      	adds	r3, #50	; 0x32
 8003960:	4a2f      	ldr	r2, [pc, #188]	; (8003a20 <UART_SetConfig+0x1b0>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	f003 020f 	and.w	r2, r3, #15
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	440a      	add	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003974:	e04d      	b.n	8003a12 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003976:	f7ff f83b 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 800397a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	009a      	lsls	r2, r3, #2
 8003986:	441a      	add	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	4a23      	ldr	r2, [pc, #140]	; (8003a20 <UART_SetConfig+0x1b0>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	0119      	lsls	r1, r3, #4
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	009a      	lsls	r2, r3, #2
 80039a6:	441a      	add	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <UART_SetConfig+0x1b0>)
 80039b4:	fba3 0302 	umull	r0, r3, r3, r2
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	2064      	movs	r0, #100	; 0x64
 80039bc:	fb00 f303 	mul.w	r3, r0, r3
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	3332      	adds	r3, #50	; 0x32
 80039c6:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <UART_SetConfig+0x1b0>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d2:	4419      	add	r1, r3
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	009a      	lsls	r2, r3, #2
 80039de:	441a      	add	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ea:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <UART_SetConfig+0x1b0>)
 80039ec:	fba3 0302 	umull	r0, r3, r3, r2
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	2064      	movs	r0, #100	; 0x64
 80039f4:	fb00 f303 	mul.w	r3, r0, r3
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	3332      	adds	r3, #50	; 0x32
 80039fe:	4a08      	ldr	r2, [pc, #32]	; (8003a20 <UART_SetConfig+0x1b0>)
 8003a00:	fba2 2303 	umull	r2, r3, r2, r3
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	f003 020f 	and.w	r2, r3, #15
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	440a      	add	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40013800 	.word	0x40013800
 8003a20:	51eb851f 	.word	0x51eb851f

08003a24 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a2a:	f3ef 8305 	mrs	r3, IPSR
 8003a2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a36:	f3ef 8310 	mrs	r3, PRIMASK
 8003a3a:	607b      	str	r3, [r7, #4]
  return(result);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <osKernelInitialize+0x32>
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <osKernelInitialize+0x60>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d109      	bne.n	8003a5e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a4a:	f3ef 8311 	mrs	r3, BASEPRI
 8003a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003a56:	f06f 0305 	mvn.w	r3, #5
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e00c      	b.n	8003a78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <osKernelInitialize+0x60>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d105      	bne.n	8003a72 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003a66:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <osKernelInitialize+0x60>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e002      	b.n	8003a78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
 8003a76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a78:	68fb      	ldr	r3, [r7, #12]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	2000002c 	.word	0x2000002c

08003a88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a8e:	f3ef 8305 	mrs	r3, IPSR
 8003a92:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9e:	607b      	str	r3, [r7, #4]
  return(result);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <osKernelStart+0x32>
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <osKernelStart+0x64>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d109      	bne.n	8003ac2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003aae:	f3ef 8311 	mrs	r3, BASEPRI
 8003ab2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003aba:	f06f 0305 	mvn.w	r3, #5
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e00e      	b.n	8003ae0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <osKernelStart+0x64>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d107      	bne.n	8003ada <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <osKernelStart+0x64>)
 8003acc:	2202      	movs	r2, #2
 8003ace:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003ad0:	f001 f864 	bl	8004b9c <vTaskStartScheduler>
      stat = osOK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e002      	b.n	8003ae0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295
 8003ade:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	2000002c 	.word	0x2000002c

08003af0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b092      	sub	sp, #72	; 0x48
 8003af4:	af04      	add	r7, sp, #16
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b00:	f3ef 8305 	mrs	r3, IPSR
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f040 8094 	bne.w	8003c36 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b12:	623b      	str	r3, [r7, #32]
  return(result);
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 808d 	bne.w	8003c36 <osThreadNew+0x146>
 8003b1c:	4b48      	ldr	r3, [pc, #288]	; (8003c40 <osThreadNew+0x150>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d106      	bne.n	8003b32 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b24:	f3ef 8311 	mrs	r3, BASEPRI
 8003b28:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 8082 	bne.w	8003c36 <osThreadNew+0x146>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d07e      	beq.n	8003c36 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003b3c:	2318      	movs	r3, #24
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003b40:	2300      	movs	r3, #0
 8003b42:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003b44:	f107 031b 	add.w	r3, r7, #27
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d045      	beq.n	8003be2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <osThreadNew+0x74>
        name = attr->name;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <osThreadNew+0x9a>
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7a:	2b38      	cmp	r3, #56	; 0x38
 8003b7c:	d805      	bhi.n	8003b8a <osThreadNew+0x9a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <osThreadNew+0x9e>
        return (NULL);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e054      	b.n	8003c38 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	089b      	lsrs	r3, r3, #2
 8003b9c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00e      	beq.n	8003bc4 <osThreadNew+0xd4>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b5b      	cmp	r3, #91	; 0x5b
 8003bac:	d90a      	bls.n	8003bc4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d006      	beq.n	8003bc4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <osThreadNew+0xd4>
        mem = 1;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc2:	e010      	b.n	8003be6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10c      	bne.n	8003be6 <osThreadNew+0xf6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d108      	bne.n	8003be6 <osThreadNew+0xf6>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d104      	bne.n	8003be6 <osThreadNew+0xf6>
          mem = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be0:	e001      	b.n	8003be6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d110      	bne.n	8003c0e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bf4:	9202      	str	r2, [sp, #8]
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fe02 	bl	800480c <xTaskCreateStatic>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e013      	b.n	8003c36 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d110      	bne.n	8003c36 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fe49 	bl	80048be <xTaskCreate>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d001      	beq.n	8003c36 <osThreadNew+0x146>
          hTask = NULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c36:	697b      	ldr	r3, [r7, #20]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3738      	adds	r7, #56	; 0x38
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	2000002c 	.word	0x2000002c

08003c44 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c4c:	f3ef 8305 	mrs	r3, IPSR
 8003c50:	613b      	str	r3, [r7, #16]
  return(result);
 8003c52:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10f      	bne.n	8003c78 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c58:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <osDelay+0x34>
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <osDelay+0x58>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d109      	bne.n	8003c80 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c70:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <osDelay+0x3c>
    stat = osErrorISR;
 8003c78:	f06f 0305 	mvn.w	r3, #5
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	e007      	b.n	8003c90 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 ff52 	bl	8004b34 <vTaskDelay>
    }
  }

  return (stat);
 8003c90:	697b      	ldr	r3, [r7, #20]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	2000002c 	.word	0x2000002c

08003ca0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a06      	ldr	r2, [pc, #24]	; (8003cc8 <vApplicationGetIdleTaskMemory+0x28>)
 8003cb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <vApplicationGetIdleTaskMemory+0x2c>)
 8003cb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2280      	movs	r2, #128	; 0x80
 8003cbc:	601a      	str	r2, [r3, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	20000030 	.word	0x20000030
 8003ccc:	2000008c 	.word	0x2000008c

08003cd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <vApplicationGetTimerTaskMemory+0x2c>)
 8003ce0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4a06      	ldr	r2, [pc, #24]	; (8003d00 <vApplicationGetTimerTaskMemory+0x30>)
 8003ce6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cee:	601a      	str	r2, [r3, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	2000028c 	.word	0x2000028c
 8003d00:	200002e8 	.word	0x200002e8

08003d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f103 0208 	add.w	r2, r3, #8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f103 0208 	add.w	r2, r3, #8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f103 0208 	add.w	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	601a      	str	r2, [r3, #0]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d103      	bne.n	8003dc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	e00c      	b.n	8003dda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e002      	b.n	8003dce <vListInsert+0x2e>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d2f6      	bcs.n	8003dc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	601a      	str	r2, [r3, #0]
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6892      	ldr	r2, [r2, #8]
 8003e26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6852      	ldr	r2, [r2, #4]
 8003e30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d103      	bne.n	8003e44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	1e5a      	subs	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr
	...

08003e64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	e7fe      	b.n	8003e8a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003e8c:	f001 ff94 	bl	8005db8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e98:	68f9      	ldr	r1, [r7, #12]
 8003e9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	441a      	add	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	441a      	add	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	22ff      	movs	r2, #255	; 0xff
 8003ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	22ff      	movs	r2, #255	; 0xff
 8003ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d114      	bne.n	8003f0c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01a      	beq.n	8003f20 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3310      	adds	r3, #16
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f001 f8d8 	bl	80050a4 <xTaskRemoveFromEventList>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d012      	beq.n	8003f20 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003efa:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <xQueueGenericReset+0xcc>)
 8003efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	e009      	b.n	8003f20 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3310      	adds	r3, #16
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fef7 	bl	8003d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3324      	adds	r3, #36	; 0x24
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fef2 	bl	8003d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f20:	f001 ff78 	bl	8005e14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f24:	2301      	movs	r3, #1
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	e000ed04 	.word	0xe000ed04

08003f34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08e      	sub	sp, #56	; 0x38
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <xQueueGenericCreateStatic+0x28>
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5a:	e7fe      	b.n	8003f5a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <xQueueGenericCreateStatic+0x42>
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
 8003f74:	e7fe      	b.n	8003f74 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <xQueueGenericCreateStatic+0x4e>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <xQueueGenericCreateStatic+0x52>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <xQueueGenericCreateStatic+0x54>
 8003f86:	2300      	movs	r3, #0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d109      	bne.n	8003fa0 <xQueueGenericCreateStatic+0x6c>
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	623b      	str	r3, [r7, #32]
 8003f9e:	e7fe      	b.n	8003f9e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d102      	bne.n	8003fac <xQueueGenericCreateStatic+0x78>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <xQueueGenericCreateStatic+0x7c>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <xQueueGenericCreateStatic+0x7e>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <xQueueGenericCreateStatic+0x96>
 8003fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	e7fe      	b.n	8003fc8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fca:	2350      	movs	r3, #80	; 0x50
 8003fcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b50      	cmp	r3, #80	; 0x50
 8003fd2:	d009      	beq.n	8003fe8 <xQueueGenericCreateStatic+0xb4>
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	e7fe      	b.n	8003fe6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00d      	beq.n	800400e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ffa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	4613      	mov	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f805 	bl	8004018 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004010:	4618      	mov	r0, r3
 8004012:	3730      	adds	r7, #48	; 0x30
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d103      	bne.n	8004034 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e002      	b.n	800403a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004046:	2101      	movs	r1, #1
 8004048:	69b8      	ldr	r0, [r7, #24]
 800404a:	f7ff ff0b 	bl	8003e64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08e      	sub	sp, #56	; 0x38
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800406e:	2300      	movs	r3, #0
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <xQueueGenericSend+0x30>
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28
 800408e:	e7fe      	b.n	800408e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <xQueueGenericSend+0x3e>
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <xQueueGenericSend+0x42>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <xQueueGenericSend+0x44>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <xQueueGenericSend+0x5c>
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ba:	e7fe      	b.n	80040ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d103      	bne.n	80040ca <xQueueGenericSend+0x6a>
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <xQueueGenericSend+0x6e>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <xQueueGenericSend+0x70>
 80040ce:	2300      	movs	r3, #0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <xQueueGenericSend+0x88>
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	623b      	str	r3, [r7, #32]
 80040e6:	e7fe      	b.n	80040e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040e8:	f001 f996 	bl	8005418 <xTaskGetSchedulerState>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <xQueueGenericSend+0x98>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <xQueueGenericSend+0x9c>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <xQueueGenericSend+0x9e>
 80040fc:	2300      	movs	r3, #0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <xQueueGenericSend+0xb6>
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	e7fe      	b.n	8004114 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004116:	f001 fe4f 	bl	8005db8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <xQueueGenericSend+0xcc>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d129      	bne.n	8004180 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004132:	f000 f9ff 	bl	8004534 <prvCopyDataToQueue>
 8004136:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	d010      	beq.n	8004162 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	3324      	adds	r3, #36	; 0x24
 8004144:	4618      	mov	r0, r3
 8004146:	f000 ffad 	bl	80050a4 <xTaskRemoveFromEventList>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004150:	4b3f      	ldr	r3, [pc, #252]	; (8004250 <xQueueGenericSend+0x1f0>)
 8004152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	e00a      	b.n	8004178 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004168:	4b39      	ldr	r3, [pc, #228]	; (8004250 <xQueueGenericSend+0x1f0>)
 800416a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004178:	f001 fe4c 	bl	8005e14 <vPortExitCritical>
				return pdPASS;
 800417c:	2301      	movs	r3, #1
 800417e:	e063      	b.n	8004248 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d103      	bne.n	800418e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004186:	f001 fe45 	bl	8005e14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800418a:	2300      	movs	r3, #0
 800418c:	e05c      	b.n	8004248 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800418e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004190:	2b00      	cmp	r3, #0
 8004192:	d106      	bne.n	80041a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	4618      	mov	r0, r3
 800419a:	f000 ffe5 	bl	8005168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800419e:	2301      	movs	r3, #1
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041a2:	f001 fe37 	bl	8005e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041a6:	f000 fd5d 	bl	8004c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041aa:	f001 fe05 	bl	8005db8 <vPortEnterCritical>
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041b4:	b25b      	sxtb	r3, r3
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d103      	bne.n	80041c4 <xQueueGenericSend+0x164>
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ca:	b25b      	sxtb	r3, r3
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d103      	bne.n	80041da <xQueueGenericSend+0x17a>
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041da:	f001 fe1b 	bl	8005e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041de:	1d3a      	adds	r2, r7, #4
 80041e0:	f107 0314 	add.w	r3, r7, #20
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 ffd4 	bl	8005194 <xTaskCheckForTimeOut>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d124      	bne.n	800423c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041f4:	f000 fa96 	bl	8004724 <prvIsQueueFull>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d018      	beq.n	8004230 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	3310      	adds	r3, #16
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	4611      	mov	r1, r2
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fefe 	bl	8005008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800420c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420e:	f000 fa21 	bl	8004654 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004212:	f000 fd35 	bl	8004c80 <xTaskResumeAll>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	f47f af7c 	bne.w	8004116 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <xQueueGenericSend+0x1f0>)
 8004220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	e772      	b.n	8004116 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004232:	f000 fa0f 	bl	8004654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004236:	f000 fd23 	bl	8004c80 <xTaskResumeAll>
 800423a:	e76c      	b.n	8004116 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800423c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800423e:	f000 fa09 	bl	8004654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004242:	f000 fd1d 	bl	8004c80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004246:	2300      	movs	r3, #0
		}
	}
}
 8004248:	4618      	mov	r0, r3
 800424a:	3738      	adds	r7, #56	; 0x38
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08e      	sub	sp, #56	; 0x38
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <xQueueGenericSendFromISR+0x2c>
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
 800427e:	e7fe      	b.n	800427e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d103      	bne.n	800428e <xQueueGenericSendFromISR+0x3a>
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <xQueueGenericSendFromISR+0x3e>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <xQueueGenericSendFromISR+0x40>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <xQueueGenericSendFromISR+0x58>
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	623b      	str	r3, [r7, #32]
 80042aa:	e7fe      	b.n	80042aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d103      	bne.n	80042ba <xQueueGenericSendFromISR+0x66>
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <xQueueGenericSendFromISR+0x6a>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <xQueueGenericSendFromISR+0x6c>
 80042be:	2300      	movs	r3, #0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <xQueueGenericSendFromISR+0x84>
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	e7fe      	b.n	80042d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042d8:	f001 fe28 	bl	8005f2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042dc:	f3ef 8211 	mrs	r2, BASEPRI
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	61ba      	str	r2, [r7, #24]
 80042f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <xQueueGenericSendFromISR+0xb6>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d12c      	bne.n	8004364 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800431a:	f000 f90b 	bl	8004534 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800431e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d112      	bne.n	800434e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	2b00      	cmp	r3, #0
 800432e:	d016      	beq.n	800435e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	3324      	adds	r3, #36	; 0x24
 8004334:	4618      	mov	r0, r3
 8004336:	f000 feb5 	bl	80050a4 <xTaskRemoveFromEventList>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00e      	beq.n	800435e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e007      	b.n	800435e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800434e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004352:	3301      	adds	r3, #1
 8004354:	b2db      	uxtb	r3, r3
 8004356:	b25a      	sxtb	r2, r3
 8004358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800435e:	2301      	movs	r3, #1
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004362:	e001      	b.n	8004368 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004364:	2300      	movs	r3, #0
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004374:	4618      	mov	r0, r3
 8004376:	3738      	adds	r7, #56	; 0x38
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08c      	sub	sp, #48	; 0x30
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004388:	2300      	movs	r3, #0
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <xQueueReceive+0x2e>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	623b      	str	r3, [r7, #32]
 80043a8:	e7fe      	b.n	80043a8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d103      	bne.n	80043b8 <xQueueReceive+0x3c>
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <xQueueReceive+0x40>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <xQueueReceive+0x42>
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <xQueueReceive+0x5a>
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	e7fe      	b.n	80043d4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043d6:	f001 f81f 	bl	8005418 <xTaskGetSchedulerState>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <xQueueReceive+0x6a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <xQueueReceive+0x6e>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <xQueueReceive+0x70>
 80043ea:	2300      	movs	r3, #0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <xQueueReceive+0x88>
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	e7fe      	b.n	8004402 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004404:	f001 fcd8 	bl	8005db8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01f      	beq.n	8004454 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004418:	f000 f8f6 	bl	8004608 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	1e5a      	subs	r2, r3, #1
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00f      	beq.n	800444c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	3310      	adds	r3, #16
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fe37 	bl	80050a4 <xTaskRemoveFromEventList>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800443c:	4b3c      	ldr	r3, [pc, #240]	; (8004530 <xQueueReceive+0x1b4>)
 800443e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800444c:	f001 fce2 	bl	8005e14 <vPortExitCritical>
				return pdPASS;
 8004450:	2301      	movs	r3, #1
 8004452:	e069      	b.n	8004528 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800445a:	f001 fcdb 	bl	8005e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800445e:	2300      	movs	r3, #0
 8004460:	e062      	b.n	8004528 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004468:	f107 0310 	add.w	r3, r7, #16
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fe7b 	bl	8005168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004472:	2301      	movs	r3, #1
 8004474:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004476:	f001 fccd 	bl	8005e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800447a:	f000 fbf3 	bl	8004c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800447e:	f001 fc9b 	bl	8005db8 <vPortEnterCritical>
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004488:	b25b      	sxtb	r3, r3
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d103      	bne.n	8004498 <xQueueReceive+0x11c>
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800449e:	b25b      	sxtb	r3, r3
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d103      	bne.n	80044ae <xQueueReceive+0x132>
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044ae:	f001 fcb1 	bl	8005e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044b2:	1d3a      	adds	r2, r7, #4
 80044b4:	f107 0310 	add.w	r3, r7, #16
 80044b8:	4611      	mov	r1, r2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fe6a 	bl	8005194 <xTaskCheckForTimeOut>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d123      	bne.n	800450e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044c8:	f000 f916 	bl	80046f8 <prvIsQueueEmpty>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d017      	beq.n	8004502 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	3324      	adds	r3, #36	; 0x24
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fd94 	bl	8005008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e2:	f000 f8b7 	bl	8004654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044e6:	f000 fbcb 	bl	8004c80 <xTaskResumeAll>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d189      	bne.n	8004404 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80044f0:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <xQueueReceive+0x1b4>)
 80044f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	e780      	b.n	8004404 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004504:	f000 f8a6 	bl	8004654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004508:	f000 fbba 	bl	8004c80 <xTaskResumeAll>
 800450c:	e77a      	b.n	8004404 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800450e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004510:	f000 f8a0 	bl	8004654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004514:	f000 fbb4 	bl	8004c80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800451a:	f000 f8ed 	bl	80046f8 <prvIsQueueEmpty>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	f43f af6f 	beq.w	8004404 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004526:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004528:	4618      	mov	r0, r3
 800452a:	3730      	adds	r7, #48	; 0x30
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10d      	bne.n	800456e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d14d      	bne.n	80045f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 ff78 	bl	8005454 <xTaskPriorityDisinherit>
 8004564:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	605a      	str	r2, [r3, #4]
 800456c:	e043      	b.n	80045f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d119      	bne.n	80045a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6898      	ldr	r0, [r3, #8]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	461a      	mov	r2, r3
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	f001 ff08 	bl	8006394 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	441a      	add	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	429a      	cmp	r2, r3
 800459c:	d32b      	bcc.n	80045f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	609a      	str	r2, [r3, #8]
 80045a6:	e026      	b.n	80045f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68d8      	ldr	r0, [r3, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	461a      	mov	r2, r3
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	f001 feee 	bl	8006394 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	425b      	negs	r3, r3
 80045c2:	441a      	add	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d207      	bcs.n	80045e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	425b      	negs	r3, r3
 80045de:	441a      	add	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d105      	bne.n	80045f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80045fe:	697b      	ldr	r3, [r7, #20]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d018      	beq.n	800464c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	441a      	add	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d303      	bcc.n	800463c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68d9      	ldr	r1, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	461a      	mov	r2, r3
 8004646:	6838      	ldr	r0, [r7, #0]
 8004648:	f001 fea4 	bl	8006394 <memcpy>
	}
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800465c:	f001 fbac 	bl	8005db8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004666:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004668:	e011      	b.n	800468e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	d012      	beq.n	8004698 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3324      	adds	r3, #36	; 0x24
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fd14 	bl	80050a4 <xTaskRemoveFromEventList>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004682:	f000 fde7 	bl	8005254 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	3b01      	subs	r3, #1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800468e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004692:	2b00      	cmp	r3, #0
 8004694:	dce9      	bgt.n	800466a <prvUnlockQueue+0x16>
 8004696:	e000      	b.n	800469a <prvUnlockQueue+0x46>
					break;
 8004698:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	22ff      	movs	r2, #255	; 0xff
 800469e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046a2:	f001 fbb7 	bl	8005e14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046a6:	f001 fb87 	bl	8005db8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046b2:	e011      	b.n	80046d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d012      	beq.n	80046e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3310      	adds	r3, #16
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fcef 	bl	80050a4 <xTaskRemoveFromEventList>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046cc:	f000 fdc2 	bl	8005254 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046d0:	7bbb      	ldrb	r3, [r7, #14]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	dce9      	bgt.n	80046b4 <prvUnlockQueue+0x60>
 80046e0:	e000      	b.n	80046e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	22ff      	movs	r2, #255	; 0xff
 80046e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80046ec:	f001 fb92 	bl	8005e14 <vPortExitCritical>
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004700:	f001 fb5a 	bl	8005db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800470c:	2301      	movs	r3, #1
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e001      	b.n	8004716 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004716:	f001 fb7d 	bl	8005e14 <vPortExitCritical>

	return xReturn;
 800471a:	68fb      	ldr	r3, [r7, #12]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800472c:	f001 fb44 	bl	8005db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004738:	429a      	cmp	r2, r3
 800473a:	d102      	bne.n	8004742 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800473c:	2301      	movs	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e001      	b.n	8004746 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004746:	f001 fb65 	bl	8005e14 <vPortExitCritical>

	return xReturn;
 800474a:	68fb      	ldr	r3, [r7, #12]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	e014      	b.n	800478e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004764:	4a0e      	ldr	r2, [pc, #56]	; (80047a0 <vQueueAddToRegistry+0x4c>)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004770:	490b      	ldr	r1, [pc, #44]	; (80047a0 <vQueueAddToRegistry+0x4c>)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800477a:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <vQueueAddToRegistry+0x4c>)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004786:	e005      	b.n	8004794 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3301      	adds	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b07      	cmp	r3, #7
 8004792:	d9e7      	bls.n	8004764 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004794:	bf00      	nop
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20001ab0 	.word	0x20001ab0

080047a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047b4:	f001 fb00 	bl	8005db8 <vPortEnterCritical>
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047be:	b25b      	sxtb	r3, r3
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d103      	bne.n	80047ce <vQueueWaitForMessageRestricted+0x2a>
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047d4:	b25b      	sxtb	r3, r3
 80047d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047da:	d103      	bne.n	80047e4 <vQueueWaitForMessageRestricted+0x40>
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e4:	f001 fb16 	bl	8005e14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	3324      	adds	r3, #36	; 0x24
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fc29 	bl	8005050 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80047fe:	6978      	ldr	r0, [r7, #20]
 8004800:	f7ff ff28 	bl	8004654 <prvUnlockQueue>
	}
 8004804:	bf00      	nop
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08e      	sub	sp, #56	; 0x38
 8004810:	af04      	add	r7, sp, #16
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800481a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <xTaskCreateStatic+0x28>
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	623b      	str	r3, [r7, #32]
 8004832:	e7fe      	b.n	8004832 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <xTaskCreateStatic+0x42>
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	e7fe      	b.n	800484c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800484e:	235c      	movs	r3, #92	; 0x5c
 8004850:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b5c      	cmp	r3, #92	; 0x5c
 8004856:	d009      	beq.n	800486c <xTaskCreateStatic+0x60>
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	e7fe      	b.n	800486a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800486c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486e:	2b00      	cmp	r3, #0
 8004870:	d01e      	beq.n	80048b0 <xTaskCreateStatic+0xa4>
 8004872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01b      	beq.n	80048b0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004880:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	2202      	movs	r2, #2
 8004886:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800488a:	2300      	movs	r3, #0
 800488c:	9303      	str	r3, [sp, #12]
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	9302      	str	r3, [sp, #8]
 8004892:	f107 0314 	add.w	r3, r7, #20
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f850 	bl	8004948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048aa:	f000 f8d3 	bl	8004a54 <prvAddNewTaskToReadyList>
 80048ae:	e001      	b.n	80048b4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048b4:	697b      	ldr	r3, [r7, #20]
	}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3728      	adds	r7, #40	; 0x28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b08c      	sub	sp, #48	; 0x30
 80048c2:	af04      	add	r7, sp, #16
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	4613      	mov	r3, r2
 80048cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fb66 	bl	8005fa4 <pvPortMalloc>
 80048d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00e      	beq.n	80048fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048e0:	205c      	movs	r0, #92	; 0x5c
 80048e2:	f001 fb5f 	bl	8005fa4 <pvPortMalloc>
 80048e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	631a      	str	r2, [r3, #48]	; 0x30
 80048f4:	e005      	b.n	8004902 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048f6:	6978      	ldr	r0, [r7, #20]
 80048f8:	f001 fc16 	bl	8006128 <vPortFree>
 80048fc:	e001      	b.n	8004902 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d017      	beq.n	8004938 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	2300      	movs	r3, #0
 8004914:	9303      	str	r3, [sp, #12]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	9302      	str	r3, [sp, #8]
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f80e 	bl	8004948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800492c:	69f8      	ldr	r0, [r7, #28]
 800492e:	f000 f891 	bl	8004a54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004932:	2301      	movs	r3, #1
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	e002      	b.n	800493e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004938:	f04f 33ff 	mov.w	r3, #4294967295
 800493c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800493e:	69bb      	ldr	r3, [r7, #24]
	}
 8004940:	4618      	mov	r0, r3
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	461a      	mov	r2, r3
 8004960:	21a5      	movs	r1, #165	; 0xa5
 8004962:	f001 fd22 	bl	80063aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004970:	3b01      	subs	r3, #1
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f023 0307 	bic.w	r3, r3, #7
 800497e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	2b00      	cmp	r3, #0
 8004988:	d009      	beq.n	800499e <prvInitialiseNewTask+0x56>
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	e7fe      	b.n	800499c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	e012      	b.n	80049ca <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	7819      	ldrb	r1, [r3, #0]
 80049ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	4413      	add	r3, r2
 80049b2:	3334      	adds	r3, #52	; 0x34
 80049b4:	460a      	mov	r2, r1
 80049b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d006      	beq.n	80049d2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	3301      	adds	r3, #1
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	2b0f      	cmp	r3, #15
 80049ce:	d9e9      	bls.n	80049a4 <prvInitialiseNewTask+0x5c>
 80049d0:	e000      	b.n	80049d4 <prvInitialiseNewTask+0x8c>
		{
			break;
 80049d2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	2b37      	cmp	r3, #55	; 0x37
 80049e0:	d901      	bls.n	80049e6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049e2:	2337      	movs	r3, #55	; 0x37
 80049e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	2200      	movs	r2, #0
 80049f6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	3304      	adds	r3, #4
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff f9a0 	bl	8003d42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	3318      	adds	r3, #24
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff f99b 	bl	8003d42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	2200      	movs	r2, #0
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	68f9      	ldr	r1, [r7, #12]
 8004a34:	69b8      	ldr	r0, [r7, #24]
 8004a36:	f001 f8d7 	bl	8005be8 <pxPortInitialiseStack>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a4c:	bf00      	nop
 8004a4e:	3720      	adds	r7, #32
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a5c:	f001 f9ac 	bl	8005db8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a60:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <prvAddNewTaskToReadyList+0xc4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3301      	adds	r3, #1
 8004a66:	4a2c      	ldr	r2, [pc, #176]	; (8004b18 <prvAddNewTaskToReadyList+0xc4>)
 8004a68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a6a:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <prvAddNewTaskToReadyList+0xc8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a72:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <prvAddNewTaskToReadyList+0xc8>)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a78:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <prvAddNewTaskToReadyList+0xc4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d110      	bne.n	8004aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a80:	f000 fc0c 	bl	800529c <prvInitialiseTaskLists>
 8004a84:	e00d      	b.n	8004aa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a86:	4b26      	ldr	r3, [pc, #152]	; (8004b20 <prvAddNewTaskToReadyList+0xcc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a8e:	4b23      	ldr	r3, [pc, #140]	; (8004b1c <prvAddNewTaskToReadyList+0xc8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d802      	bhi.n	8004aa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <prvAddNewTaskToReadyList+0xc8>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <prvAddNewTaskToReadyList+0xd0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	4a1e      	ldr	r2, [pc, #120]	; (8004b24 <prvAddNewTaskToReadyList+0xd0>)
 8004aaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004aac:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <prvAddNewTaskToReadyList+0xd0>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <prvAddNewTaskToReadyList+0xd4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d903      	bls.n	8004ac8 <prvAddNewTaskToReadyList+0x74>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <prvAddNewTaskToReadyList+0xd4>)
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4a15      	ldr	r2, [pc, #84]	; (8004b2c <prvAddNewTaskToReadyList+0xd8>)
 8004ad6:	441a      	add	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f7ff f93b 	bl	8003d5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ae4:	f001 f996 	bl	8005e14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <prvAddNewTaskToReadyList+0xcc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <prvAddNewTaskToReadyList+0xc8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d207      	bcs.n	8004b0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004afe:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <prvAddNewTaskToReadyList+0xdc>)
 8004b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000bbc 	.word	0x20000bbc
 8004b1c:	200006e8 	.word	0x200006e8
 8004b20:	20000bc8 	.word	0x20000bc8
 8004b24:	20000bd8 	.word	0x20000bd8
 8004b28:	20000bc4 	.word	0x20000bc4
 8004b2c:	200006ec 	.word	0x200006ec
 8004b30:	e000ed04 	.word	0xe000ed04

08004b34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d016      	beq.n	8004b74 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b46:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <vTaskDelay+0x60>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <vTaskDelay+0x2e>
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	e7fe      	b.n	8004b60 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004b62:	f000 f87f 	bl	8004c64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b66:	2100      	movs	r1, #0
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fcdf 	bl	800552c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b6e:	f000 f887 	bl	8004c80 <xTaskResumeAll>
 8004b72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d107      	bne.n	8004b8a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <vTaskDelay+0x64>)
 8004b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000be4 	.word	0x20000be4
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08a      	sub	sp, #40	; 0x28
 8004ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004baa:	463a      	mov	r2, r7
 8004bac:	1d39      	adds	r1, r7, #4
 8004bae:	f107 0308 	add.w	r3, r7, #8
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff f874 	bl	8003ca0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bb8:	6839      	ldr	r1, [r7, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	9202      	str	r2, [sp, #8]
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	460a      	mov	r2, r1
 8004bca:	4920      	ldr	r1, [pc, #128]	; (8004c4c <vTaskStartScheduler+0xb0>)
 8004bcc:	4820      	ldr	r0, [pc, #128]	; (8004c50 <vTaskStartScheduler+0xb4>)
 8004bce:	f7ff fe1d 	bl	800480c <xTaskCreateStatic>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	4b1f      	ldr	r3, [pc, #124]	; (8004c54 <vTaskStartScheduler+0xb8>)
 8004bd6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bd8:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <vTaskStartScheduler+0xb8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004be0:	2301      	movs	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e001      	b.n	8004bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d102      	bne.n	8004bf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004bf0:	f000 fcf0 	bl	80055d4 <xTimerCreateTimerTask>
 8004bf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d115      	bne.n	8004c28 <vTaskStartScheduler+0x8c>
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c0e:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <vTaskStartScheduler+0xbc>)
 8004c10:	f04f 32ff 	mov.w	r2, #4294967295
 8004c14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c16:	4b11      	ldr	r3, [pc, #68]	; (8004c5c <vTaskStartScheduler+0xc0>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c1c:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <vTaskStartScheduler+0xc4>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c22:	f001 f859 	bl	8005cd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c26:	e00d      	b.n	8004c44 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2e:	d109      	bne.n	8004c44 <vTaskStartScheduler+0xa8>
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	e7fe      	b.n	8004c42 <vTaskStartScheduler+0xa6>
}
 8004c44:	bf00      	nop
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	080063f8 	.word	0x080063f8
 8004c50:	0800526d 	.word	0x0800526d
 8004c54:	20000be0 	.word	0x20000be0
 8004c58:	20000bdc 	.word	0x20000bdc
 8004c5c:	20000bc8 	.word	0x20000bc8
 8004c60:	20000bc0 	.word	0x20000bc0

08004c64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c68:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <vTaskSuspendAll+0x18>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	4a03      	ldr	r2, [pc, #12]	; (8004c7c <vTaskSuspendAll+0x18>)
 8004c70:	6013      	str	r3, [r2, #0]
}
 8004c72:	bf00      	nop
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20000be4 	.word	0x20000be4

08004c80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c8e:	4b41      	ldr	r3, [pc, #260]	; (8004d94 <xTaskResumeAll+0x114>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <xTaskResumeAll+0x2a>
 8004c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	e7fe      	b.n	8004ca8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004caa:	f001 f885 	bl	8005db8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cae:	4b39      	ldr	r3, [pc, #228]	; (8004d94 <xTaskResumeAll+0x114>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	4a37      	ldr	r2, [pc, #220]	; (8004d94 <xTaskResumeAll+0x114>)
 8004cb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cb8:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <xTaskResumeAll+0x114>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d162      	bne.n	8004d86 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cc0:	4b35      	ldr	r3, [pc, #212]	; (8004d98 <xTaskResumeAll+0x118>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d05e      	beq.n	8004d86 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cc8:	e02f      	b.n	8004d2a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004cca:	4b34      	ldr	r3, [pc, #208]	; (8004d9c <xTaskResumeAll+0x11c>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3318      	adds	r3, #24
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff f89a 	bl	8003e10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff f895 	bl	8003e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cea:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <xTaskResumeAll+0x120>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d903      	bls.n	8004cfa <xTaskResumeAll+0x7a>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	4a2a      	ldr	r2, [pc, #168]	; (8004da0 <xTaskResumeAll+0x120>)
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <xTaskResumeAll+0x124>)
 8004d08:	441a      	add	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f7ff f822 	bl	8003d5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1a:	4b23      	ldr	r3, [pc, #140]	; (8004da8 <xTaskResumeAll+0x128>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d302      	bcc.n	8004d2a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d24:	4b21      	ldr	r3, [pc, #132]	; (8004dac <xTaskResumeAll+0x12c>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d2a:	4b1c      	ldr	r3, [pc, #112]	; (8004d9c <xTaskResumeAll+0x11c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1cb      	bne.n	8004cca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d38:	f000 fb4a 	bl	80053d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d3c:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <xTaskResumeAll+0x130>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d010      	beq.n	8004d6a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d48:	f000 f844 	bl	8004dd4 <xTaskIncrementTick>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d52:	4b16      	ldr	r3, [pc, #88]	; (8004dac <xTaskResumeAll+0x12c>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f1      	bne.n	8004d48 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004d64:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <xTaskResumeAll+0x130>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d6a:	4b10      	ldr	r3, [pc, #64]	; (8004dac <xTaskResumeAll+0x12c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d72:	2301      	movs	r3, #1
 8004d74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d76:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <xTaskResumeAll+0x134>)
 8004d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d86:	f001 f845 	bl	8005e14 <vPortExitCritical>

	return xAlreadyYielded;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000be4 	.word	0x20000be4
 8004d98:	20000bbc 	.word	0x20000bbc
 8004d9c:	20000b7c 	.word	0x20000b7c
 8004da0:	20000bc4 	.word	0x20000bc4
 8004da4:	200006ec 	.word	0x200006ec
 8004da8:	200006e8 	.word	0x200006e8
 8004dac:	20000bd0 	.word	0x20000bd0
 8004db0:	20000bcc 	.word	0x20000bcc
 8004db4:	e000ed04 	.word	0xe000ed04

08004db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dbe:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <xTaskGetTickCount+0x18>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dc4:	687b      	ldr	r3, [r7, #4]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr
 8004dd0:	20000bc0 	.word	0x20000bc0

08004dd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dde:	4b51      	ldr	r3, [pc, #324]	; (8004f24 <xTaskIncrementTick+0x150>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f040 808d 	bne.w	8004f02 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004de8:	4b4f      	ldr	r3, [pc, #316]	; (8004f28 <xTaskIncrementTick+0x154>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3301      	adds	r3, #1
 8004dee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004df0:	4a4d      	ldr	r2, [pc, #308]	; (8004f28 <xTaskIncrementTick+0x154>)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11f      	bne.n	8004e3c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004dfc:	4b4b      	ldr	r3, [pc, #300]	; (8004f2c <xTaskIncrementTick+0x158>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d009      	beq.n	8004e1a <xTaskIncrementTick+0x46>
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	e7fe      	b.n	8004e18 <xTaskIncrementTick+0x44>
 8004e1a:	4b44      	ldr	r3, [pc, #272]	; (8004f2c <xTaskIncrementTick+0x158>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	4b43      	ldr	r3, [pc, #268]	; (8004f30 <xTaskIncrementTick+0x15c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a41      	ldr	r2, [pc, #260]	; (8004f2c <xTaskIncrementTick+0x158>)
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	4a41      	ldr	r2, [pc, #260]	; (8004f30 <xTaskIncrementTick+0x15c>)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	4b41      	ldr	r3, [pc, #260]	; (8004f34 <xTaskIncrementTick+0x160>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3301      	adds	r3, #1
 8004e34:	4a3f      	ldr	r2, [pc, #252]	; (8004f34 <xTaskIncrementTick+0x160>)
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	f000 faca 	bl	80053d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e3c:	4b3e      	ldr	r3, [pc, #248]	; (8004f38 <xTaskIncrementTick+0x164>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d34e      	bcc.n	8004ee4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <xTaskIncrementTick+0x158>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <xTaskIncrementTick+0x80>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <xTaskIncrementTick+0x82>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d004      	beq.n	8004e64 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e5a:	4b37      	ldr	r3, [pc, #220]	; (8004f38 <xTaskIncrementTick+0x164>)
 8004e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e60:	601a      	str	r2, [r3, #0]
					break;
 8004e62:	e03f      	b.n	8004ee4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e64:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <xTaskIncrementTick+0x158>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d203      	bcs.n	8004e84 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e7c:	4a2e      	ldr	r2, [pc, #184]	; (8004f38 <xTaskIncrementTick+0x164>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6013      	str	r3, [r2, #0]
						break;
 8004e82:	e02f      	b.n	8004ee4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe ffc1 	bl	8003e10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d004      	beq.n	8004ea0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	3318      	adds	r3, #24
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe ffb8 	bl	8003e10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea4:	4b25      	ldr	r3, [pc, #148]	; (8004f3c <xTaskIncrementTick+0x168>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d903      	bls.n	8004eb4 <xTaskIncrementTick+0xe0>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	4a22      	ldr	r2, [pc, #136]	; (8004f3c <xTaskIncrementTick+0x168>)
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4a1f      	ldr	r2, [pc, #124]	; (8004f40 <xTaskIncrementTick+0x16c>)
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f7fe ff45 	bl	8003d5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <xTaskIncrementTick+0x170>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d3b3      	bcc.n	8004e46 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ee2:	e7b0      	b.n	8004e46 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ee4:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <xTaskIncrementTick+0x170>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eea:	4915      	ldr	r1, [pc, #84]	; (8004f40 <xTaskIncrementTick+0x16c>)
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d907      	bls.n	8004f0c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004efc:	2301      	movs	r3, #1
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	e004      	b.n	8004f0c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <xTaskIncrementTick+0x174>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3301      	adds	r3, #1
 8004f08:	4a0f      	ldr	r2, [pc, #60]	; (8004f48 <xTaskIncrementTick+0x174>)
 8004f0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <xTaskIncrementTick+0x178>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004f14:	2301      	movs	r3, #1
 8004f16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f18:	697b      	ldr	r3, [r7, #20]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000be4 	.word	0x20000be4
 8004f28:	20000bc0 	.word	0x20000bc0
 8004f2c:	20000b74 	.word	0x20000b74
 8004f30:	20000b78 	.word	0x20000b78
 8004f34:	20000bd4 	.word	0x20000bd4
 8004f38:	20000bdc 	.word	0x20000bdc
 8004f3c:	20000bc4 	.word	0x20000bc4
 8004f40:	200006ec 	.word	0x200006ec
 8004f44:	200006e8 	.word	0x200006e8
 8004f48:	20000bcc 	.word	0x20000bcc
 8004f4c:	20000bd0 	.word	0x20000bd0

08004f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f56:	4b27      	ldr	r3, [pc, #156]	; (8004ff4 <vTaskSwitchContext+0xa4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f5e:	4b26      	ldr	r3, [pc, #152]	; (8004ff8 <vTaskSwitchContext+0xa8>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f64:	e040      	b.n	8004fe8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004f66:	4b24      	ldr	r3, [pc, #144]	; (8004ff8 <vTaskSwitchContext+0xa8>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f6c:	4b23      	ldr	r3, [pc, #140]	; (8004ffc <vTaskSwitchContext+0xac>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e00f      	b.n	8004f94 <vTaskSwitchContext+0x44>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <vTaskSwitchContext+0x3e>
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	e7fe      	b.n	8004f8c <vTaskSwitchContext+0x3c>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	491a      	ldr	r1, [pc, #104]	; (8005000 <vTaskSwitchContext+0xb0>)
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0e5      	beq.n	8004f74 <vTaskSwitchContext+0x24>
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4a13      	ldr	r2, [pc, #76]	; (8005000 <vTaskSwitchContext+0xb0>)
 8004fb4:	4413      	add	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	605a      	str	r2, [r3, #4]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d104      	bne.n	8004fd8 <vTaskSwitchContext+0x88>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	4a09      	ldr	r2, [pc, #36]	; (8005004 <vTaskSwitchContext+0xb4>)
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	4a06      	ldr	r2, [pc, #24]	; (8004ffc <vTaskSwitchContext+0xac>)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6013      	str	r3, [r2, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bc80      	pop	{r7}
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000be4 	.word	0x20000be4
 8004ff8:	20000bd0 	.word	0x20000bd0
 8004ffc:	20000bc4 	.word	0x20000bc4
 8005000:	200006ec 	.word	0x200006ec
 8005004:	200006e8 	.word	0x200006e8

08005008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <vTaskPlaceOnEventList+0x24>
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e7fe      	b.n	800502a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <vTaskPlaceOnEventList+0x44>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3318      	adds	r3, #24
 8005032:	4619      	mov	r1, r3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fe feb3 	bl	8003da0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800503a:	2101      	movs	r1, #1
 800503c:	6838      	ldr	r0, [r7, #0]
 800503e:	f000 fa75 	bl	800552c <prvAddCurrentTaskToDelayedList>
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	200006e8 	.word	0x200006e8

08005050 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d109      	bne.n	8005076 <vTaskPlaceOnEventListRestricted+0x26>
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	e7fe      	b.n	8005074 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <vTaskPlaceOnEventListRestricted+0x50>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3318      	adds	r3, #24
 800507c:	4619      	mov	r1, r3
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7fe fe6b 	bl	8003d5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800508a:	f04f 33ff 	mov.w	r3, #4294967295
 800508e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	68b8      	ldr	r0, [r7, #8]
 8005094:	f000 fa4a 	bl	800552c <prvAddCurrentTaskToDelayedList>
	}
 8005098:	bf00      	nop
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	200006e8 	.word	0x200006e8

080050a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <xTaskRemoveFromEventList+0x2a>
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e7fe      	b.n	80050cc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	3318      	adds	r3, #24
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe fe9c 	bl	8003e10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050d8:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <xTaskRemoveFromEventList+0xac>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d11d      	bne.n	800511c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fe fe93 	bl	8003e10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ee:	4b19      	ldr	r3, [pc, #100]	; (8005154 <xTaskRemoveFromEventList+0xb0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d903      	bls.n	80050fe <xTaskRemoveFromEventList+0x5a>
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	4a16      	ldr	r2, [pc, #88]	; (8005154 <xTaskRemoveFromEventList+0xb0>)
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4a13      	ldr	r2, [pc, #76]	; (8005158 <xTaskRemoveFromEventList+0xb4>)
 800510c:	441a      	add	r2, r3
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	3304      	adds	r3, #4
 8005112:	4619      	mov	r1, r3
 8005114:	4610      	mov	r0, r2
 8005116:	f7fe fe20 	bl	8003d5a <vListInsertEnd>
 800511a:	e005      	b.n	8005128 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	3318      	adds	r3, #24
 8005120:	4619      	mov	r1, r3
 8005122:	480e      	ldr	r0, [pc, #56]	; (800515c <xTaskRemoveFromEventList+0xb8>)
 8005124:	f7fe fe19 	bl	8003d5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512c:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <xTaskRemoveFromEventList+0xbc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	429a      	cmp	r2, r3
 8005134:	d905      	bls.n	8005142 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005136:	2301      	movs	r3, #1
 8005138:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800513a:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <xTaskRemoveFromEventList+0xc0>)
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e001      	b.n	8005146 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005146:	697b      	ldr	r3, [r7, #20]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000be4 	.word	0x20000be4
 8005154:	20000bc4 	.word	0x20000bc4
 8005158:	200006ec 	.word	0x200006ec
 800515c:	20000b7c 	.word	0x20000b7c
 8005160:	200006e8 	.word	0x200006e8
 8005164:	20000bd0 	.word	0x20000bd0

08005168 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <vTaskInternalSetTimeOutState+0x24>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <vTaskInternalSetTimeOutState+0x28>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	605a      	str	r2, [r3, #4]
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	20000bd4 	.word	0x20000bd4
 8005190:	20000bc0 	.word	0x20000bc0

08005194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d109      	bne.n	80051b8 <xTaskCheckForTimeOut+0x24>
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	e7fe      	b.n	80051b6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <xTaskCheckForTimeOut+0x3e>
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e7fe      	b.n	80051d0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80051d2:	f000 fdf1 	bl	8005db8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051d6:	4b1d      	ldr	r3, [pc, #116]	; (800524c <xTaskCheckForTimeOut+0xb8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d102      	bne.n	80051f6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	e023      	b.n	800523e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4b15      	ldr	r3, [pc, #84]	; (8005250 <xTaskCheckForTimeOut+0xbc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d007      	beq.n	8005212 <xTaskCheckForTimeOut+0x7e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	429a      	cmp	r2, r3
 800520a:	d302      	bcc.n	8005212 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800520c:	2301      	movs	r3, #1
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	e015      	b.n	800523e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	429a      	cmp	r2, r3
 800521a:	d20b      	bcs.n	8005234 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	1ad2      	subs	r2, r2, r3
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff ff9d 	bl	8005168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	e004      	b.n	800523e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800523a:	2301      	movs	r3, #1
 800523c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800523e:	f000 fde9 	bl	8005e14 <vPortExitCritical>

	return xReturn;
 8005242:	69fb      	ldr	r3, [r7, #28]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3720      	adds	r7, #32
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000bc0 	.word	0x20000bc0
 8005250:	20000bd4 	.word	0x20000bd4

08005254 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005258:	4b03      	ldr	r3, [pc, #12]	; (8005268 <vTaskMissedYield+0x14>)
 800525a:	2201      	movs	r2, #1
 800525c:	601a      	str	r2, [r3, #0]
}
 800525e:	bf00      	nop
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000bd0 	.word	0x20000bd0

0800526c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005274:	f000 f852 	bl	800531c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <prvIdleTask+0x28>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d9f9      	bls.n	8005274 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <prvIdleTask+0x2c>)
 8005282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005290:	e7f0      	b.n	8005274 <prvIdleTask+0x8>
 8005292:	bf00      	nop
 8005294:	200006ec 	.word	0x200006ec
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052a2:	2300      	movs	r3, #0
 80052a4:	607b      	str	r3, [r7, #4]
 80052a6:	e00c      	b.n	80052c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4a12      	ldr	r2, [pc, #72]	; (80052fc <prvInitialiseTaskLists+0x60>)
 80052b4:	4413      	add	r3, r2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fe fd24 	bl	8003d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3301      	adds	r3, #1
 80052c0:	607b      	str	r3, [r7, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b37      	cmp	r3, #55	; 0x37
 80052c6:	d9ef      	bls.n	80052a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052c8:	480d      	ldr	r0, [pc, #52]	; (8005300 <prvInitialiseTaskLists+0x64>)
 80052ca:	f7fe fd1b 	bl	8003d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052ce:	480d      	ldr	r0, [pc, #52]	; (8005304 <prvInitialiseTaskLists+0x68>)
 80052d0:	f7fe fd18 	bl	8003d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052d4:	480c      	ldr	r0, [pc, #48]	; (8005308 <prvInitialiseTaskLists+0x6c>)
 80052d6:	f7fe fd15 	bl	8003d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052da:	480c      	ldr	r0, [pc, #48]	; (800530c <prvInitialiseTaskLists+0x70>)
 80052dc:	f7fe fd12 	bl	8003d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052e0:	480b      	ldr	r0, [pc, #44]	; (8005310 <prvInitialiseTaskLists+0x74>)
 80052e2:	f7fe fd0f 	bl	8003d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052e6:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <prvInitialiseTaskLists+0x78>)
 80052e8:	4a05      	ldr	r2, [pc, #20]	; (8005300 <prvInitialiseTaskLists+0x64>)
 80052ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <prvInitialiseTaskLists+0x7c>)
 80052ee:	4a05      	ldr	r2, [pc, #20]	; (8005304 <prvInitialiseTaskLists+0x68>)
 80052f0:	601a      	str	r2, [r3, #0]
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	200006ec 	.word	0x200006ec
 8005300:	20000b4c 	.word	0x20000b4c
 8005304:	20000b60 	.word	0x20000b60
 8005308:	20000b7c 	.word	0x20000b7c
 800530c:	20000b90 	.word	0x20000b90
 8005310:	20000ba8 	.word	0x20000ba8
 8005314:	20000b74 	.word	0x20000b74
 8005318:	20000b78 	.word	0x20000b78

0800531c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005322:	e019      	b.n	8005358 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005324:	f000 fd48 	bl	8005db8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <prvCheckTasksWaitingTermination+0x4c>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3304      	adds	r3, #4
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fd6b 	bl	8003e10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800533a:	4b0c      	ldr	r3, [pc, #48]	; (800536c <prvCheckTasksWaitingTermination+0x50>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3b01      	subs	r3, #1
 8005340:	4a0a      	ldr	r2, [pc, #40]	; (800536c <prvCheckTasksWaitingTermination+0x50>)
 8005342:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <prvCheckTasksWaitingTermination+0x54>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3b01      	subs	r3, #1
 800534a:	4a09      	ldr	r2, [pc, #36]	; (8005370 <prvCheckTasksWaitingTermination+0x54>)
 800534c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800534e:	f000 fd61 	bl	8005e14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f80e 	bl	8005374 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <prvCheckTasksWaitingTermination+0x54>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e1      	bne.n	8005324 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20000b90 	.word	0x20000b90
 800536c:	20000bbc 	.word	0x20000bbc
 8005370:	20000ba4 	.word	0x20000ba4

08005374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005382:	2b00      	cmp	r3, #0
 8005384:	d108      	bne.n	8005398 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fecc 	bl	8006128 <vPortFree>
				vPortFree( pxTCB );
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fec9 	bl	8006128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005396:	e017      	b.n	80053c8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d103      	bne.n	80053aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fec0 	bl	8006128 <vPortFree>
	}
 80053a8:	e00e      	b.n	80053c8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d009      	beq.n	80053c8 <prvDeleteTCB+0x54>
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	e7fe      	b.n	80053c6 <prvDeleteTCB+0x52>
	}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d6:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <prvResetNextTaskUnblockTime+0x40>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <prvResetNextTaskUnblockTime+0x14>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e000      	b.n	80053e6 <prvResetNextTaskUnblockTime+0x16>
 80053e4:	2300      	movs	r3, #0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <prvResetNextTaskUnblockTime+0x44>)
 80053ec:	f04f 32ff 	mov.w	r2, #4294967295
 80053f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053f2:	e008      	b.n	8005406 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <prvResetNextTaskUnblockTime+0x40>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4a04      	ldr	r2, [pc, #16]	; (8005414 <prvResetNextTaskUnblockTime+0x44>)
 8005404:	6013      	str	r3, [r2, #0]
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr
 8005410:	20000b74 	.word	0x20000b74
 8005414:	20000bdc 	.word	0x20000bdc

08005418 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <xTaskGetSchedulerState+0x34>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005426:	2301      	movs	r3, #1
 8005428:	607b      	str	r3, [r7, #4]
 800542a:	e008      	b.n	800543e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800542c:	4b08      	ldr	r3, [pc, #32]	; (8005450 <xTaskGetSchedulerState+0x38>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d102      	bne.n	800543a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005434:	2302      	movs	r3, #2
 8005436:	607b      	str	r3, [r7, #4]
 8005438:	e001      	b.n	800543e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800543a:	2300      	movs	r3, #0
 800543c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800543e:	687b      	ldr	r3, [r7, #4]
	}
 8005440:	4618      	mov	r0, r3
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20000bc8 	.word	0x20000bc8
 8005450:	20000be4 	.word	0x20000be4

08005454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d054      	beq.n	8005514 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800546a:	4b2d      	ldr	r3, [pc, #180]	; (8005520 <xTaskPriorityDisinherit+0xcc>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	429a      	cmp	r2, r3
 8005472:	d009      	beq.n	8005488 <xTaskPriorityDisinherit+0x34>
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	e7fe      	b.n	8005486 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548c:	2b00      	cmp	r3, #0
 800548e:	d109      	bne.n	80054a4 <xTaskPriorityDisinherit+0x50>
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	e7fe      	b.n	80054a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a8:	1e5a      	subs	r2, r3, #1
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d02c      	beq.n	8005514 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d128      	bne.n	8005514 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	3304      	adds	r3, #4
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fe fca2 	bl	8003e10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e4:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <xTaskPriorityDisinherit+0xd0>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d903      	bls.n	80054f4 <xTaskPriorityDisinherit+0xa0>
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <xTaskPriorityDisinherit+0xd0>)
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4a09      	ldr	r2, [pc, #36]	; (8005528 <xTaskPriorityDisinherit+0xd4>)
 8005502:	441a      	add	r2, r3
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	3304      	adds	r3, #4
 8005508:	4619      	mov	r1, r3
 800550a:	4610      	mov	r0, r2
 800550c:	f7fe fc25 	bl	8003d5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005510:	2301      	movs	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005514:	697b      	ldr	r3, [r7, #20]
	}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	200006e8 	.word	0x200006e8
 8005524:	20000bc4 	.word	0x20000bc4
 8005528:	200006ec 	.word	0x200006ec

0800552c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005536:	4b21      	ldr	r3, [pc, #132]	; (80055bc <prvAddCurrentTaskToDelayedList+0x90>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800553c:	4b20      	ldr	r3, [pc, #128]	; (80055c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3304      	adds	r3, #4
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe fc64 	bl	8003e10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554e:	d10a      	bne.n	8005566 <prvAddCurrentTaskToDelayedList+0x3a>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005556:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3304      	adds	r3, #4
 800555c:	4619      	mov	r1, r3
 800555e:	4819      	ldr	r0, [pc, #100]	; (80055c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005560:	f7fe fbfb 	bl	8003d5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005564:	e026      	b.n	80055b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4413      	add	r3, r2
 800556c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	429a      	cmp	r2, r3
 800557c:	d209      	bcs.n	8005592 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800557e:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3304      	adds	r3, #4
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f7fe fc08 	bl	8003da0 <vListInsert>
}
 8005590:	e010      	b.n	80055b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005592:	4b0e      	ldr	r3, [pc, #56]	; (80055cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3304      	adds	r3, #4
 800559c:	4619      	mov	r1, r3
 800559e:	4610      	mov	r0, r2
 80055a0:	f7fe fbfe 	bl	8003da0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055a4:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d202      	bcs.n	80055b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80055ae:	4a08      	ldr	r2, [pc, #32]	; (80055d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6013      	str	r3, [r2, #0]
}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20000bc0 	.word	0x20000bc0
 80055c0:	200006e8 	.word	0x200006e8
 80055c4:	20000ba8 	.word	0x20000ba8
 80055c8:	20000b78 	.word	0x20000b78
 80055cc:	20000b74 	.word	0x20000b74
 80055d0:	20000bdc 	.word	0x20000bdc

080055d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	; 0x28
 80055d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80055de:	f000 fac3 	bl	8005b68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80055e2:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <xTimerCreateTimerTask+0x80>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d021      	beq.n	800562e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80055f2:	1d3a      	adds	r2, r7, #4
 80055f4:	f107 0108 	add.w	r1, r7, #8
 80055f8:	f107 030c 	add.w	r3, r7, #12
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe fb67 	bl	8003cd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	9202      	str	r2, [sp, #8]
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	2302      	movs	r3, #2
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	2300      	movs	r3, #0
 8005612:	460a      	mov	r2, r1
 8005614:	4910      	ldr	r1, [pc, #64]	; (8005658 <xTimerCreateTimerTask+0x84>)
 8005616:	4811      	ldr	r0, [pc, #68]	; (800565c <xTimerCreateTimerTask+0x88>)
 8005618:	f7ff f8f8 	bl	800480c <xTaskCreateStatic>
 800561c:	4602      	mov	r2, r0
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <xTimerCreateTimerTask+0x8c>)
 8005620:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005622:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <xTimerCreateTimerTask+0x8c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800562a:	2301      	movs	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d109      	bne.n	8005648 <xTimerCreateTimerTask+0x74>
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e7fe      	b.n	8005646 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005648:	697b      	ldr	r3, [r7, #20]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000c18 	.word	0x20000c18
 8005658:	08006400 	.word	0x08006400
 800565c:	0800577d 	.word	0x0800577d
 8005660:	20000c1c 	.word	0x20000c1c

08005664 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08a      	sub	sp, #40	; 0x28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005672:	2300      	movs	r3, #0
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d109      	bne.n	8005690 <xTimerGenericCommand+0x2c>
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	623b      	str	r3, [r7, #32]
 800568e:	e7fe      	b.n	800568e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005690:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <xTimerGenericCommand+0x94>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d02a      	beq.n	80056ee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	dc18      	bgt.n	80056dc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80056aa:	f7ff feb5 	bl	8005418 <xTaskGetSchedulerState>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d109      	bne.n	80056c8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056b4:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <xTimerGenericCommand+0x94>)
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	f107 0110 	add.w	r1, r7, #16
 80056bc:	2300      	movs	r3, #0
 80056be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c0:	f7fe fcce 	bl	8004060 <xQueueGenericSend>
 80056c4:	6278      	str	r0, [r7, #36]	; 0x24
 80056c6:	e012      	b.n	80056ee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <xTimerGenericCommand+0x94>)
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	f107 0110 	add.w	r1, r7, #16
 80056d0:	2300      	movs	r3, #0
 80056d2:	2200      	movs	r2, #0
 80056d4:	f7fe fcc4 	bl	8004060 <xQueueGenericSend>
 80056d8:	6278      	str	r0, [r7, #36]	; 0x24
 80056da:	e008      	b.n	80056ee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <xTimerGenericCommand+0x94>)
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	f107 0110 	add.w	r1, r7, #16
 80056e4:	2300      	movs	r3, #0
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	f7fe fdb4 	bl	8004254 <xQueueGenericSendFromISR>
 80056ec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3728      	adds	r7, #40	; 0x28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20000c18 	.word	0x20000c18

080056fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af02      	add	r7, sp, #8
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005706:	4b1c      	ldr	r3, [pc, #112]	; (8005778 <prvProcessExpiredTimer+0x7c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	3304      	adds	r3, #4
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe fb7b 	bl	8003e10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d121      	bne.n	8005766 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	18d1      	adds	r1, r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	6978      	ldr	r0, [r7, #20]
 8005730:	f000 f8c8 	bl	80058c4 <prvInsertTimerInActiveList>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d015      	beq.n	8005766 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800573a:	2300      	movs	r3, #0
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	2300      	movs	r3, #0
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	2100      	movs	r1, #0
 8005744:	6978      	ldr	r0, [r7, #20]
 8005746:	f7ff ff8d 	bl	8005664 <xTimerGenericCommand>
 800574a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <prvProcessExpiredTimer+0x6a>
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e7fe      	b.n	8005764 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	6978      	ldr	r0, [r7, #20]
 800576c:	4798      	blx	r3
}
 800576e:	bf00      	nop
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000c10 	.word	0x20000c10

0800577c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005784:	f107 0308 	add.w	r3, r7, #8
 8005788:	4618      	mov	r0, r3
 800578a:	f000 f857 	bl	800583c <prvGetNextExpireTime>
 800578e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4619      	mov	r1, r3
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f803 	bl	80057a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800579a:	f000 f8d5 	bl	8005948 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800579e:	e7f1      	b.n	8005784 <prvTimerTask+0x8>

080057a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80057aa:	f7ff fa5b 	bl	8004c64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057ae:	f107 0308 	add.w	r3, r7, #8
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 f866 	bl	8005884 <prvSampleTimeNow>
 80057b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d130      	bne.n	8005822 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <prvProcessTimerOrBlockTask+0x3c>
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d806      	bhi.n	80057dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80057ce:	f7ff fa57 	bl	8004c80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff ff91 	bl	80056fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80057da:	e024      	b.n	8005826 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80057e2:	4b13      	ldr	r3, [pc, #76]	; (8005830 <prvProcessTimerOrBlockTask+0x90>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80057f4:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <prvProcessTimerOrBlockTask+0x94>)
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	4619      	mov	r1, r3
 8005802:	f7fe ffcf 	bl	80047a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005806:	f7ff fa3b 	bl	8004c80 <xTaskResumeAll>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005810:	4b09      	ldr	r3, [pc, #36]	; (8005838 <prvProcessTimerOrBlockTask+0x98>)
 8005812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
}
 8005820:	e001      	b.n	8005826 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005822:	f7ff fa2d 	bl	8004c80 <xTaskResumeAll>
}
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000c14 	.word	0x20000c14
 8005834:	20000c18 	.word	0x20000c18
 8005838:	e000ed04 	.word	0xe000ed04

0800583c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005844:	4b0e      	ldr	r3, [pc, #56]	; (8005880 <prvGetNextExpireTime+0x44>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	bf0c      	ite	eq
 800584e:	2301      	moveq	r3, #1
 8005850:	2300      	movne	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d105      	bne.n	800586e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005862:	4b07      	ldr	r3, [pc, #28]	; (8005880 <prvGetNextExpireTime+0x44>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	e001      	b.n	8005872 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005872:	68fb      	ldr	r3, [r7, #12]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	20000c10 	.word	0x20000c10

08005884 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800588c:	f7ff fa94 	bl	8004db8 <xTaskGetTickCount>
 8005890:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005892:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <prvSampleTimeNow+0x3c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	429a      	cmp	r2, r3
 800589a:	d205      	bcs.n	80058a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800589c:	f000 f904 	bl	8005aa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e002      	b.n	80058ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80058ae:	4a04      	ldr	r2, [pc, #16]	; (80058c0 <prvSampleTimeNow+0x3c>)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80058b4:	68fb      	ldr	r3, [r7, #12]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000c20 	.word	0x20000c20

080058c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d812      	bhi.n	8005910 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d302      	bcc.n	80058fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80058f8:	2301      	movs	r3, #1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e01b      	b.n	8005936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80058fe:	4b10      	ldr	r3, [pc, #64]	; (8005940 <prvInsertTimerInActiveList+0x7c>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3304      	adds	r3, #4
 8005906:	4619      	mov	r1, r3
 8005908:	4610      	mov	r0, r2
 800590a:	f7fe fa49 	bl	8003da0 <vListInsert>
 800590e:	e012      	b.n	8005936 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d206      	bcs.n	8005926 <prvInsertTimerInActiveList+0x62>
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d302      	bcc.n	8005926 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	e007      	b.n	8005936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005926:	4b07      	ldr	r3, [pc, #28]	; (8005944 <prvInsertTimerInActiveList+0x80>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3304      	adds	r3, #4
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f7fe fa35 	bl	8003da0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005936:	697b      	ldr	r3, [r7, #20]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	20000c14 	.word	0x20000c14
 8005944:	20000c10 	.word	0x20000c10

08005948 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08e      	sub	sp, #56	; 0x38
 800594c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800594e:	e099      	b.n	8005a84 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	da17      	bge.n	8005986 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005956:	1d3b      	adds	r3, r7, #4
 8005958:	3304      	adds	r3, #4
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <prvProcessReceivedCommands+0x2e>
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	e7fe      	b.n	8005974 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800597c:	6850      	ldr	r0, [r2, #4]
 800597e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005980:	6892      	ldr	r2, [r2, #8]
 8005982:	4611      	mov	r1, r2
 8005984:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	db7a      	blt.n	8005a82 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	3304      	adds	r3, #4
 800599c:	4618      	mov	r0, r3
 800599e:	f7fe fa37 	bl	8003e10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059a2:	463b      	mov	r3, r7
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff ff6d 	bl	8005884 <prvSampleTimeNow>
 80059aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b09      	cmp	r3, #9
 80059b0:	d868      	bhi.n	8005a84 <prvProcessReceivedCommands+0x13c>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <prvProcessReceivedCommands+0x70>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059e1 	.word	0x080059e1
 80059c0:	080059e1 	.word	0x080059e1
 80059c4:	08005a85 	.word	0x08005a85
 80059c8:	08005a3b 	.word	0x08005a3b
 80059cc:	08005a71 	.word	0x08005a71
 80059d0:	080059e1 	.word	0x080059e1
 80059d4:	080059e1 	.word	0x080059e1
 80059d8:	08005a85 	.word	0x08005a85
 80059dc:	08005a3b 	.word	0x08005a3b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	18d1      	adds	r1, r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ee:	f7ff ff69 	bl	80058c4 <prvInsertTimerInActiveList>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d045      	beq.n	8005a84 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059fe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d13d      	bne.n	8005a84 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	441a      	add	r2, r3
 8005a10:	2300      	movs	r3, #0
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	2300      	movs	r3, #0
 8005a16:	2100      	movs	r1, #0
 8005a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a1a:	f7ff fe23 	bl	8005664 <xTimerGenericCommand>
 8005a1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d12e      	bne.n	8005a84 <prvProcessReceivedCommands+0x13c>
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	61bb      	str	r3, [r7, #24]
 8005a38:	e7fe      	b.n	8005a38 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <prvProcessReceivedCommands+0x114>
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	e7fe      	b.n	8005a5a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	699a      	ldr	r2, [r3, #24]
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	18d1      	adds	r1, r2, r3
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a6a:	f7ff ff2b 	bl	80058c4 <prvInsertTimerInActiveList>
					break;
 8005a6e:	e009      	b.n	8005a84 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d104      	bne.n	8005a84 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a7c:	f000 fb54 	bl	8006128 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a80:	e000      	b.n	8005a84 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005a82:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a84:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <prvProcessReceivedCommands+0x15c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	1d39      	adds	r1, r7, #4
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fe fc75 	bl	800437c <xQueueReceive>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f47f af5b 	bne.w	8005950 <prvProcessReceivedCommands+0x8>
	}
}
 8005a9a:	bf00      	nop
 8005a9c:	3730      	adds	r7, #48	; 0x30
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000c18 	.word	0x20000c18

08005aa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005aae:	e044      	b.n	8005b3a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ab0:	4b2b      	ldr	r3, [pc, #172]	; (8005b60 <prvSwitchTimerLists+0xb8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005aba:	4b29      	ldr	r3, [pc, #164]	; (8005b60 <prvSwitchTimerLists+0xb8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fe f9a1 	bl	8003e10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d12d      	bne.n	8005b3a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d90e      	bls.n	8005b0e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005afc:	4b18      	ldr	r3, [pc, #96]	; (8005b60 <prvSwitchTimerLists+0xb8>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f7fe f94a 	bl	8003da0 <vListInsert>
 8005b0c:	e015      	b.n	8005b3a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b0e:	2300      	movs	r3, #0
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	2300      	movs	r3, #0
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	2100      	movs	r1, #0
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7ff fda3 	bl	8005664 <xTimerGenericCommand>
 8005b1e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <prvSwitchTimerLists+0x92>
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	e7fe      	b.n	8005b38 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b3a:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <prvSwitchTimerLists+0xb8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1b5      	bne.n	8005ab0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b44:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <prvSwitchTimerLists+0xb8>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b4a:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <prvSwitchTimerLists+0xbc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a04      	ldr	r2, [pc, #16]	; (8005b60 <prvSwitchTimerLists+0xb8>)
 8005b50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b52:	4a04      	ldr	r2, [pc, #16]	; (8005b64 <prvSwitchTimerLists+0xbc>)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	6013      	str	r3, [r2, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20000c10 	.word	0x20000c10
 8005b64:	20000c14 	.word	0x20000c14

08005b68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b6e:	f000 f923 	bl	8005db8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <prvCheckForValidListAndQueue+0x60>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d120      	bne.n	8005bbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b7a:	4814      	ldr	r0, [pc, #80]	; (8005bcc <prvCheckForValidListAndQueue+0x64>)
 8005b7c:	f7fe f8c2 	bl	8003d04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b80:	4813      	ldr	r0, [pc, #76]	; (8005bd0 <prvCheckForValidListAndQueue+0x68>)
 8005b82:	f7fe f8bf 	bl	8003d04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b86:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <prvCheckForValidListAndQueue+0x6c>)
 8005b88:	4a10      	ldr	r2, [pc, #64]	; (8005bcc <prvCheckForValidListAndQueue+0x64>)
 8005b8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b8c:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <prvCheckForValidListAndQueue+0x70>)
 8005b8e:	4a10      	ldr	r2, [pc, #64]	; (8005bd0 <prvCheckForValidListAndQueue+0x68>)
 8005b90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b92:	2300      	movs	r3, #0
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <prvCheckForValidListAndQueue+0x74>)
 8005b98:	4a11      	ldr	r2, [pc, #68]	; (8005be0 <prvCheckForValidListAndQueue+0x78>)
 8005b9a:	2110      	movs	r1, #16
 8005b9c:	200a      	movs	r0, #10
 8005b9e:	f7fe f9c9 	bl	8003f34 <xQueueGenericCreateStatic>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <prvCheckForValidListAndQueue+0x60>)
 8005ba6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ba8:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <prvCheckForValidListAndQueue+0x60>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <prvCheckForValidListAndQueue+0x60>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	490b      	ldr	r1, [pc, #44]	; (8005be4 <prvCheckForValidListAndQueue+0x7c>)
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fe fdcc 	bl	8004754 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bbc:	f000 f92a 	bl	8005e14 <vPortExitCritical>
}
 8005bc0:	bf00      	nop
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000c18 	.word	0x20000c18
 8005bcc:	20000be8 	.word	0x20000be8
 8005bd0:	20000bfc 	.word	0x20000bfc
 8005bd4:	20000c10 	.word	0x20000c10
 8005bd8:	20000c14 	.word	0x20000c14
 8005bdc:	20000cc4 	.word	0x20000cc4
 8005be0:	20000c24 	.word	0x20000c24
 8005be4:	08006408 	.word	0x08006408

08005be8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3b04      	subs	r3, #4
 8005bf8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3b04      	subs	r3, #4
 8005c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f023 0201 	bic.w	r2, r3, #1
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3b04      	subs	r3, #4
 8005c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c18:	4a08      	ldr	r2, [pc, #32]	; (8005c3c <pxPortInitialiseStack+0x54>)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3b14      	subs	r3, #20
 8005c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3b20      	subs	r3, #32
 8005c2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c30:	68fb      	ldr	r3, [r7, #12]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr
 8005c3c:	08005c41 	.word	0x08005c41

08005c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c4a:	4b10      	ldr	r3, [pc, #64]	; (8005c8c <prvTaskExitError+0x4c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d009      	beq.n	8005c68 <prvTaskExitError+0x28>
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e7fe      	b.n	8005c66 <prvTaskExitError+0x26>
 8005c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c7a:	bf00      	nop
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0fc      	beq.n	8005c7c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c82:	bf00      	nop
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr
 8005c8c:	2000000c 	.word	0x2000000c

08005c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <pxCurrentTCBConst2>)
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	6808      	ldr	r0, [r1, #0]
 8005c96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c9a:	f380 8809 	msr	PSP, r0
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f380 8811 	msr	BASEPRI, r0
 8005caa:	f04e 0e0d 	orr.w	lr, lr, #13
 8005cae:	4770      	bx	lr

08005cb0 <pxCurrentTCBConst2>:
 8005cb0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop

08005cb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005cb8:	4806      	ldr	r0, [pc, #24]	; (8005cd4 <prvPortStartFirstTask+0x1c>)
 8005cba:	6800      	ldr	r0, [r0, #0]
 8005cbc:	6800      	ldr	r0, [r0, #0]
 8005cbe:	f380 8808 	msr	MSP, r0
 8005cc2:	b662      	cpsie	i
 8005cc4:	b661      	cpsie	f
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	df00      	svc	0
 8005cd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cd2:	bf00      	nop
 8005cd4:	e000ed08 	.word	0xe000ed08

08005cd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cde:	4b31      	ldr	r3, [pc, #196]	; (8005da4 <xPortStartScheduler+0xcc>)
 8005ce0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	22ff      	movs	r2, #255	; 0xff
 8005cee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	4b29      	ldr	r3, [pc, #164]	; (8005da8 <xPortStartScheduler+0xd0>)
 8005d04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d06:	4b29      	ldr	r3, [pc, #164]	; (8005dac <xPortStartScheduler+0xd4>)
 8005d08:	2207      	movs	r2, #7
 8005d0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d0c:	e009      	b.n	8005d22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005d0e:	4b27      	ldr	r3, [pc, #156]	; (8005dac <xPortStartScheduler+0xd4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	4a25      	ldr	r2, [pc, #148]	; (8005dac <xPortStartScheduler+0xd4>)
 8005d16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2a:	2b80      	cmp	r3, #128	; 0x80
 8005d2c:	d0ef      	beq.n	8005d0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d2e:	4b1f      	ldr	r3, [pc, #124]	; (8005dac <xPortStartScheduler+0xd4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f1c3 0307 	rsb	r3, r3, #7
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d009      	beq.n	8005d4e <xPortStartScheduler+0x76>
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	60bb      	str	r3, [r7, #8]
 8005d4c:	e7fe      	b.n	8005d4c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d4e:	4b17      	ldr	r3, [pc, #92]	; (8005dac <xPortStartScheduler+0xd4>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	4a15      	ldr	r2, [pc, #84]	; (8005dac <xPortStartScheduler+0xd4>)
 8005d56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d58:	4b14      	ldr	r3, [pc, #80]	; (8005dac <xPortStartScheduler+0xd4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d60:	4a12      	ldr	r2, [pc, #72]	; (8005dac <xPortStartScheduler+0xd4>)
 8005d62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d6c:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <xPortStartScheduler+0xd8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a0f      	ldr	r2, [pc, #60]	; (8005db0 <xPortStartScheduler+0xd8>)
 8005d72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d78:	4b0d      	ldr	r3, [pc, #52]	; (8005db0 <xPortStartScheduler+0xd8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a0c      	ldr	r2, [pc, #48]	; (8005db0 <xPortStartScheduler+0xd8>)
 8005d7e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d84:	f000 f8b0 	bl	8005ee8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d88:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <xPortStartScheduler+0xdc>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d8e:	f7ff ff93 	bl	8005cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d92:	f7ff f8dd 	bl	8004f50 <vTaskSwitchContext>
	prvTaskExitError();
 8005d96:	f7ff ff53 	bl	8005c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	e000e400 	.word	0xe000e400
 8005da8:	20000d14 	.word	0x20000d14
 8005dac:	20000d18 	.word	0x20000d18
 8005db0:	e000ed20 	.word	0xe000ed20
 8005db4:	2000000c 	.word	0x2000000c

08005db8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <vPortEnterCritical+0x54>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	4a0d      	ldr	r2, [pc, #52]	; (8005e0c <vPortEnterCritical+0x54>)
 8005dd8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dda:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <vPortEnterCritical+0x54>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d10e      	bne.n	8005e00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005de2:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <vPortEnterCritical+0x58>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d009      	beq.n	8005e00 <vPortEnterCritical+0x48>
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	603b      	str	r3, [r7, #0]
 8005dfe:	e7fe      	b.n	8005dfe <vPortEnterCritical+0x46>
	}
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bc80      	pop	{r7}
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	2000000c 	.word	0x2000000c
 8005e10:	e000ed04 	.word	0xe000ed04

08005e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e1a:	4b10      	ldr	r3, [pc, #64]	; (8005e5c <vPortExitCritical+0x48>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d109      	bne.n	8005e36 <vPortExitCritical+0x22>
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	607b      	str	r3, [r7, #4]
 8005e34:	e7fe      	b.n	8005e34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005e36:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <vPortExitCritical+0x48>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	4a07      	ldr	r2, [pc, #28]	; (8005e5c <vPortExitCritical+0x48>)
 8005e3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <vPortExitCritical+0x48>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <vPortExitCritical+0x3e>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr
 8005e5c:	2000000c 	.word	0x2000000c

08005e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e60:	f3ef 8009 	mrs	r0, PSP
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <pxCurrentTCBConst>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e70:	6010      	str	r0, [r2, #0]
 8005e72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005e76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e7a:	f380 8811 	msr	BASEPRI, r0
 8005e7e:	f7ff f867 	bl	8004f50 <vTaskSwitchContext>
 8005e82:	f04f 0000 	mov.w	r0, #0
 8005e86:	f380 8811 	msr	BASEPRI, r0
 8005e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005e8e:	6819      	ldr	r1, [r3, #0]
 8005e90:	6808      	ldr	r0, [r1, #0]
 8005e92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e96:	f380 8809 	msr	PSP, r0
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	4770      	bx	lr

08005ea0 <pxCurrentTCBConst>:
 8005ea0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop

08005ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ec0:	f7fe ff88 	bl	8004dd4 <xTaskIncrementTick>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <SysTick_Handler+0x3c>)
 8005ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	e000ed04 	.word	0xe000ed04

08005ee8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <vPortSetupTimerInterrupt+0x30>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <vPortSetupTimerInterrupt+0x34>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ef8:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <vPortSetupTimerInterrupt+0x38>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a09      	ldr	r2, [pc, #36]	; (8005f24 <vPortSetupTimerInterrupt+0x3c>)
 8005efe:	fba2 2303 	umull	r2, r3, r2, r3
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	4a08      	ldr	r2, [pc, #32]	; (8005f28 <vPortSetupTimerInterrupt+0x40>)
 8005f06:	3b01      	subs	r3, #1
 8005f08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f0a:	4b03      	ldr	r3, [pc, #12]	; (8005f18 <vPortSetupTimerInterrupt+0x30>)
 8005f0c:	2207      	movs	r2, #7
 8005f0e:	601a      	str	r2, [r3, #0]
}
 8005f10:	bf00      	nop
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr
 8005f18:	e000e010 	.word	0xe000e010
 8005f1c:	e000e018 	.word	0xe000e018
 8005f20:	20000000 	.word	0x20000000
 8005f24:	10624dd3 	.word	0x10624dd3
 8005f28:	e000e014 	.word	0xe000e014

08005f2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f32:	f3ef 8305 	mrs	r3, IPSR
 8005f36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b0f      	cmp	r3, #15
 8005f3c:	d913      	bls.n	8005f66 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f3e:	4a15      	ldr	r2, [pc, #84]	; (8005f94 <vPortValidateInterruptPriority+0x68>)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <vPortValidateInterruptPriority+0x6c>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	7afa      	ldrb	r2, [r7, #11]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d209      	bcs.n	8005f66 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	607b      	str	r3, [r7, #4]
 8005f64:	e7fe      	b.n	8005f64 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f66:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <vPortValidateInterruptPriority+0x70>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <vPortValidateInterruptPriority+0x74>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d909      	bls.n	8005f8a <vPortValidateInterruptPriority+0x5e>
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	e7fe      	b.n	8005f88 <vPortValidateInterruptPriority+0x5c>
	}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr
 8005f94:	e000e3f0 	.word	0xe000e3f0
 8005f98:	20000d14 	.word	0x20000d14
 8005f9c:	e000ed0c 	.word	0xe000ed0c
 8005fa0:	20000d18 	.word	0x20000d18

08005fa4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	; 0x28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fb0:	f7fe fe58 	bl	8004c64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fb4:	4b57      	ldr	r3, [pc, #348]	; (8006114 <pvPortMalloc+0x170>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fbc:	f000 f90c 	bl	80061d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fc0:	4b55      	ldr	r3, [pc, #340]	; (8006118 <pvPortMalloc+0x174>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f040 808c 	bne.w	80060e6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01c      	beq.n	800600e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d013      	beq.n	800600e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f023 0307 	bic.w	r3, r3, #7
 8005fec:	3308      	adds	r3, #8
 8005fee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <pvPortMalloc+0x6a>
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	e7fe      	b.n	800600c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d068      	beq.n	80060e6 <pvPortMalloc+0x142>
 8006014:	4b41      	ldr	r3, [pc, #260]	; (800611c <pvPortMalloc+0x178>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	429a      	cmp	r2, r3
 800601c:	d863      	bhi.n	80060e6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800601e:	4b40      	ldr	r3, [pc, #256]	; (8006120 <pvPortMalloc+0x17c>)
 8006020:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006022:	4b3f      	ldr	r3, [pc, #252]	; (8006120 <pvPortMalloc+0x17c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006028:	e004      	b.n	8006034 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	429a      	cmp	r2, r3
 800603c:	d903      	bls.n	8006046 <pvPortMalloc+0xa2>
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f1      	bne.n	800602a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006046:	4b33      	ldr	r3, [pc, #204]	; (8006114 <pvPortMalloc+0x170>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604c:	429a      	cmp	r2, r3
 800604e:	d04a      	beq.n	80060e6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2208      	movs	r2, #8
 8006056:	4413      	add	r3, r2
 8006058:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	1ad2      	subs	r2, r2, r3
 800606a:	2308      	movs	r3, #8
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	429a      	cmp	r2, r3
 8006070:	d91e      	bls.n	80060b0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4413      	add	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <pvPortMalloc+0xf4>
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	e7fe      	b.n	8006096 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	1ad2      	subs	r2, r2, r3
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060aa:	69b8      	ldr	r0, [r7, #24]
 80060ac:	f000 f8f6 	bl	800629c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060b0:	4b1a      	ldr	r3, [pc, #104]	; (800611c <pvPortMalloc+0x178>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	4a18      	ldr	r2, [pc, #96]	; (800611c <pvPortMalloc+0x178>)
 80060bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060be:	4b17      	ldr	r3, [pc, #92]	; (800611c <pvPortMalloc+0x178>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b18      	ldr	r3, [pc, #96]	; (8006124 <pvPortMalloc+0x180>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d203      	bcs.n	80060d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060ca:	4b14      	ldr	r3, [pc, #80]	; (800611c <pvPortMalloc+0x178>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a15      	ldr	r2, [pc, #84]	; (8006124 <pvPortMalloc+0x180>)
 80060d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	4b10      	ldr	r3, [pc, #64]	; (8006118 <pvPortMalloc+0x174>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	431a      	orrs	r2, r3
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060e6:	f7fe fdcb 	bl	8004c80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d009      	beq.n	8006108 <pvPortMalloc+0x164>
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	e7fe      	b.n	8006106 <pvPortMalloc+0x162>
	return pvReturn;
 8006108:	69fb      	ldr	r3, [r7, #28]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3728      	adds	r7, #40	; 0x28
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20001924 	.word	0x20001924
 8006118:	20001930 	.word	0x20001930
 800611c:	20001928 	.word	0x20001928
 8006120:	2000191c 	.word	0x2000191c
 8006124:	2000192c 	.word	0x2000192c

08006128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d046      	beq.n	80061c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800613a:	2308      	movs	r3, #8
 800613c:	425b      	negs	r3, r3
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4413      	add	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	4b20      	ldr	r3, [pc, #128]	; (80061d0 <vPortFree+0xa8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <vPortFree+0x42>
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	e7fe      	b.n	8006168 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <vPortFree+0x5e>
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	60bb      	str	r3, [r7, #8]
 8006184:	e7fe      	b.n	8006184 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <vPortFree+0xa8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4013      	ands	r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d019      	beq.n	80061c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d115      	bne.n	80061c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <vPortFree+0xa8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	43db      	mvns	r3, r3
 80061a6:	401a      	ands	r2, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061ac:	f7fe fd5a 	bl	8004c64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <vPortFree+0xac>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4413      	add	r3, r2
 80061ba:	4a06      	ldr	r2, [pc, #24]	; (80061d4 <vPortFree+0xac>)
 80061bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061be:	6938      	ldr	r0, [r7, #16]
 80061c0:	f000 f86c 	bl	800629c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061c4:	f7fe fd5c 	bl	8004c80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061c8:	bf00      	nop
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20001930 	.word	0x20001930
 80061d4:	20001928 	.word	0x20001928

080061d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061e4:	4b27      	ldr	r3, [pc, #156]	; (8006284 <prvHeapInit+0xac>)
 80061e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00c      	beq.n	800620c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3307      	adds	r3, #7
 80061f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0307 	bic.w	r3, r3, #7
 80061fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <prvHeapInit+0xac>)
 8006208:	4413      	add	r3, r2
 800620a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006210:	4a1d      	ldr	r2, [pc, #116]	; (8006288 <prvHeapInit+0xb0>)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006216:	4b1c      	ldr	r3, [pc, #112]	; (8006288 <prvHeapInit+0xb0>)
 8006218:	2200      	movs	r2, #0
 800621a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	4413      	add	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006224:	2208      	movs	r2, #8
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	1a9b      	subs	r3, r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0307 	bic.w	r3, r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4a15      	ldr	r2, [pc, #84]	; (800628c <prvHeapInit+0xb4>)
 8006238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800623a:	4b14      	ldr	r3, [pc, #80]	; (800628c <prvHeapInit+0xb4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2200      	movs	r2, #0
 8006240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006242:	4b12      	ldr	r3, [pc, #72]	; (800628c <prvHeapInit+0xb4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	1ad2      	subs	r2, r2, r3
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006258:	4b0c      	ldr	r3, [pc, #48]	; (800628c <prvHeapInit+0xb4>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4a0a      	ldr	r2, [pc, #40]	; (8006290 <prvHeapInit+0xb8>)
 8006266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	4a09      	ldr	r2, [pc, #36]	; (8006294 <prvHeapInit+0xbc>)
 800626e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006270:	4b09      	ldr	r3, [pc, #36]	; (8006298 <prvHeapInit+0xc0>)
 8006272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006276:	601a      	str	r2, [r3, #0]
}
 8006278:	bf00      	nop
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000d1c 	.word	0x20000d1c
 8006288:	2000191c 	.word	0x2000191c
 800628c:	20001924 	.word	0x20001924
 8006290:	2000192c 	.word	0x2000192c
 8006294:	20001928 	.word	0x20001928
 8006298:	20001930 	.word	0x20001930

0800629c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062a4:	4b27      	ldr	r3, [pc, #156]	; (8006344 <prvInsertBlockIntoFreeList+0xa8>)
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	e002      	b.n	80062b0 <prvInsertBlockIntoFreeList+0x14>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d8f7      	bhi.n	80062aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	4413      	add	r3, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d108      	bne.n	80062de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	441a      	add	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	441a      	add	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d118      	bne.n	8006324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4b14      	ldr	r3, [pc, #80]	; (8006348 <prvInsertBlockIntoFreeList+0xac>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d00d      	beq.n	800631a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	441a      	add	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	e008      	b.n	800632c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <prvInsertBlockIntoFreeList+0xac>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	e003      	b.n	800632c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	429a      	cmp	r2, r3
 8006332:	d002      	beq.n	800633a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr
 8006344:	2000191c 	.word	0x2000191c
 8006348:	20001924 	.word	0x20001924

0800634c <__libc_init_array>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	2500      	movs	r5, #0
 8006350:	4e0c      	ldr	r6, [pc, #48]	; (8006384 <__libc_init_array+0x38>)
 8006352:	4c0d      	ldr	r4, [pc, #52]	; (8006388 <__libc_init_array+0x3c>)
 8006354:	1ba4      	subs	r4, r4, r6
 8006356:	10a4      	asrs	r4, r4, #2
 8006358:	42a5      	cmp	r5, r4
 800635a:	d109      	bne.n	8006370 <__libc_init_array+0x24>
 800635c:	f000 f82e 	bl	80063bc <_init>
 8006360:	2500      	movs	r5, #0
 8006362:	4e0a      	ldr	r6, [pc, #40]	; (800638c <__libc_init_array+0x40>)
 8006364:	4c0a      	ldr	r4, [pc, #40]	; (8006390 <__libc_init_array+0x44>)
 8006366:	1ba4      	subs	r4, r4, r6
 8006368:	10a4      	asrs	r4, r4, #2
 800636a:	42a5      	cmp	r5, r4
 800636c:	d105      	bne.n	800637a <__libc_init_array+0x2e>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006374:	4798      	blx	r3
 8006376:	3501      	adds	r5, #1
 8006378:	e7ee      	b.n	8006358 <__libc_init_array+0xc>
 800637a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800637e:	4798      	blx	r3
 8006380:	3501      	adds	r5, #1
 8006382:	e7f2      	b.n	800636a <__libc_init_array+0x1e>
 8006384:	08006470 	.word	0x08006470
 8006388:	08006470 	.word	0x08006470
 800638c:	08006470 	.word	0x08006470
 8006390:	08006474 	.word	0x08006474

08006394 <memcpy>:
 8006394:	b510      	push	{r4, lr}
 8006396:	1e43      	subs	r3, r0, #1
 8006398:	440a      	add	r2, r1
 800639a:	4291      	cmp	r1, r2
 800639c:	d100      	bne.n	80063a0 <memcpy+0xc>
 800639e:	bd10      	pop	{r4, pc}
 80063a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a8:	e7f7      	b.n	800639a <memcpy+0x6>

080063aa <memset>:
 80063aa:	4603      	mov	r3, r0
 80063ac:	4402      	add	r2, r0
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d100      	bne.n	80063b4 <memset+0xa>
 80063b2:	4770      	bx	lr
 80063b4:	f803 1b01 	strb.w	r1, [r3], #1
 80063b8:	e7f9      	b.n	80063ae <memset+0x4>
	...

080063bc <_init>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	bf00      	nop
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr

080063c8 <_fini>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	bf00      	nop
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr
