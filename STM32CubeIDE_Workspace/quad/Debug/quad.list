
quad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005444  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f0  080055f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080055f0  080055f0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055f0  080055f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080055f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a28  20000010  08005608  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a38  08005608  00021a38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a87  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002af7  00000000  00000000  00036ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001320  00000000  00000000  000395b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001208  00000000  00000000  0003a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000027ff  00000000  00000000  0003bae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e532  00000000  00000000  0003e2df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a94e  00000000  00000000  0004c811  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c715f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005114  00000000  00000000  000c71dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800553c 	.word	0x0800553c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800553c 	.word	0x0800553c

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800020c:	f1a2 0201 	sub.w	r2, r2, #1
 8000210:	d1ed      	bne.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000370:	f000 fb9a 	bl	8000aa8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000374:	f000 f82c 	bl	80003d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000378:	f000 f89e 	bl	80004b8 <MX_GPIO_Init>
	MX_I2C1_Init();
 800037c:	f000 f86e 	bl	800045c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	initIMU();
 8000380:	f000 f8e6 	bl	8000550 <initIMU>
	HAL_Delay (1000);
 8000384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000388:	f000 fbc0 	bl	8000b0c <HAL_Delay>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800038c:	f002 fc08 	bl	8002ba0 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of pidTask */
	pidTaskHandle = osThreadNew(pidStart, NULL, &pidTask_attributes);
 8000390:	4a09      	ldr	r2, [pc, #36]	; (80003b8 <main+0x4c>)
 8000392:	2100      	movs	r1, #0
 8000394:	4809      	ldr	r0, [pc, #36]	; (80003bc <main+0x50>)
 8000396:	f002 fc69 	bl	8002c6c <osThreadNew>
 800039a:	4602      	mov	r2, r0
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <main+0x54>)
 800039e:	601a      	str	r2, [r3, #0]

	/* creation of gpsPoll */
	gpsPollHandle = osThreadNew(startGps, NULL, &gpsPoll_attributes);
 80003a0:	4a08      	ldr	r2, [pc, #32]	; (80003c4 <main+0x58>)
 80003a2:	2100      	movs	r1, #0
 80003a4:	4808      	ldr	r0, [pc, #32]	; (80003c8 <main+0x5c>)
 80003a6:	f002 fc61 	bl	8002c6c <osThreadNew>
 80003aa:	4602      	mov	r2, r0
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <main+0x60>)
 80003ae:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80003b0:	f002 fc28 	bl	8002c04 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80003b4:	e7fe      	b.n	80003b4 <main+0x48>
 80003b6:	bf00      	nop
 80003b8:	08005590 	.word	0x08005590
 80003bc:	0800079d 	.word	0x0800079d
 80003c0:	200019ac 	.word	0x200019ac
 80003c4:	080055b4 	.word	0x080055b4
 80003c8:	080007c5 	.word	0x080007c5
 80003cc:	20001998 	.word	0x20001998

080003d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b090      	sub	sp, #64	; 0x40
 80003d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003d6:	f107 0318 	add.w	r3, r7, #24
 80003da:	2228      	movs	r2, #40	; 0x28
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f005 f8a3 	bl	800552a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f2:	2301      	movs	r3, #1
 80003f4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000400:	2301      	movs	r3, #1
 8000402:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000404:	2302      	movs	r3, #2
 8000406:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800040e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000412:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000414:	f107 0318 	add.w	r3, r7, #24
 8000418:	4618      	mov	r0, r3
 800041a:	f001 fd91 	bl	8001f40 <HAL_RCC_OscConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x58>
		Error_Handler();
 8000424:	f000 f9f0 	bl	8000808 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000428:	230f      	movs	r3, #15
 800042a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042c:	2302      	movs	r3, #2
 800042e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000438:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f001 fffc 	bl	8002440 <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x82>
		Error_Handler();
 800044e:	f000 f9db 	bl	8000808 <Error_Handler>
	}
}
 8000452:	bf00      	nop
 8000454:	3740      	adds	r7, #64	; 0x40
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <MX_I2C1_Init+0x50>)
 8000462:	4a13      	ldr	r2, [pc, #76]	; (80004b0 <MX_I2C1_Init+0x54>)
 8000464:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_I2C1_Init+0x50>)
 8000468:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <MX_I2C1_Init+0x58>)
 800046a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_I2C1_Init+0x50>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_I2C1_Init+0x50>)
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_I2C1_Init+0x50>)
 800047a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800047e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <MX_I2C1_Init+0x50>)
 8000482:	2200      	movs	r2, #0
 8000484:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_I2C1_Init+0x50>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <MX_I2C1_Init+0x50>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_I2C1_Init+0x50>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000498:	4804      	ldr	r0, [pc, #16]	; (80004ac <MX_I2C1_Init+0x50>)
 800049a:	f000 fdc3 	bl	8001024 <HAL_I2C_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80004a4:	f000 f9b0 	bl	8000808 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20001944 	.word	0x20001944
 80004b0:	40005400 	.word	0x40005400
 80004b4:	000186a0 	.word	0x000186a0

080004b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80004cc:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <MX_GPIO_Init+0x90>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <MX_GPIO_Init+0x90>)
 80004d2:	f043 0320 	orr.w	r3, r3, #32
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <MX_GPIO_Init+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0320 	and.w	r3, r3, #32
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <MX_GPIO_Init+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a17      	ldr	r2, [pc, #92]	; (8000548 <MX_GPIO_Init+0x90>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <MX_GPIO_Init+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <MX_GPIO_Init+0x90>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a11      	ldr	r2, [pc, #68]	; (8000548 <MX_GPIO_Init+0x90>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <MX_GPIO_Init+0x90>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 7140 	mov.w	r1, #768	; 0x300
 800051a:	480c      	ldr	r0, [pc, #48]	; (800054c <MX_GPIO_Init+0x94>)
 800051c:	f000 fd52 	bl	8000fc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000520:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000524:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2302      	movs	r3, #2
 8000530:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	4804      	ldr	r0, [pc, #16]	; (800054c <MX_GPIO_Init+0x94>)
 800053a:	f000 fbe9 	bl	8000d10 <HAL_GPIO_Init>

}
 800053e:	bf00      	nop
 8000540:	3720      	adds	r7, #32
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000
 800054c:	40010c00 	.word	0x40010c00

08000550 <initIMU>:

/* USER CODE BEGIN 4 */
void initIMU(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	9302      	str	r3, [sp, #8]
 800055c:	2301      	movs	r3, #1
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	2301      	movs	r3, #1
 8000566:	2275      	movs	r2, #117	; 0x75
 8000568:	2168      	movs	r1, #104	; 0x68
 800056a:	4824      	ldr	r0, [pc, #144]	; (80005fc <initIMU+0xac>)
 800056c:	f000 ff7c 	bl	8001468 <HAL_I2C_Mem_Read>
	Data = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	71bb      	strb	r3, [r7, #6]
	if (check == 104) {
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	2b68      	cmp	r3, #104	; 0x68
 8000578:	d13b      	bne.n	80005f2 <initIMU+0xa2>
		Data = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	9302      	str	r3, [sp, #8]
 8000584:	2301      	movs	r3, #1
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	1dbb      	adds	r3, r7, #6
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2301      	movs	r3, #1
 800058e:	226b      	movs	r2, #107	; 0x6b
 8000590:	2168      	movs	r1, #104	; 0x68
 8000592:	481a      	ldr	r0, [pc, #104]	; (80005fc <initIMU+0xac>)
 8000594:	f000 fe6e 	bl	8001274 <HAL_I2C_Mem_Write>
				1000);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000598:	2307      	movs	r3, #7
 800059a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 800059c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a0:	9302      	str	r3, [sp, #8]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	1dbb      	adds	r3, r7, #6
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2301      	movs	r3, #1
 80005ac:	2219      	movs	r2, #25
 80005ae:	2168      	movs	r1, #104	; 0x68
 80005b0:	4812      	ldr	r0, [pc, #72]	; (80005fc <initIMU+0xac>)
 80005b2:	f000 fe5f 	bl	8001274 <HAL_I2C_Mem_Write>
				1000);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	2301      	movs	r3, #1
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	1dbb      	adds	r3, r7, #6
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2301      	movs	r3, #1
 80005ca:	221c      	movs	r2, #28
 80005cc:	2168      	movs	r1, #104	; 0x68
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <initIMU+0xac>)
 80005d0:	f000 fe50 	bl	8001274 <HAL_I2C_Mem_Write>
				1000);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 80005d4:	2300      	movs	r3, #0
 80005d6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 80005d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005dc:	9302      	str	r3, [sp, #8]
 80005de:	2301      	movs	r3, #1
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	1dbb      	adds	r3, r7, #6
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2301      	movs	r3, #1
 80005e8:	221b      	movs	r2, #27
 80005ea:	2168      	movs	r1, #104	; 0x68
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <initIMU+0xac>)
 80005ee:	f000 fe41 	bl	8001274 <HAL_I2C_Mem_Write>
				1000);

	}

}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20001944 	.word	0x20001944

08000600 <readIMUAccel>:

void readIMUAccel(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af04      	add	r7, sp, #16

	uint8_t dataReceived[6];
	// Read 6 BYTES of data starting from ACCEL_XOUT_H register
	uint16_t accelScaleFactor = 16384.0;
 8000606:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800060a:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, dataReceived, 6,
 800060c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	2306      	movs	r3, #6
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	463b      	mov	r3, r7
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2301      	movs	r3, #1
 800061c:	223b      	movs	r2, #59	; 0x3b
 800061e:	2168      	movs	r1, #104	; 0x68
 8000620:	4824      	ldr	r0, [pc, #144]	; (80006b4 <readIMUAccel+0xb4>)
 8000622:	f000 ff21 	bl	8001468 <HAL_I2C_Mem_Read>
			1000);

	Accel_X_RAW = (int16_t) (dataReceived[0] << 8 | dataReceived[1]);
 8000626:	783b      	ldrb	r3, [r7, #0]
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	b21a      	sxth	r2, r3
 800062c:	787b      	ldrb	r3, [r7, #1]
 800062e:	b21b      	sxth	r3, r3
 8000630:	4313      	orrs	r3, r2
 8000632:	b21a      	sxth	r2, r3
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <readIMUAccel+0xb8>)
 8000636:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t) (dataReceived[2] << 8 | dataReceived[3]);
 8000638:	78bb      	ldrb	r3, [r7, #2]
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	b21a      	sxth	r2, r3
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	b21b      	sxth	r3, r3
 8000642:	4313      	orrs	r3, r2
 8000644:	b21a      	sxth	r2, r3
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <readIMUAccel+0xbc>)
 8000648:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t) (dataReceived[4] << 8 | dataReceived[5]);
 800064a:	793b      	ldrb	r3, [r7, #4]
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	b21a      	sxth	r2, r3
 8000650:	797b      	ldrb	r3, [r7, #5]
 8000652:	b21b      	sxth	r3, r3
 8000654:	4313      	orrs	r3, r2
 8000656:	b21a      	sxth	r2, r3
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <readIMUAccel+0xc0>)
 800065a:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	 we have to divide according to the Full scale value set in FS_SEL
	 I have configured FS_SEL = 0. So I am dividing by 16384.0
	 for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW / accelScaleFactor;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <readIMUAccel+0xb8>)
 800065e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000662:	461a      	mov	r2, r3
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	fb92 f3f3 	sdiv	r3, r2, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fe2a 	bl	80002c4 <__aeabi_i2f>
 8000670:	4602      	mov	r2, r0
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <readIMUAccel+0xc4>)
 8000674:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW / accelScaleFactor;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <readIMUAccel+0xbc>)
 8000678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800067c:	461a      	mov	r2, r3
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	fb92 f3f3 	sdiv	r3, r2, r3
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fe1d 	bl	80002c4 <__aeabi_i2f>
 800068a:	4602      	mov	r2, r0
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <readIMUAccel+0xc8>)
 800068e:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW / accelScaleFactor;
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <readIMUAccel+0xc0>)
 8000692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000696:	461a      	mov	r2, r3
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	fb92 f3f3 	sdiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fe10 	bl	80002c4 <__aeabi_i2f>
 80006a4:	4602      	mov	r2, r0
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <readIMUAccel+0xcc>)
 80006a8:	601a      	str	r2, [r3, #0]

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20001944 	.word	0x20001944
 80006b8:	2000002c 	.word	0x2000002c
 80006bc:	2000002e 	.word	0x2000002e
 80006c0:	20000030 	.word	0x20000030
 80006c4:	200019a4 	.word	0x200019a4
 80006c8:	2000199c 	.word	0x2000199c
 80006cc:	200019a8 	.word	0x200019a8

080006d0 <readIMUGyro>:

void readIMUGyro(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af04      	add	r7, sp, #16
	uint8_t dataReceived[6];
	uint16_t gryoScaleFactor = 131.0;
 80006d6:	2383      	movs	r3, #131	; 0x83
 80006d8:	80fb      	strh	r3, [r7, #6]
	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, dataReceived, 6,
 80006da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006de:	9302      	str	r3, [sp, #8]
 80006e0:	2306      	movs	r3, #6
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	463b      	mov	r3, r7
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2301      	movs	r3, #1
 80006ea:	2243      	movs	r2, #67	; 0x43
 80006ec:	2168      	movs	r1, #104	; 0x68
 80006ee:	4824      	ldr	r0, [pc, #144]	; (8000780 <readIMUGyro+0xb0>)
 80006f0:	f000 feba 	bl	8001468 <HAL_I2C_Mem_Read>
			1000);

	Gyro_X_RAW = (int16_t) (dataReceived[0] << 8 | dataReceived[1]);
 80006f4:	783b      	ldrb	r3, [r7, #0]
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	b21a      	sxth	r2, r3
 80006fa:	787b      	ldrb	r3, [r7, #1]
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	b21a      	sxth	r2, r3
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <readIMUGyro+0xb4>)
 8000704:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t) (dataReceived[2] << 8 | dataReceived[3]);
 8000706:	78bb      	ldrb	r3, [r7, #2]
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	b21a      	sxth	r2, r3
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	b21b      	sxth	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	b21a      	sxth	r2, r3
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <readIMUGyro+0xb8>)
 8000716:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t) (dataReceived[4] << 8 | dataReceived[5]);
 8000718:	793b      	ldrb	r3, [r7, #4]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21a      	sxth	r2, r3
 800071e:	797b      	ldrb	r3, [r7, #5]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b21a      	sxth	r2, r3
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <readIMUGyro+0xbc>)
 8000728:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	 we have to divide according to the Full scale value set in FS_SEL
	 I have configured FS_SEL = 0. So I am dividing by 131.0
	 for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW / gryoScaleFactor;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <readIMUGyro+0xb4>)
 800072c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000730:	461a      	mov	r2, r3
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	fb92 f3f3 	sdiv	r3, r2, r3
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fdc3 	bl	80002c4 <__aeabi_i2f>
 800073e:	4602      	mov	r2, r0
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <readIMUGyro+0xc0>)
 8000742:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW / gryoScaleFactor;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <readIMUGyro+0xb8>)
 8000746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800074a:	461a      	mov	r2, r3
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fdb6 	bl	80002c4 <__aeabi_i2f>
 8000758:	4602      	mov	r2, r0
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <readIMUGyro+0xc4>)
 800075c:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW / gryoScaleFactor;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <readIMUGyro+0xbc>)
 8000760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000764:	461a      	mov	r2, r3
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	fb92 f3f3 	sdiv	r3, r2, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fda9 	bl	80002c4 <__aeabi_i2f>
 8000772:	4602      	mov	r2, r0
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <readIMUGyro+0xc8>)
 8000776:	601a      	str	r2, [r3, #0]
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20001944 	.word	0x20001944
 8000784:	20000032 	.word	0x20000032
 8000788:	20000034 	.word	0x20000034
 800078c:	20000036 	.word	0x20000036
 8000790:	20001940 	.word	0x20001940
 8000794:	200019a0 	.word	0x200019a0
 8000798:	200019b0 	.word	0x200019b0

0800079c <pidStart>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_pidStart */

void pidStart(void *argument) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	for (;;) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80007a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <pidStart+0x24>)
 80007aa:	f000 fc23 	bl	8000ff4 <HAL_GPIO_TogglePin>
		readIMUGyro();
 80007ae:	f7ff ff8f 	bl	80006d0 <readIMUGyro>
		readIMUAccel();
 80007b2:	f7ff ff25 	bl	8000600 <readIMUAccel>

		osDelay(600);
 80007b6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80007ba:	f002 fb01 	bl	8002dc0 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80007be:	e7f1      	b.n	80007a4 <pidStart+0x8>
 80007c0:	40010c00 	.word	0x40010c00

080007c4 <startGps>:
 * @brief Function implementing the gpsPoll thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startGps */
void startGps(void *argument) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startGps */
	/* Infinite loop */
	for (;;) {

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <startGps+0x1c>)
 80007d2:	f000 fc0f 	bl	8000ff4 <HAL_GPIO_TogglePin>
		osDelay(500);
 80007d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007da:	f002 faf1 	bl	8002dc0 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80007de:	e7f5      	b.n	80007cc <startGps+0x8>
 80007e0:	40010c00 	.word	0x40010c00

080007e4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d101      	bne.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80007f6:	f000 f96d 	bl	8000ad4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40000800 	.word	0x40000800

08000808 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_MspInit+0x68>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_MspInit+0x68>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_MspInit+0x68>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_MspInit+0x68>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <HAL_MspInit+0x68>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	61d3      	str	r3, [r2, #28]
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_MspInit+0x68>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	210f      	movs	r1, #15
 800084e:	f06f 0001 	mvn.w	r0, #1
 8000852:	f000 fa32 	bl	8000cba <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_MspInit+0x6c>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_MspInit+0x6c>)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000
 8000880:	40010000 	.word	0x40010000

08000884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <HAL_I2C_MspInit+0x70>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d123      	bne.n	80008ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_I2C_MspInit+0x74>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <HAL_I2C_MspInit+0x74>)
 80008aa:	f043 0308 	orr.w	r3, r3, #8
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_I2C_MspInit+0x74>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0308 	and.w	r3, r3, #8
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008bc:	23c0      	movs	r3, #192	; 0xc0
 80008be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c0:	2312      	movs	r3, #18
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4619      	mov	r1, r3
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <HAL_I2C_MspInit+0x78>)
 80008d0:	f000 fa1e 	bl	8000d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_I2C_MspInit+0x74>)
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_I2C_MspInit+0x74>)
 80008da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008de:	61d3      	str	r3, [r2, #28]
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_I2C_MspInit+0x74>)
 80008e2:	69db      	ldr	r3, [r3, #28]
 80008e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40005400 	.word	0x40005400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010c00 	.word	0x40010c00

08000900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000910:	2200      	movs	r2, #0
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	201e      	movs	r0, #30
 8000916:	f000 f9d0 	bl	8000cba <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800091a:	201e      	movs	r0, #30
 800091c:	f000 f9e9 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <HAL_InitTick+0xa0>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <HAL_InitTick+0xa0>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	61d3      	str	r3, [r2, #28]
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_InitTick+0xa0>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000938:	f107 0210 	add.w	r2, r7, #16
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f001 fee6 	bl	8002714 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000948:	f001 fed0 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 800094c:	4603      	mov	r3, r0
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000954:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <HAL_InitTick+0xa4>)
 8000956:	fba2 2303 	umull	r2, r3, r2, r3
 800095a:	0c9b      	lsrs	r3, r3, #18
 800095c:	3b01      	subs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_InitTick+0xa8>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <HAL_InitTick+0xac>)
 8000964:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_InitTick+0xa8>)
 8000968:	f240 32e7 	movw	r2, #999	; 0x3e7
 800096c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_InitTick+0xa8>)
 8000970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000972:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_InitTick+0xa8>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_InitTick+0xa8>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <HAL_InitTick+0xa8>)
 8000982:	f001 ff15 	bl	80027b0 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d104      	bne.n	8000996 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <HAL_InitTick+0xa8>)
 800098e:	f001 ff43 	bl	8002818 <HAL_TIM_Base_Start_IT>
 8000992:	4603      	mov	r3, r0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3730      	adds	r7, #48	; 0x30
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	200019b4 	.word	0x200019b4
 80009ac:	40000800 	.word	0x40000800

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <HardFault_Handler+0x4>

080009c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <MemManage_Handler+0x4>

080009c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <BusFault_Handler+0x4>

080009ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <UsageFault_Handler+0x4>

080009d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <TIM4_IRQHandler+0x10>)
 80009e6:	f001 ff3a 	bl	800285e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200019b4 	.word	0x200019b4

080009f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <SystemInit+0x5c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <SystemInit+0x5c>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <SystemInit+0x5c>)
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	4911      	ldr	r1, [pc, #68]	; (8000a50 <SystemInit+0x5c>)
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <SystemInit+0x60>)
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <SystemInit+0x5c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <SystemInit+0x5c>)
 8000a16:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a1e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <SystemInit+0x5c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <SystemInit+0x5c>)
 8000a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <SystemInit+0x5c>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <SystemInit+0x5c>)
 8000a32:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a36:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <SystemInit+0x5c>)
 8000a3a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a3e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <SystemInit+0x64>)
 8000a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a46:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	40021000 	.word	0x40021000
 8000a54:	f8ff0000 	.word	0xf8ff0000
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a5e:	e003      	b.n	8000a68 <LoopCopyDataInit>

08000a60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a66:	3104      	adds	r1, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a70:	d3f6      	bcc.n	8000a60 <CopyDataInit>
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a74:	e002      	b.n	8000a7c <LoopFillZerobss>

08000a76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a78:	f842 3b04 	str.w	r3, [r2], #4

08000a7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a80:	d3f9      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a82:	f7ff ffb7 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f004 fd21 	bl	80054cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8a:	f7ff fc6f 	bl	800036c <main>
  bx lr
 8000a8e:	4770      	bx	lr
  ldr r3, =_sidata
 8000a90:	080055f8 	.word	0x080055f8
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a98:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000a9c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000aa0:	20001a38 	.word	0x20001a38

08000aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_2_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_Init+0x28>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_Init+0x28>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f8f3 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff ff1e 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff fea6 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_IncTick+0x1c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x20>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a03      	ldr	r2, [pc, #12]	; (8000af4 <HAL_IncTick+0x20>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000008 	.word	0x20000008
 8000af4:	200019f4 	.word	0x200019f4

08000af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <HAL_GetTick+0x10>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	200019f4 	.word	0x200019f4

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff fff0 	bl	8000af8 <HAL_GetTick>
 8000b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b24:	d005      	beq.n	8000b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_Delay+0x40>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b32:	bf00      	nop
 8000b34:	f7ff ffe0 	bl	8000af8 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8f7      	bhi.n	8000b34 <HAL_Delay+0x28>
  {
  }
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000008 	.word	0x20000008

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	db0b      	blt.n	8000bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f003 021f 	and.w	r2, r3, #31
 8000bcc:	4906      	ldr	r1, [pc, #24]	; (8000be8 <__NVIC_EnableIRQ+0x34>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff4f 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff64 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ffb2 	bl	8000c40 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff81 	bl	8000bec <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff57 	bl	8000bb4 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b08b      	sub	sp, #44	; 0x2c
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d22:	e127      	b.n	8000f74 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d24:	2201      	movs	r2, #1
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	69fa      	ldr	r2, [r7, #28]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f040 8116 	bne.w	8000f6e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b12      	cmp	r3, #18
 8000d48:	d034      	beq.n	8000db4 <HAL_GPIO_Init+0xa4>
 8000d4a:	2b12      	cmp	r3, #18
 8000d4c:	d80d      	bhi.n	8000d6a <HAL_GPIO_Init+0x5a>
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d02b      	beq.n	8000daa <HAL_GPIO_Init+0x9a>
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d804      	bhi.n	8000d60 <HAL_GPIO_Init+0x50>
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d031      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d01c      	beq.n	8000d98 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d5e:	e048      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d043      	beq.n	8000dec <HAL_GPIO_Init+0xdc>
 8000d64:	2b11      	cmp	r3, #17
 8000d66:	d01b      	beq.n	8000da0 <HAL_GPIO_Init+0x90>
          break;
 8000d68:	e043      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d6a:	4a89      	ldr	r2, [pc, #548]	; (8000f90 <HAL_GPIO_Init+0x280>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d026      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
 8000d70:	4a87      	ldr	r2, [pc, #540]	; (8000f90 <HAL_GPIO_Init+0x280>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d806      	bhi.n	8000d84 <HAL_GPIO_Init+0x74>
 8000d76:	4a87      	ldr	r2, [pc, #540]	; (8000f94 <HAL_GPIO_Init+0x284>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d020      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
 8000d7c:	4a86      	ldr	r2, [pc, #536]	; (8000f98 <HAL_GPIO_Init+0x288>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d01d      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
          break;
 8000d82:	e036      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d84:	4a85      	ldr	r2, [pc, #532]	; (8000f9c <HAL_GPIO_Init+0x28c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d019      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
 8000d8a:	4a85      	ldr	r2, [pc, #532]	; (8000fa0 <HAL_GPIO_Init+0x290>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d016      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
 8000d90:	4a84      	ldr	r2, [pc, #528]	; (8000fa4 <HAL_GPIO_Init+0x294>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d013      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
          break;
 8000d96:	e02c      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	623b      	str	r3, [r7, #32]
          break;
 8000d9e:	e028      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	3304      	adds	r3, #4
 8000da6:	623b      	str	r3, [r7, #32]
          break;
 8000da8:	e023      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	3308      	adds	r3, #8
 8000db0:	623b      	str	r3, [r7, #32]
          break;
 8000db2:	e01e      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	330c      	adds	r3, #12
 8000dba:	623b      	str	r3, [r7, #32]
          break;
 8000dbc:	e019      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	623b      	str	r3, [r7, #32]
          break;
 8000dca:	e012      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d105      	bne.n	8000de0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	611a      	str	r2, [r3, #16]
          break;
 8000dde:	e008      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de0:	2308      	movs	r3, #8
 8000de2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	69fa      	ldr	r2, [r7, #28]
 8000de8:	615a      	str	r2, [r3, #20]
          break;
 8000dea:	e002      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
          break;
 8000df0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	2bff      	cmp	r3, #255	; 0xff
 8000df6:	d801      	bhi.n	8000dfc <HAL_GPIO_Init+0xec>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	e001      	b.n	8000e00 <HAL_GPIO_Init+0xf0>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3304      	adds	r3, #4
 8000e00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	2bff      	cmp	r3, #255	; 0xff
 8000e06:	d802      	bhi.n	8000e0e <HAL_GPIO_Init+0xfe>
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	e002      	b.n	8000e14 <HAL_GPIO_Init+0x104>
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	3b08      	subs	r3, #8
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	401a      	ands	r2, r3
 8000e26:	6a39      	ldr	r1, [r7, #32]
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 8096 	beq.w	8000f6e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e42:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <HAL_GPIO_Init+0x298>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a58      	ldr	r2, [pc, #352]	; (8000fa8 <HAL_GPIO_Init+0x298>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <HAL_GPIO_Init+0x298>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e5a:	4a54      	ldr	r2, [pc, #336]	; (8000fac <HAL_GPIO_Init+0x29c>)
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4b      	ldr	r2, [pc, #300]	; (8000fb0 <HAL_GPIO_Init+0x2a0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x19e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4a      	ldr	r2, [pc, #296]	; (8000fb4 <HAL_GPIO_Init+0x2a4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x19a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a49      	ldr	r2, [pc, #292]	; (8000fb8 <HAL_GPIO_Init+0x2a8>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x196>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a48      	ldr	r2, [pc, #288]	; (8000fbc <HAL_GPIO_Init+0x2ac>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x192>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x1a0>
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_Init+0x1a0>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x1a0>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x1a0>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb2:	f002 0203 	and.w	r2, r2, #3
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	4093      	lsls	r3, r2
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ec0:	493a      	ldr	r1, [pc, #232]	; (8000fac <HAL_GPIO_Init+0x29c>)
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d006      	beq.n	8000ee8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eda:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4938      	ldr	r1, [pc, #224]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
 8000ee6:	e006      	b.n	8000ef6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	4933      	ldr	r1, [pc, #204]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	492e      	ldr	r1, [pc, #184]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
 8000f0e:	e006      	b.n	8000f1e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f10:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	4929      	ldr	r1, [pc, #164]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	4924      	ldr	r1, [pc, #144]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	608b      	str	r3, [r1, #8]
 8000f36:	e006      	b.n	8000f46 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	491f      	ldr	r1, [pc, #124]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d006      	beq.n	8000f60 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	491a      	ldr	r1, [pc, #104]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60cb      	str	r3, [r1, #12]
 8000f5e:	e006      	b.n	8000f6e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	4915      	ldr	r1, [pc, #84]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	3301      	adds	r3, #1
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f47f aed0 	bne.w	8000d24 <HAL_GPIO_Init+0x14>
  }
}
 8000f84:	bf00      	nop
 8000f86:	372c      	adds	r7, #44	; 0x2c
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	10210000 	.word	0x10210000
 8000f94:	10110000 	.word	0x10110000
 8000f98:	10120000 	.word	0x10120000
 8000f9c:	10310000 	.word	0x10310000
 8000fa0:	10320000 	.word	0x10320000
 8000fa4:	10220000 	.word	0x10220000
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	40010c00 	.word	0x40010c00
 8000fb8:	40011000 	.word	0x40011000
 8000fbc:	40011400 	.word	0x40011400
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fe0:	e003      	b.n	8000fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	041a      	lsls	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	611a      	str	r2, [r3, #16]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800100c:	887a      	ldrh	r2, [r7, #2]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001012:	e002      	b.n	800101a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	611a      	str	r2, [r3, #16]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e10f      	b.n	8001256 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fc1a 	bl	8000884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2224      	movs	r2, #36	; 0x24
 8001054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001068:	f001 fb40 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 800106c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4a7b      	ldr	r2, [pc, #492]	; (8001260 <HAL_I2C_Init+0x23c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d807      	bhi.n	8001088 <HAL_I2C_Init+0x64>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4a7a      	ldr	r2, [pc, #488]	; (8001264 <HAL_I2C_Init+0x240>)
 800107c:	4293      	cmp	r3, r2
 800107e:	bf94      	ite	ls
 8001080:	2301      	movls	r3, #1
 8001082:	2300      	movhi	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	e006      	b.n	8001096 <HAL_I2C_Init+0x72>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4a77      	ldr	r2, [pc, #476]	; (8001268 <HAL_I2C_Init+0x244>)
 800108c:	4293      	cmp	r3, r2
 800108e:	bf94      	ite	ls
 8001090:	2301      	movls	r3, #1
 8001092:	2300      	movhi	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e0db      	b.n	8001256 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4a72      	ldr	r2, [pc, #456]	; (800126c <HAL_I2C_Init+0x248>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0c9b      	lsrs	r3, r3, #18
 80010a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4a64      	ldr	r2, [pc, #400]	; (8001260 <HAL_I2C_Init+0x23c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d802      	bhi.n	80010d8 <HAL_I2C_Init+0xb4>
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	3301      	adds	r3, #1
 80010d6:	e009      	b.n	80010ec <HAL_I2C_Init+0xc8>
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010de:	fb02 f303 	mul.w	r3, r2, r3
 80010e2:	4a63      	ldr	r2, [pc, #396]	; (8001270 <HAL_I2C_Init+0x24c>)
 80010e4:	fba2 2303 	umull	r2, r3, r2, r3
 80010e8:	099b      	lsrs	r3, r3, #6
 80010ea:	3301      	adds	r3, #1
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	4956      	ldr	r1, [pc, #344]	; (8001260 <HAL_I2C_Init+0x23c>)
 8001108:	428b      	cmp	r3, r1
 800110a:	d80d      	bhi.n	8001128 <HAL_I2C_Init+0x104>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	1e59      	subs	r1, r3, #1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fbb1 f3f3 	udiv	r3, r1, r3
 800111a:	3301      	adds	r3, #1
 800111c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001120:	2b04      	cmp	r3, #4
 8001122:	bf38      	it	cc
 8001124:	2304      	movcc	r3, #4
 8001126:	e04f      	b.n	80011c8 <HAL_I2C_Init+0x1a4>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d111      	bne.n	8001154 <HAL_I2C_Init+0x130>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1e58      	subs	r0, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6859      	ldr	r1, [r3, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	440b      	add	r3, r1
 800113e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001142:	3301      	adds	r3, #1
 8001144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001148:	2b00      	cmp	r3, #0
 800114a:	bf0c      	ite	eq
 800114c:	2301      	moveq	r3, #1
 800114e:	2300      	movne	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	e012      	b.n	800117a <HAL_I2C_Init+0x156>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	1e58      	subs	r0, r3, #1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6859      	ldr	r1, [r3, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	0099      	lsls	r1, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	fbb0 f3f3 	udiv	r3, r0, r3
 800116a:	3301      	adds	r3, #1
 800116c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001170:	2b00      	cmp	r3, #0
 8001172:	bf0c      	ite	eq
 8001174:	2301      	moveq	r3, #1
 8001176:	2300      	movne	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_I2C_Init+0x15e>
 800117e:	2301      	movs	r3, #1
 8001180:	e022      	b.n	80011c8 <HAL_I2C_Init+0x1a4>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10e      	bne.n	80011a8 <HAL_I2C_Init+0x184>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1e58      	subs	r0, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6859      	ldr	r1, [r3, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	440b      	add	r3, r1
 8001198:	fbb0 f3f3 	udiv	r3, r0, r3
 800119c:	3301      	adds	r3, #1
 800119e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a6:	e00f      	b.n	80011c8 <HAL_I2C_Init+0x1a4>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	1e58      	subs	r0, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6859      	ldr	r1, [r3, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	0099      	lsls	r1, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80011be:	3301      	adds	r3, #1
 80011c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	6809      	ldr	r1, [r1, #0]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69da      	ldr	r2, [r3, #28]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6911      	ldr	r1, [r2, #16]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68d2      	ldr	r2, [r2, #12]
 8001202:	4311      	orrs	r1, r2
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	430b      	orrs	r3, r1
 800120a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	430a      	orrs	r2, r1
 8001226:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0201 	orr.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2220      	movs	r2, #32
 8001242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	000186a0 	.word	0x000186a0
 8001264:	001e847f 	.word	0x001e847f
 8001268:	003d08ff 	.word	0x003d08ff
 800126c:	431bde83 	.word	0x431bde83
 8001270:	10624dd3 	.word	0x10624dd3

08001274 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af02      	add	r7, sp, #8
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	4608      	mov	r0, r1
 800127e:	4611      	mov	r1, r2
 8001280:	461a      	mov	r2, r3
 8001282:	4603      	mov	r3, r0
 8001284:	817b      	strh	r3, [r7, #10]
 8001286:	460b      	mov	r3, r1
 8001288:	813b      	strh	r3, [r7, #8]
 800128a:	4613      	mov	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800128e:	f7ff fc33 	bl	8000af8 <HAL_GetTick>
 8001292:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b20      	cmp	r3, #32
 800129e:	f040 80d9 	bne.w	8001454 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2319      	movs	r3, #25
 80012a8:	2201      	movs	r2, #1
 80012aa:	496d      	ldr	r1, [pc, #436]	; (8001460 <HAL_I2C_Mem_Write+0x1ec>)
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 fc6b 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80012b8:	2302      	movs	r3, #2
 80012ba:	e0cc      	b.n	8001456 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_I2C_Mem_Write+0x56>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e0c5      	b.n	8001456 <HAL_I2C_Mem_Write+0x1e2>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d007      	beq.n	80012f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2221      	movs	r2, #33	; 0x21
 8001304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2240      	movs	r2, #64	; 0x40
 800130c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6a3a      	ldr	r2, [r7, #32]
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001326:	b29a      	uxth	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4a4d      	ldr	r2, [pc, #308]	; (8001464 <HAL_I2C_Mem_Write+0x1f0>)
 8001330:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001332:	88f8      	ldrh	r0, [r7, #6]
 8001334:	893a      	ldrh	r2, [r7, #8]
 8001336:	8979      	ldrh	r1, [r7, #10]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	4603      	mov	r3, r0
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 fac6 	bl	80018d4 <I2C_RequestMemoryWrite>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d052      	beq.n	80013f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e081      	b.n	8001456 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 fcec 	bl	8001d34 <I2C_WaitOnTXEFlagUntilTimeout>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00d      	beq.n	800137e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	2b04      	cmp	r3, #4
 8001368:	d107      	bne.n	800137a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e06b      	b.n	8001456 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	781a      	ldrb	r2, [r3, #0]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001398:	3b01      	subs	r3, #1
 800139a:	b29a      	uxth	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	3b01      	subs	r3, #1
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d11b      	bne.n	80013f4 <HAL_I2C_Mem_Write+0x180>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d017      	beq.n	80013f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013de:	3b01      	subs	r3, #1
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1aa      	bne.n	8001352 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 fcd8 	bl	8001db6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00d      	beq.n	8001428 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	2b04      	cmp	r3, #4
 8001412:	d107      	bne.n	8001424 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001422:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e016      	b.n	8001456 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2220      	movs	r2, #32
 800143c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e000      	b.n	8001456 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001454:	2302      	movs	r3, #2
  }
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	00100002 	.word	0x00100002
 8001464:	ffff0000 	.word	0xffff0000

08001468 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af02      	add	r7, sp, #8
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	4608      	mov	r0, r1
 8001472:	4611      	mov	r1, r2
 8001474:	461a      	mov	r2, r3
 8001476:	4603      	mov	r3, r0
 8001478:	817b      	strh	r3, [r7, #10]
 800147a:	460b      	mov	r3, r1
 800147c:	813b      	strh	r3, [r7, #8]
 800147e:	4613      	mov	r3, r2
 8001480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001482:	f7ff fb39 	bl	8000af8 <HAL_GetTick>
 8001486:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b20      	cmp	r3, #32
 8001492:	f040 8218 	bne.w	80018c6 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2319      	movs	r3, #25
 800149c:	2201      	movs	r2, #1
 800149e:	4981      	ldr	r1, [pc, #516]	; (80016a4 <HAL_I2C_Mem_Read+0x23c>)
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 fb71 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80014ac:	2302      	movs	r3, #2
 80014ae:	e20b      	b.n	80018c8 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d101      	bne.n	80014be <HAL_I2C_Mem_Read+0x56>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e204      	b.n	80018c8 <HAL_I2C_Mem_Read+0x460>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d007      	beq.n	80014e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2222      	movs	r2, #34	; 0x22
 80014f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2240      	movs	r2, #64	; 0x40
 8001500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800151a:	b29a      	uxth	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a61      	ldr	r2, [pc, #388]	; (80016a8 <HAL_I2C_Mem_Read+0x240>)
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001526:	88f8      	ldrh	r0, [r7, #6]
 8001528:	893a      	ldrh	r2, [r7, #8]
 800152a:	8979      	ldrh	r1, [r7, #10]
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	4603      	mov	r3, r0
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 fa56 	bl	80019e8 <I2C_RequestMemoryRead>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e1c0      	b.n	80018c8 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154a:	2b00      	cmp	r3, #0
 800154c:	d113      	bne.n	8001576 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	623b      	str	r3, [r7, #32]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	623b      	str	r3, [r7, #32]
 8001562:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e194      	b.n	80018a0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157a:	2b01      	cmp	r3, #1
 800157c:	d11d      	bne.n	80015ba <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800158c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015b6:	b662      	cpsie	i
 80015b8:	e172      	b.n	80018a0 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d11d      	bne.n	80015fe <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015d2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015fa:	b662      	cpsie	i
 80015fc:	e150      	b.n	80018a0 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800160c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001624:	e13c      	b.n	80018a0 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162a:	2b03      	cmp	r3, #3
 800162c:	f200 80f5 	bhi.w	800181a <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001634:	2b01      	cmp	r3, #1
 8001636:	d123      	bne.n	8001680 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 fbfb 	bl	8001e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e13d      	b.n	80018c8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691a      	ldr	r2, [r3, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001668:	3b01      	subs	r3, #1
 800166a:	b29a      	uxth	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001674:	b29b      	uxth	r3, r3
 8001676:	3b01      	subs	r3, #1
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800167e:	e10f      	b.n	80018a0 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001684:	2b02      	cmp	r3, #2
 8001686:	d150      	bne.n	800172a <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800168e:	2200      	movs	r2, #0
 8001690:	4906      	ldr	r1, [pc, #24]	; (80016ac <HAL_I2C_Mem_Read+0x244>)
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fa78 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e112      	b.n	80018c8 <HAL_I2C_Mem_Read+0x460>
 80016a2:	bf00      	nop
 80016a4:	00100002 	.word	0x00100002
 80016a8:	ffff0000 	.word	0xffff0000
 80016ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016c0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016de:	3b01      	subs	r3, #1
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80016f4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001712:	3b01      	subs	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171e:	b29b      	uxth	r3, r3
 8001720:	3b01      	subs	r3, #1
 8001722:	b29a      	uxth	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001728:	e0ba      	b.n	80018a0 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001730:	2200      	movs	r2, #0
 8001732:	4967      	ldr	r1, [pc, #412]	; (80018d0 <HAL_I2C_Mem_Read+0x468>)
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fa27 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0c1      	b.n	80018c8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001752:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001772:	3b01      	subs	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178e:	2200      	movs	r2, #0
 8001790:	494f      	ldr	r1, [pc, #316]	; (80018d0 <HAL_I2C_Mem_Read+0x468>)
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 f9f8 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e092      	b.n	80018c8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017da:	b29b      	uxth	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80017e4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001802:	3b01      	subs	r3, #1
 8001804:	b29a      	uxth	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180e:	b29b      	uxth	r3, r3
 8001810:	3b01      	subs	r3, #1
 8001812:	b29a      	uxth	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001818:	e042      	b.n	80018a0 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800181a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 fb0a 	bl	8001e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e04c      	b.n	80018c8 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	3b01      	subs	r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b04      	cmp	r3, #4
 800186c:	d118      	bne.n	80018a0 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188a:	3b01      	subs	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001896:	b29b      	uxth	r3, r3
 8001898:	3b01      	subs	r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f47f aebe 	bne.w	8001626 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2220      	movs	r2, #32
 80018ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80018c6:	2302      	movs	r3, #2
  }
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	00010004 	.word	0x00010004

080018d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af02      	add	r7, sp, #8
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	817b      	strh	r3, [r7, #10]
 80018e6:	460b      	mov	r3, r1
 80018e8:	813b      	strh	r3, [r7, #8]
 80018ea:	4613      	mov	r3, r2
 80018ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	2200      	movs	r2, #0
 8001906:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f93c 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e05f      	b.n	80019da <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800191a:	897b      	ldrh	r3, [r7, #10]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001928:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	6a3a      	ldr	r2, [r7, #32]
 800192e:	492d      	ldr	r1, [pc, #180]	; (80019e4 <I2C_RequestMemoryWrite+0x110>)
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 f980 	bl	8001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e04c      	b.n	80019da <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001958:	6a39      	ldr	r1, [r7, #32]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 f9ea 	bl	8001d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00d      	beq.n	8001982 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	2b04      	cmp	r3, #4
 800196c:	d107      	bne.n	800197e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800197c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e02b      	b.n	80019da <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001988:	893b      	ldrh	r3, [r7, #8]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	611a      	str	r2, [r3, #16]
 8001992:	e021      	b.n	80019d8 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001994:	893b      	ldrh	r3, [r7, #8]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b29b      	uxth	r3, r3
 800199a:	b2da      	uxtb	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a4:	6a39      	ldr	r1, [r7, #32]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f9c4 	bl	8001d34 <I2C_WaitOnTXEFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00d      	beq.n	80019ce <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d107      	bne.n	80019ca <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e005      	b.n	80019da <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019ce:	893b      	ldrh	r3, [r7, #8]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	00010002 	.word	0x00010002

080019e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	4608      	mov	r0, r1
 80019f2:	4611      	mov	r1, r2
 80019f4:	461a      	mov	r2, r3
 80019f6:	4603      	mov	r3, r0
 80019f8:	817b      	strh	r3, [r7, #10]
 80019fa:	460b      	mov	r3, r1
 80019fc:	813b      	strh	r3, [r7, #8]
 80019fe:	4613      	mov	r3, r2
 8001a00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f8aa 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e09e      	b.n	8001b7c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a3e:	897b      	ldrh	r3, [r7, #10]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	6a3a      	ldr	r2, [r7, #32]
 8001a52:	494c      	ldr	r1, [pc, #304]	; (8001b84 <I2C_RequestMemoryRead+0x19c>)
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f8ee 	bl	8001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e08b      	b.n	8001b7c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7c:	6a39      	ldr	r1, [r7, #32]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f958 	bl	8001d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00d      	beq.n	8001aa6 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d107      	bne.n	8001aa2 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e06a      	b.n	8001b7c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001aac:	893b      	ldrh	r3, [r7, #8]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	e021      	b.n	8001afc <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ab8:	893b      	ldrh	r3, [r7, #8]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac8:	6a39      	ldr	r1, [r7, #32]
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 f932 	bl	8001d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00d      	beq.n	8001af2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d107      	bne.n	8001aee <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e044      	b.n	8001b7c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001af2:	893b      	ldrh	r3, [r7, #8]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afe:	6a39      	ldr	r1, [r7, #32]
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 f917 	bl	8001d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00d      	beq.n	8001b28 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d107      	bne.n	8001b24 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e029      	b.n	8001b7c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f81f 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e013      	b.n	8001b7c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	6a3a      	ldr	r2, [r7, #32]
 8001b68:	4906      	ldr	r1, [pc, #24]	; (8001b84 <I2C_RequestMemoryRead+0x19c>)
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f863 	bl	8001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	00010002 	.word	0x00010002

08001b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b98:	e025      	b.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d021      	beq.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba2:	f7fe ffa9 	bl	8000af8 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d302      	bcc.n	8001bb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d116      	bne.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f043 0220 	orr.w	r2, r3, #32
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e023      	b.n	8001c2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d10d      	bne.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	e00c      	b.n	8001c26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4013      	ands	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf0c      	ite	eq
 8001c1e:	2301      	moveq	r3, #1
 8001c20:	2300      	movne	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d0b6      	beq.n	8001b9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c44:	e051      	b.n	8001cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c54:	d123      	bne.n	8001c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f043 0204 	orr.w	r2, r3, #4
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e046      	b.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d021      	beq.n	8001cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca6:	f7fe ff27 	bl	8000af8 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d302      	bcc.n	8001cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d116      	bne.n	8001cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f043 0220 	orr.w	r2, r3, #32
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e020      	b.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	0c1b      	lsrs	r3, r3, #16
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d10c      	bne.n	8001d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	e00b      	b.n	8001d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	43da      	mvns	r2, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d18d      	bne.n	8001c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d40:	e02d      	b.n	8001d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f8ce 	bl	8001ee4 <I2C_IsAcknowledgeFailed>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e02d      	b.n	8001dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d021      	beq.n	8001d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7fe fecd 	bl	8000af8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d116      	bne.n	8001d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f043 0220 	orr.w	r2, r3, #32
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e007      	b.n	8001dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da8:	2b80      	cmp	r3, #128	; 0x80
 8001daa:	d1ca      	bne.n	8001d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dc2:	e02d      	b.n	8001e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f88d 	bl	8001ee4 <I2C_IsAcknowledgeFailed>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e02d      	b.n	8001e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dda:	d021      	beq.n	8001e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ddc:	f7fe fe8c 	bl	8000af8 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d302      	bcc.n	8001df2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d116      	bne.n	8001e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f043 0220 	orr.w	r2, r3, #32
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e007      	b.n	8001e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d1ca      	bne.n	8001dc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e44:	e042      	b.n	8001ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b10      	cmp	r3, #16
 8001e52:	d119      	bne.n	8001e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0210 	mvn.w	r2, #16
 8001e5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e029      	b.n	8001edc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e88:	f7fe fe36 	bl	8000af8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d302      	bcc.n	8001e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d116      	bne.n	8001ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f043 0220 	orr.w	r2, r3, #32
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e007      	b.n	8001edc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed6:	2b40      	cmp	r3, #64	; 0x40
 8001ed8:	d1b5      	bne.n	8001e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efa:	d11b      	bne.n	8001f34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f043 0204 	orr.w	r2, r3, #4
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e26c      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8087 	beq.w	800206e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f60:	4b92      	ldr	r3, [pc, #584]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d00c      	beq.n	8001f86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f6c:	4b8f      	ldr	r3, [pc, #572]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d112      	bne.n	8001f9e <HAL_RCC_OscConfig+0x5e>
 8001f78:	4b8c      	ldr	r3, [pc, #560]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f84:	d10b      	bne.n	8001f9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f86:	4b89      	ldr	r3, [pc, #548]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d06c      	beq.n	800206c <HAL_RCC_OscConfig+0x12c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d168      	bne.n	800206c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e246      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x76>
 8001fa8:	4b80      	ldr	r3, [pc, #512]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a7f      	ldr	r2, [pc, #508]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e02e      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x98>
 8001fbe:	4b7b      	ldr	r3, [pc, #492]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a7a      	ldr	r2, [pc, #488]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	4b78      	ldr	r3, [pc, #480]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a77      	ldr	r2, [pc, #476]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e01d      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0xbc>
 8001fe2:	4b72      	ldr	r3, [pc, #456]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a71      	ldr	r2, [pc, #452]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6e      	ldr	r2, [pc, #440]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6a      	ldr	r2, [pc, #424]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b68      	ldr	r3, [pc, #416]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a67      	ldr	r2, [pc, #412]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe fd6c 	bl	8000af8 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7fe fd68 	bl	8000af8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1fa      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0xe4>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7fe fd58 	bl	8000af8 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7fe fd54 	bl	8000af8 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1e6      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x10c>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d063      	beq.n	8002142 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800207a:	4b4c      	ldr	r3, [pc, #304]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002086:	4b49      	ldr	r3, [pc, #292]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b08      	cmp	r3, #8
 8002090:	d11c      	bne.n	80020cc <HAL_RCC_OscConfig+0x18c>
 8002092:	4b46      	ldr	r3, [pc, #280]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d116      	bne.n	80020cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_RCC_OscConfig+0x176>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e1ba      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4939      	ldr	r1, [pc, #228]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	e03a      	b.n	8002142 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d4:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <HAL_RCC_OscConfig+0x270>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7fe fd0d 	bl	8000af8 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e2:	f7fe fd09 	bl	8000af8 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e19b      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4927      	ldr	r1, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]
 8002114:	e015      	b.n	8002142 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_RCC_OscConfig+0x270>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe fcec 	bl	8000af8 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002124:	f7fe fce8 	bl	8000af8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e17a      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03a      	beq.n	80021c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d019      	beq.n	800218a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_RCC_OscConfig+0x274>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7fe fccc 	bl	8000af8 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002164:	f7fe fcc8 	bl	8000af8 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e15a      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002182:	2001      	movs	r0, #1
 8002184:	f000 faf6 	bl	8002774 <RCC_Delay>
 8002188:	e01c      	b.n	80021c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_RCC_OscConfig+0x274>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7fe fcb2 	bl	8000af8 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002196:	e00f      	b.n	80021b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7fe fcae 	bl	8000af8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d908      	bls.n	80021b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e140      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	42420000 	.word	0x42420000
 80021b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	4b9e      	ldr	r3, [pc, #632]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e9      	bne.n	8002198 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80a6 	beq.w	800231e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d6:	4b97      	ldr	r3, [pc, #604]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10d      	bne.n	80021fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b94      	ldr	r3, [pc, #592]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a93      	ldr	r2, [pc, #588]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	61d3      	str	r3, [r2, #28]
 80021ee:	4b91      	ldr	r3, [pc, #580]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b8e      	ldr	r3, [pc, #568]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b8b      	ldr	r3, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a8a      	ldr	r2, [pc, #552]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7fe fc6f 	bl	8000af8 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7fe fc6b 	bl	8000af8 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0fd      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b81      	ldr	r3, [pc, #516]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x312>
 8002244:	4b7b      	ldr	r3, [pc, #492]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a7a      	ldr	r2, [pc, #488]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6213      	str	r3, [r2, #32]
 8002250:	e02d      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x334>
 800225a:	4b76      	ldr	r3, [pc, #472]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a75      	ldr	r2, [pc, #468]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	4b73      	ldr	r3, [pc, #460]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a72      	ldr	r2, [pc, #456]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	6213      	str	r3, [r2, #32]
 8002272:	e01c      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b05      	cmp	r3, #5
 800227a:	d10c      	bne.n	8002296 <HAL_RCC_OscConfig+0x356>
 800227c:	4b6d      	ldr	r3, [pc, #436]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4a6c      	ldr	r2, [pc, #432]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	6213      	str	r3, [r2, #32]
 8002288:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4a69      	ldr	r2, [pc, #420]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	e00b      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
 8002296:	4b67      	ldr	r3, [pc, #412]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4a66      	ldr	r2, [pc, #408]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6213      	str	r3, [r2, #32]
 80022a2:	4b64      	ldr	r3, [pc, #400]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a63      	ldr	r2, [pc, #396]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fc1f 	bl	8000af8 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7fe fc1b 	bl	8000af8 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0ab      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	4b57      	ldr	r3, [pc, #348]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ee      	beq.n	80022be <HAL_RCC_OscConfig+0x37e>
 80022e0:	e014      	b.n	800230c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fc09 	bl	8000af8 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7fe fc05 	bl	8000af8 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e095      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002300:	4b4c      	ldr	r3, [pc, #304]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ee      	bne.n	80022ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002312:	4b48      	ldr	r3, [pc, #288]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a47      	ldr	r2, [pc, #284]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8081 	beq.w	800242a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d061      	beq.n	80023f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d146      	bne.n	80023ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233c:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCC_OscConfig+0x4fc>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7fe fbd9 	bl	8000af8 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe fbd5 	bl	8000af8 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e067      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235c:	4b35      	ldr	r3, [pc, #212]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d108      	bne.n	8002384 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002372:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	492d      	ldr	r1, [pc, #180]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a19      	ldr	r1, [r3, #32]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	430b      	orrs	r3, r1
 8002396:	4927      	ldr	r1, [pc, #156]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_OscConfig+0x4fc>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7fe fba9 	bl	8000af8 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023aa:	f7fe fba5 	bl	8000af8 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e037      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x46a>
 80023c8:	e02f      	b.n	800242a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_RCC_OscConfig+0x4fc>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fb92 	bl	8000af8 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe fb8e 	bl	8000af8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e020      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x498>
 80023f6:	e018      	b.n	800242a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e013      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	429a      	cmp	r2, r3
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
 800243c:	42420060 	.word	0x42420060

08002440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d0      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d910      	bls.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b67      	ldr	r3, [pc, #412]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	4965      	ldr	r1, [pc, #404]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b63      	ldr	r3, [pc, #396]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b8      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	4b59      	ldr	r3, [pc, #356]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a58      	ldr	r2, [pc, #352]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	494d      	ldr	r1, [pc, #308]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d040      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e073      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06b      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4936      	ldr	r1, [pc, #216]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7fe fae2 	bl	8000af8 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe fade 	bl	8000af8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e053      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d210      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4922      	ldr	r1, [pc, #136]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e032      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4916      	ldr	r1, [pc, #88]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490e      	ldr	r1, [pc, #56]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f821 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025d2:	4601      	mov	r1, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	5cd3      	ldrb	r3, [r2, r3]
 80025e2:	fa21 f303 	lsr.w	r3, r1, r3
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1cc>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_RCC_ClockConfig+0x1d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe f986 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000
 8002604:	40021000 	.word	0x40021000
 8002608:	080055d8 	.word	0x080055d8
 800260c:	20000000 	.word	0x20000000
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b490      	push	{r4, r7}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800261c:	1d3c      	adds	r4, r7, #4
 800261e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002624:	4b28      	ldr	r3, [pc, #160]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d002      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x40>
 800264e:	2b08      	cmp	r3, #8
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x46>
 8002652:	e02d      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002656:	623b      	str	r3, [r7, #32]
      break;
 8002658:	e02d      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	0c9b      	lsrs	r3, r3, #18
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002666:	4413      	add	r3, r2
 8002668:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800266c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0c5b      	lsrs	r3, r3, #17
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002686:	4413      	add	r3, r2
 8002688:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800268c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002692:	fb02 f203 	mul.w	r2, r2, r3
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
 800269e:	e004      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	623b      	str	r3, [r7, #32]
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026b2:	623b      	str	r3, [r7, #32]
      break;
 80026b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b6:	6a3b      	ldr	r3, [r7, #32]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3728      	adds	r7, #40	; 0x28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc90      	pop	{r4, r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	08005564 	.word	0x08005564
 80026c8:	08005574 	.word	0x08005574
 80026cc:	40021000 	.word	0x40021000
 80026d0:	007a1200 	.word	0x007a1200
 80026d4:	003d0900 	.word	0x003d0900

080026d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	20000000 	.word	0x20000000

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f0:	f7ff fff2 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f4:	4601      	mov	r1, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4a03      	ldr	r2, [pc, #12]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	080055e8 	.word	0x080055e8

08002714 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	220f      	movs	r2, #15
 8002722:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_RCC_GetClockConfig+0x58>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0203 	and.w	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <HAL_RCC_GetClockConfig+0x58>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_GetClockConfig+0x58>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_RCC_GetClockConfig+0x58>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	08db      	lsrs	r3, r3, #3
 800274e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0207 	and.w	r2, r3, #7
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	40021000 	.word	0x40021000
 8002770:	40022000 	.word	0x40022000

08002774 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <RCC_Delay+0x34>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <RCC_Delay+0x38>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0a5b      	lsrs	r3, r3, #9
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002790:	bf00      	nop
  }
  while (Delay --);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1e5a      	subs	r2, r3, #1
 8002796:	60fa      	str	r2, [r7, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f9      	bne.n	8002790 <RCC_Delay+0x1c>
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000000 	.word	0x20000000
 80027ac:	10624dd3 	.word	0x10624dd3

080027b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e01d      	b.n	80027fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f815 	bl	8002806 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f000 f962 	bl	8002ab8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b06      	cmp	r3, #6
 8002840:	d007      	beq.n	8002852 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b02      	cmp	r3, #2
 8002872:	d122      	bne.n	80028ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d11b      	bne.n	80028ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f06f 0202 	mvn.w	r2, #2
 800288a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f8ed 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 80028a6:	e005      	b.n	80028b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f8e0 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f8ef 	bl	8002a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d122      	bne.n	800290e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d11b      	bne.n	800290e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f06f 0204 	mvn.w	r2, #4
 80028de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f8c3 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 80028fa:	e005      	b.n	8002908 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f8b6 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f8c5 	bl	8002a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b08      	cmp	r3, #8
 800291a:	d122      	bne.n	8002962 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b08      	cmp	r3, #8
 8002928:	d11b      	bne.n	8002962 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f06f 0208 	mvn.w	r2, #8
 8002932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2204      	movs	r2, #4
 8002938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f899 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 800294e:	e005      	b.n	800295c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f88c 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f89b 	bl	8002a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b10      	cmp	r3, #16
 800296e:	d122      	bne.n	80029b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b10      	cmp	r3, #16
 800297c:	d11b      	bne.n	80029b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f06f 0210 	mvn.w	r2, #16
 8002986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2208      	movs	r2, #8
 800298c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f86f 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 80029a2:	e005      	b.n	80029b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f862 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f871 	bl	8002a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d10e      	bne.n	80029e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f06f 0201 	mvn.w	r2, #1
 80029da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7fd ff01 	bl	80007e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d10e      	bne.n	8002a0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b80      	cmp	r3, #128	; 0x80
 80029fc:	d107      	bne.n	8002a0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f8c0 	bl	8002b8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a18:	2b40      	cmp	r3, #64	; 0x40
 8002a1a:	d10e      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d107      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f835 	bl	8002aa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	d10e      	bne.n	8002a66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d107      	bne.n	8002a66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f06f 0220 	mvn.w	r2, #32
 8002a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f88b 	bl	8002b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
	...

08002ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a29      	ldr	r2, [pc, #164]	; (8002b70 <TIM_Base_SetConfig+0xb8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00b      	beq.n	8002ae8 <TIM_Base_SetConfig+0x30>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad6:	d007      	beq.n	8002ae8 <TIM_Base_SetConfig+0x30>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a26      	ldr	r2, [pc, #152]	; (8002b74 <TIM_Base_SetConfig+0xbc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d003      	beq.n	8002ae8 <TIM_Base_SetConfig+0x30>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <TIM_Base_SetConfig+0xc0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d108      	bne.n	8002afa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <TIM_Base_SetConfig+0xb8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00b      	beq.n	8002b1a <TIM_Base_SetConfig+0x62>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b08:	d007      	beq.n	8002b1a <TIM_Base_SetConfig+0x62>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a19      	ldr	r2, [pc, #100]	; (8002b74 <TIM_Base_SetConfig+0xbc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d003      	beq.n	8002b1a <TIM_Base_SetConfig+0x62>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <TIM_Base_SetConfig+0xc0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d108      	bne.n	8002b2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <TIM_Base_SetConfig+0xb8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d103      	bne.n	8002b60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	615a      	str	r2, [r3, #20]
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	40012c00 	.word	0x40012c00
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800

08002b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba6:	f3ef 8305 	mrs	r3, IPSR
 8002baa:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb6:	607b      	str	r3, [r7, #4]
  return(result);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <osKernelInitialize+0x32>
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <osKernelInitialize+0x60>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d109      	bne.n	8002bda <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8002bca:	603b      	str	r3, [r7, #0]
  return(result);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002bd2:	f06f 0305 	mvn.w	r3, #5
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	e00c      	b.n	8002bf4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <osKernelInitialize+0x60>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <osKernelInitialize+0x60>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e002      	b.n	8002bf4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	20000038 	.word	0x20000038

08002c04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c0a:	f3ef 8305 	mrs	r3, IPSR
 8002c0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c16:	f3ef 8310 	mrs	r3, PRIMASK
 8002c1a:	607b      	str	r3, [r7, #4]
  return(result);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <osKernelStart+0x32>
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <osKernelStart+0x64>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d109      	bne.n	8002c3e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c2a:	f3ef 8311 	mrs	r3, BASEPRI
 8002c2e:	603b      	str	r3, [r7, #0]
  return(result);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002c36:	f06f 0305 	mvn.w	r3, #5
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e00e      	b.n	8002c5c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <osKernelStart+0x64>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <osKernelStart+0x64>)
 8002c48:	2202      	movs	r2, #2
 8002c4a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002c4c:	f001 f864 	bl	8003d18 <vTaskStartScheduler>
      stat = osOK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e002      	b.n	8002c5c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000038 	.word	0x20000038

08002c6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b092      	sub	sp, #72	; 0x48
 8002c70:	af04      	add	r7, sp, #16
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c7c:	f3ef 8305 	mrs	r3, IPSR
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 8094 	bne.w	8002db2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8e:	623b      	str	r3, [r7, #32]
  return(result);
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 808d 	bne.w	8002db2 <osThreadNew+0x146>
 8002c98:	4b48      	ldr	r3, [pc, #288]	; (8002dbc <osThreadNew+0x150>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d106      	bne.n	8002cae <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ca0:	f3ef 8311 	mrs	r3, BASEPRI
 8002ca4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 8082 	bne.w	8002db2 <osThreadNew+0x146>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d07e      	beq.n	8002db2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002cb8:	2318      	movs	r3, #24
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002cc0:	f107 031b 	add.w	r3, r7, #27
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d045      	beq.n	8002d5e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <osThreadNew+0x74>
        name = attr->name;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <osThreadNew+0x9a>
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	2b38      	cmp	r3, #56	; 0x38
 8002cf8:	d805      	bhi.n	8002d06 <osThreadNew+0x9a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <osThreadNew+0x9e>
        return (NULL);
 8002d06:	2300      	movs	r3, #0
 8002d08:	e054      	b.n	8002db4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00e      	beq.n	8002d40 <osThreadNew+0xd4>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b5b      	cmp	r3, #91	; 0x5b
 8002d28:	d90a      	bls.n	8002d40 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <osThreadNew+0xd4>
        mem = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d3e:	e010      	b.n	8002d62 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10c      	bne.n	8002d62 <osThreadNew+0xf6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d108      	bne.n	8002d62 <osThreadNew+0xf6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d104      	bne.n	8002d62 <osThreadNew+0xf6>
          mem = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5c:	e001      	b.n	8002d62 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d110      	bne.n	8002d8a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d70:	9202      	str	r2, [sp, #8]
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fe02 	bl	8003988 <xTaskCreateStatic>
 8002d84:	4603      	mov	r3, r0
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	e013      	b.n	8002db2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d110      	bne.n	8002db2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fe49 	bl	8003a3a <xTaskCreate>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d001      	beq.n	8002db2 <osThreadNew+0x146>
          hTask = NULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002db2:	697b      	ldr	r3, [r7, #20]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3738      	adds	r7, #56	; 0x38
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000038 	.word	0x20000038

08002dc0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dc8:	f3ef 8305 	mrs	r3, IPSR
 8002dcc:	613b      	str	r3, [r7, #16]
  return(result);
 8002dce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10f      	bne.n	8002df4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <osDelay+0x34>
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <osDelay+0x58>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d109      	bne.n	8002dfc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002de8:	f3ef 8311 	mrs	r3, BASEPRI
 8002dec:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <osDelay+0x3c>
    stat = osErrorISR;
 8002df4:	f06f 0305 	mvn.w	r3, #5
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	e007      	b.n	8002e0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 ff52 	bl	8003cb0 <vTaskDelay>
    }
  }

  return (stat);
 8002e0c:	697b      	ldr	r3, [r7, #20]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000038 	.word	0x20000038

08002e1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a06      	ldr	r2, [pc, #24]	; (8002e44 <vApplicationGetIdleTaskMemory+0x28>)
 8002e2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4a05      	ldr	r2, [pc, #20]	; (8002e48 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	601a      	str	r2, [r3, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	2000003c 	.word	0x2000003c
 8002e48:	20000098 	.word	0x20000098

08002e4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <vApplicationGetTimerTaskMemory+0x30>)
 8002e62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e6a:	601a      	str	r2, [r3, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000298 	.word	0x20000298
 8002e7c:	200002f4 	.word	0x200002f4

08002e80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f103 0208 	add.w	r2, r3, #8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f04f 32ff 	mov.w	r2, #4294967295
 8002e98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f103 0208 	add.w	r2, r3, #8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f103 0208 	add.w	r2, r3, #8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	601a      	str	r2, [r3, #0]
}
 8002f12:	bf00      	nop
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d103      	bne.n	8002f3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e00c      	b.n	8002f56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3308      	adds	r3, #8
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	e002      	b.n	8002f4a <vListInsert+0x2e>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d2f6      	bcs.n	8002f44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	601a      	str	r2, [r3, #0]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6892      	ldr	r2, [r2, #8]
 8002fa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6852      	ldr	r2, [r2, #4]
 8002fac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d103      	bne.n	8002fc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	1e5a      	subs	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
	...

08002fe0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	e7fe      	b.n	8003006 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003008:	f001 ff96 	bl	8004f38 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	68f9      	ldr	r1, [r7, #12]
 8003016:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	441a      	add	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003038:	3b01      	subs	r3, #1
 800303a:	68f9      	ldr	r1, [r7, #12]
 800303c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	441a      	add	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	22ff      	movs	r2, #255	; 0xff
 800304c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	22ff      	movs	r2, #255	; 0xff
 8003054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d114      	bne.n	8003088 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01a      	beq.n	800309c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3310      	adds	r3, #16
 800306a:	4618      	mov	r0, r3
 800306c:	f001 f8d8 	bl	8004220 <xTaskRemoveFromEventList>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d012      	beq.n	800309c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003076:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <xQueueGenericReset+0xcc>)
 8003078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	e009      	b.n	800309c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3310      	adds	r3, #16
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fef7 	bl	8002e80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3324      	adds	r3, #36	; 0x24
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fef2 	bl	8002e80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800309c:	f001 ff7a 	bl	8004f94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030a0:	2301      	movs	r3, #1
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	e000ed04 	.word	0xe000ed04

080030b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08e      	sub	sp, #56	; 0x38
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <xQueueGenericCreateStatic+0x28>
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d6:	e7fe      	b.n	80030d6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <xQueueGenericCreateStatic+0x42>
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
 80030f0:	e7fe      	b.n	80030f0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <xQueueGenericCreateStatic+0x4e>
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <xQueueGenericCreateStatic+0x52>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <xQueueGenericCreateStatic+0x54>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <xQueueGenericCreateStatic+0x6c>
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	623b      	str	r3, [r7, #32]
 800311a:	e7fe      	b.n	800311a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <xQueueGenericCreateStatic+0x78>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <xQueueGenericCreateStatic+0x7c>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <xQueueGenericCreateStatic+0x7e>
 800312c:	2300      	movs	r3, #0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <xQueueGenericCreateStatic+0x96>
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	e7fe      	b.n	8003144 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003146:	2350      	movs	r3, #80	; 0x50
 8003148:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b50      	cmp	r3, #80	; 0x50
 800314e:	d009      	beq.n	8003164 <xQueueGenericCreateStatic+0xb4>
 8003150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	e7fe      	b.n	8003162 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00d      	beq.n	800318a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003176:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f805 	bl	8003194 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800318c:	4618      	mov	r0, r3
 800318e:	3730      	adds	r7, #48	; 0x30
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e002      	b.n	80031b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031c2:	2101      	movs	r1, #1
 80031c4:	69b8      	ldr	r0, [r7, #24]
 80031c6:	f7ff ff0b 	bl	8002fe0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08e      	sub	sp, #56	; 0x38
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031ea:	2300      	movs	r3, #0
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <xQueueGenericSend+0x30>
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
 800320a:	e7fe      	b.n	800320a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <xQueueGenericSend+0x3e>
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <xQueueGenericSend+0x42>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <xQueueGenericSend+0x44>
 800321e:	2300      	movs	r3, #0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d109      	bne.n	8003238 <xQueueGenericSend+0x5c>
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
 8003236:	e7fe      	b.n	8003236 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d103      	bne.n	8003246 <xQueueGenericSend+0x6a>
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <xQueueGenericSend+0x6e>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <xQueueGenericSend+0x70>
 800324a:	2300      	movs	r3, #0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d109      	bne.n	8003264 <xQueueGenericSend+0x88>
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	623b      	str	r3, [r7, #32]
 8003262:	e7fe      	b.n	8003262 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003264:	f001 f996 	bl	8004594 <xTaskGetSchedulerState>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <xQueueGenericSend+0x98>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <xQueueGenericSend+0x9c>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <xQueueGenericSend+0x9e>
 8003278:	2300      	movs	r3, #0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <xQueueGenericSend+0xb6>
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	e7fe      	b.n	8003290 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003292:	f001 fe51 	bl	8004f38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	429a      	cmp	r2, r3
 80032a0:	d302      	bcc.n	80032a8 <xQueueGenericSend+0xcc>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d129      	bne.n	80032fc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ae:	f000 f9ff 	bl	80036b0 <prvCopyDataToQueue>
 80032b2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	3324      	adds	r3, #36	; 0x24
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 ffad 	bl	8004220 <xTaskRemoveFromEventList>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032cc:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <xQueueGenericSend+0x1f0>)
 80032ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	e00a      	b.n	80032f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032e4:	4b39      	ldr	r3, [pc, #228]	; (80033cc <xQueueGenericSend+0x1f0>)
 80032e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032f4:	f001 fe4e 	bl	8004f94 <vPortExitCritical>
				return pdPASS;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e063      	b.n	80033c4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d103      	bne.n	800330a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003302:	f001 fe47 	bl	8004f94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003306:	2300      	movs	r3, #0
 8003308:	e05c      	b.n	80033c4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800330a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	4618      	mov	r0, r3
 8003316:	f000 ffe5 	bl	80042e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800331a:	2301      	movs	r3, #1
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800331e:	f001 fe39 	bl	8004f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003322:	f000 fd5d 	bl	8003de0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003326:	f001 fe07 	bl	8004f38 <vPortEnterCritical>
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003330:	b25b      	sxtb	r3, r3
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d103      	bne.n	8003340 <xQueueGenericSend+0x164>
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003346:	b25b      	sxtb	r3, r3
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d103      	bne.n	8003356 <xQueueGenericSend+0x17a>
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003356:	f001 fe1d 	bl	8004f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800335a:	1d3a      	adds	r2, r7, #4
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4611      	mov	r1, r2
 8003362:	4618      	mov	r0, r3
 8003364:	f000 ffd4 	bl	8004310 <xTaskCheckForTimeOut>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d124      	bne.n	80033b8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800336e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003370:	f000 fa96 	bl	80038a0 <prvIsQueueFull>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d018      	beq.n	80033ac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	3310      	adds	r3, #16
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4611      	mov	r1, r2
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fefe 	bl	8004184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800338a:	f000 fa21 	bl	80037d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800338e:	f000 fd35 	bl	8003dfc <xTaskResumeAll>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	f47f af7c 	bne.w	8003292 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <xQueueGenericSend+0x1f0>)
 800339c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	e772      	b.n	8003292 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ae:	f000 fa0f 	bl	80037d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033b2:	f000 fd23 	bl	8003dfc <xTaskResumeAll>
 80033b6:	e76c      	b.n	8003292 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ba:	f000 fa09 	bl	80037d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033be:	f000 fd1d 	bl	8003dfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033c2:	2300      	movs	r3, #0
		}
	}
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3738      	adds	r7, #56	; 0x38
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	e000ed04 	.word	0xe000ed04

080033d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08e      	sub	sp, #56	; 0x38
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <xQueueGenericSendFromISR+0x2c>
 80033e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	e7fe      	b.n	80033fa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d103      	bne.n	800340a <xQueueGenericSendFromISR+0x3a>
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <xQueueGenericSendFromISR+0x3e>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <xQueueGenericSendFromISR+0x40>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <xQueueGenericSendFromISR+0x58>
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	623b      	str	r3, [r7, #32]
 8003426:	e7fe      	b.n	8003426 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d103      	bne.n	8003436 <xQueueGenericSendFromISR+0x66>
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <xQueueGenericSendFromISR+0x6a>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <xQueueGenericSendFromISR+0x6c>
 800343a:	2300      	movs	r3, #0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <xQueueGenericSendFromISR+0x84>
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	e7fe      	b.n	8003452 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003454:	f001 fe2a 	bl	80050ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003458:	f3ef 8211 	mrs	r2, BASEPRI
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	61ba      	str	r2, [r7, #24]
 800346e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003470:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347c:	429a      	cmp	r2, r3
 800347e:	d302      	bcc.n	8003486 <xQueueGenericSendFromISR+0xb6>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d12c      	bne.n	80034e0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800348c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003496:	f000 f90b 	bl	80036b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800349a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d112      	bne.n	80034ca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d016      	beq.n	80034da <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ae:	3324      	adds	r3, #36	; 0x24
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 feb5 	bl	8004220 <xTaskRemoveFromEventList>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00e      	beq.n	80034da <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	e007      	b.n	80034da <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034ce:	3301      	adds	r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	b25a      	sxtb	r2, r3
 80034d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034da:	2301      	movs	r3, #1
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80034de:	e001      	b.n	80034e4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3738      	adds	r7, #56	; 0x38
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08c      	sub	sp, #48	; 0x30
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003504:	2300      	movs	r3, #0
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <xQueueReceive+0x2e>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	623b      	str	r3, [r7, #32]
 8003524:	e7fe      	b.n	8003524 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d103      	bne.n	8003534 <xQueueReceive+0x3c>
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <xQueueReceive+0x40>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <xQueueReceive+0x42>
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <xQueueReceive+0x5a>
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	e7fe      	b.n	8003550 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003552:	f001 f81f 	bl	8004594 <xTaskGetSchedulerState>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <xQueueReceive+0x6a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <xQueueReceive+0x6e>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <xQueueReceive+0x70>
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <xQueueReceive+0x88>
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e7fe      	b.n	800357e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003580:	f001 fcda 	bl	8004f38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01f      	beq.n	80035d0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003594:	f000 f8f6 	bl	8003784 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	1e5a      	subs	r2, r3, #1
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00f      	beq.n	80035c8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	3310      	adds	r3, #16
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fe37 	bl	8004220 <xTaskRemoveFromEventList>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035b8:	4b3c      	ldr	r3, [pc, #240]	; (80036ac <xQueueReceive+0x1b4>)
 80035ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035c8:	f001 fce4 	bl	8004f94 <vPortExitCritical>
				return pdPASS;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e069      	b.n	80036a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035d6:	f001 fcdd 	bl	8004f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035da:	2300      	movs	r3, #0
 80035dc:	e062      	b.n	80036a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035e4:	f107 0310 	add.w	r3, r7, #16
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fe7b 	bl	80042e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035ee:	2301      	movs	r3, #1
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035f2:	f001 fccf 	bl	8004f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035f6:	f000 fbf3 	bl	8003de0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035fa:	f001 fc9d 	bl	8004f38 <vPortEnterCritical>
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003604:	b25b      	sxtb	r3, r3
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d103      	bne.n	8003614 <xQueueReceive+0x11c>
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800361a:	b25b      	sxtb	r3, r3
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d103      	bne.n	800362a <xQueueReceive+0x132>
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800362a:	f001 fcb3 	bl	8004f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800362e:	1d3a      	adds	r2, r7, #4
 8003630:	f107 0310 	add.w	r3, r7, #16
 8003634:	4611      	mov	r1, r2
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fe6a 	bl	8004310 <xTaskCheckForTimeOut>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d123      	bne.n	800368a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003644:	f000 f916 	bl	8003874 <prvIsQueueEmpty>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d017      	beq.n	800367e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	3324      	adds	r3, #36	; 0x24
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fd94 	bl	8004184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800365c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800365e:	f000 f8b7 	bl	80037d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003662:	f000 fbcb 	bl	8003dfc <xTaskResumeAll>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d189      	bne.n	8003580 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <xQueueReceive+0x1b4>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	e780      	b.n	8003580 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800367e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003680:	f000 f8a6 	bl	80037d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003684:	f000 fbba 	bl	8003dfc <xTaskResumeAll>
 8003688:	e77a      	b.n	8003580 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800368a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800368c:	f000 f8a0 	bl	80037d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003690:	f000 fbb4 	bl	8003dfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003696:	f000 f8ed 	bl	8003874 <prvIsQueueEmpty>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	f43f af6f 	beq.w	8003580 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3730      	adds	r7, #48	; 0x30
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10d      	bne.n	80036ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d14d      	bne.n	8003772 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 ff78 	bl	80045d0 <xTaskPriorityDisinherit>
 80036e0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	605a      	str	r2, [r3, #4]
 80036e8:	e043      	b.n	8003772 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d119      	bne.n	8003724 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6898      	ldr	r0, [r3, #8]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	461a      	mov	r2, r3
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	f001 ff0a 	bl	8005514 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	441a      	add	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	429a      	cmp	r2, r3
 8003718:	d32b      	bcc.n	8003772 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	e026      	b.n	8003772 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68d8      	ldr	r0, [r3, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	461a      	mov	r2, r3
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	f001 fef0 	bl	8005514 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	425b      	negs	r3, r3
 800373e:	441a      	add	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d207      	bcs.n	8003760 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	425b      	negs	r3, r3
 800375a:	441a      	add	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d105      	bne.n	8003772 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	3b01      	subs	r3, #1
 8003770:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800377a:	697b      	ldr	r3, [r7, #20]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d018      	beq.n	80037c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	441a      	add	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d303      	bcc.n	80037b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68d9      	ldr	r1, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	461a      	mov	r2, r3
 80037c2:	6838      	ldr	r0, [r7, #0]
 80037c4:	f001 fea6 	bl	8005514 <memcpy>
	}
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037d8:	f001 fbae 	bl	8004f38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037e4:	e011      	b.n	800380a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d012      	beq.n	8003814 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3324      	adds	r3, #36	; 0x24
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fd14 	bl	8004220 <xTaskRemoveFromEventList>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037fe:	f000 fde7 	bl	80043d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	3b01      	subs	r3, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800380a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	dce9      	bgt.n	80037e6 <prvUnlockQueue+0x16>
 8003812:	e000      	b.n	8003816 <prvUnlockQueue+0x46>
					break;
 8003814:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	22ff      	movs	r2, #255	; 0xff
 800381a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800381e:	f001 fbb9 	bl	8004f94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003822:	f001 fb89 	bl	8004f38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800382c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800382e:	e011      	b.n	8003854 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d012      	beq.n	800385e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3310      	adds	r3, #16
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fcef 	bl	8004220 <xTaskRemoveFromEventList>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003848:	f000 fdc2 	bl	80043d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800384c:	7bbb      	ldrb	r3, [r7, #14]
 800384e:	3b01      	subs	r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003858:	2b00      	cmp	r3, #0
 800385a:	dce9      	bgt.n	8003830 <prvUnlockQueue+0x60>
 800385c:	e000      	b.n	8003860 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800385e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	22ff      	movs	r2, #255	; 0xff
 8003864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003868:	f001 fb94 	bl	8004f94 <vPortExitCritical>
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800387c:	f001 fb5c 	bl	8004f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003888:	2301      	movs	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e001      	b.n	8003892 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003892:	f001 fb7f 	bl	8004f94 <vPortExitCritical>

	return xReturn;
 8003896:	68fb      	ldr	r3, [r7, #12]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038a8:	f001 fb46 	bl	8004f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d102      	bne.n	80038be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038b8:	2301      	movs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e001      	b.n	80038c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038c2:	f001 fb67 	bl	8004f94 <vPortExitCritical>

	return xReturn;
 80038c6:	68fb      	ldr	r3, [r7, #12]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e014      	b.n	800390a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <vQueueAddToRegistry+0x4c>)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038ec:	490b      	ldr	r1, [pc, #44]	; (800391c <vQueueAddToRegistry+0x4c>)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038f6:	4a09      	ldr	r2, [pc, #36]	; (800391c <vQueueAddToRegistry+0x4c>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003902:	e005      	b.n	8003910 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3301      	adds	r3, #1
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b07      	cmp	r3, #7
 800390e:	d9e7      	bls.n	80038e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	200019f8 	.word	0x200019f8

08003920 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003930:	f001 fb02 	bl	8004f38 <vPortEnterCritical>
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800393a:	b25b      	sxtb	r3, r3
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d103      	bne.n	800394a <vQueueWaitForMessageRestricted+0x2a>
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003950:	b25b      	sxtb	r3, r3
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003956:	d103      	bne.n	8003960 <vQueueWaitForMessageRestricted+0x40>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003960:	f001 fb18 	bl	8004f94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3324      	adds	r3, #36	; 0x24
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fc29 	bl	80041cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff ff28 	bl	80037d0 <prvUnlockQueue>
	}
 8003980:	bf00      	nop
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	; 0x38
 800398c:	af04      	add	r7, sp, #16
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <xTaskCreateStatic+0x28>
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	623b      	str	r3, [r7, #32]
 80039ae:	e7fe      	b.n	80039ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <xTaskCreateStatic+0x42>
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	e7fe      	b.n	80039c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039ca:	235c      	movs	r3, #92	; 0x5c
 80039cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b5c      	cmp	r3, #92	; 0x5c
 80039d2:	d009      	beq.n	80039e8 <xTaskCreateStatic+0x60>
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	e7fe      	b.n	80039e6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01e      	beq.n	8003a2c <xTaskCreateStatic+0xa4>
 80039ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01b      	beq.n	8003a2c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a06:	2300      	movs	r3, #0
 8003a08:	9303      	str	r3, [sp, #12]
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	9302      	str	r3, [sp, #8]
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f850 	bl	8003ac4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a26:	f000 f8d3 	bl	8003bd0 <prvAddNewTaskToReadyList>
 8003a2a:	e001      	b.n	8003a30 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a30:	697b      	ldr	r3, [r7, #20]
	}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3728      	adds	r7, #40	; 0x28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b08c      	sub	sp, #48	; 0x30
 8003a3e:	af04      	add	r7, sp, #16
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	603b      	str	r3, [r7, #0]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 fb68 	bl	8005124 <pvPortMalloc>
 8003a54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00e      	beq.n	8003a7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a5c:	205c      	movs	r0, #92	; 0x5c
 8003a5e:	f001 fb61 	bl	8005124 <pvPortMalloc>
 8003a62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a70:	e005      	b.n	8003a7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a72:	6978      	ldr	r0, [r7, #20]
 8003a74:	f001 fc18 	bl	80052a8 <vPortFree>
 8003a78:	e001      	b.n	8003a7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d017      	beq.n	8003ab4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a8c:	88fa      	ldrh	r2, [r7, #6]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	9303      	str	r3, [sp, #12]
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	9302      	str	r3, [sp, #8]
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f80e 	bl	8003ac4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003aa8:	69f8      	ldr	r0, [r7, #28]
 8003aaa:	f000 f891 	bl	8003bd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e002      	b.n	8003aba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003aba:	69bb      	ldr	r3, [r7, #24]
	}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	461a      	mov	r2, r3
 8003adc:	21a5      	movs	r1, #165	; 0xa5
 8003ade:	f001 fd24 	bl	800552a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003aec:	3b01      	subs	r3, #1
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f023 0307 	bic.w	r3, r3, #7
 8003afa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <prvInitialiseNewTask+0x56>
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	e7fe      	b.n	8003b18 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e012      	b.n	8003b46 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	7819      	ldrb	r1, [r3, #0]
 8003b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3334      	adds	r3, #52	; 0x34
 8003b30:	460a      	mov	r2, r1
 8003b32:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d006      	beq.n	8003b4e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	3301      	adds	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2b0f      	cmp	r3, #15
 8003b4a:	d9e9      	bls.n	8003b20 <prvInitialiseNewTask+0x5c>
 8003b4c:	e000      	b.n	8003b50 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003b4e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	2b37      	cmp	r3, #55	; 0x37
 8003b5c:	d901      	bls.n	8003b62 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b5e:	2337      	movs	r3, #55	; 0x37
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b6c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	2200      	movs	r2, #0
 8003b72:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	3304      	adds	r3, #4
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff f9a0 	bl	8002ebe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	3318      	adds	r3, #24
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f99b 	bl	8002ebe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	69b8      	ldr	r0, [r7, #24]
 8003bb2:	f001 f8d7 	bl	8004d64 <pxPortInitialiseStack>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bc8:	bf00      	nop
 8003bca:	3720      	adds	r7, #32
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bd8:	f001 f9ae 	bl	8004f38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bdc:	4b2d      	ldr	r3, [pc, #180]	; (8003c94 <prvAddNewTaskToReadyList+0xc4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	4a2c      	ldr	r2, [pc, #176]	; (8003c94 <prvAddNewTaskToReadyList+0xc4>)
 8003be4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003be6:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <prvAddNewTaskToReadyList+0xc8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bee:	4a2a      	ldr	r2, [pc, #168]	; (8003c98 <prvAddNewTaskToReadyList+0xc8>)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <prvAddNewTaskToReadyList+0xc4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d110      	bne.n	8003c1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bfc:	f000 fc0c 	bl	8004418 <prvInitialiseTaskLists>
 8003c00:	e00d      	b.n	8003c1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c02:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <prvAddNewTaskToReadyList+0xcc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c0a:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <prvAddNewTaskToReadyList+0xc8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d802      	bhi.n	8003c1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c18:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <prvAddNewTaskToReadyList+0xc8>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <prvAddNewTaskToReadyList+0xd0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3301      	adds	r3, #1
 8003c24:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <prvAddNewTaskToReadyList+0xd0>)
 8003c26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <prvAddNewTaskToReadyList+0xd0>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c34:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <prvAddNewTaskToReadyList+0xd4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d903      	bls.n	8003c44 <prvAddNewTaskToReadyList+0x74>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <prvAddNewTaskToReadyList+0xd4>)
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <prvAddNewTaskToReadyList+0xd8>)
 8003c52:	441a      	add	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f7ff f93b 	bl	8002ed6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c60:	f001 f998 	bl	8004f94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <prvAddNewTaskToReadyList+0xcc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <prvAddNewTaskToReadyList+0xc8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d207      	bcs.n	8003c8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <prvAddNewTaskToReadyList+0xdc>)
 8003c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000bc8 	.word	0x20000bc8
 8003c98:	200006f4 	.word	0x200006f4
 8003c9c:	20000bd4 	.word	0x20000bd4
 8003ca0:	20000be4 	.word	0x20000be4
 8003ca4:	20000bd0 	.word	0x20000bd0
 8003ca8:	200006f8 	.word	0x200006f8
 8003cac:	e000ed04 	.word	0xe000ed04

08003cb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d016      	beq.n	8003cf0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <vTaskDelay+0x60>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <vTaskDelay+0x2e>
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	e7fe      	b.n	8003cdc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003cde:	f000 f87f 	bl	8003de0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fcdf 	bl	80046a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cea:	f000 f887 	bl	8003dfc <xTaskResumeAll>
 8003cee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d107      	bne.n	8003d06 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <vTaskDelay+0x64>)
 8003cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000bf0 	.word	0x20000bf0
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d26:	463a      	mov	r2, r7
 8003d28:	1d39      	adds	r1, r7, #4
 8003d2a:	f107 0308 	add.w	r3, r7, #8
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff f874 	bl	8002e1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	9202      	str	r2, [sp, #8]
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	460a      	mov	r2, r1
 8003d46:	4920      	ldr	r1, [pc, #128]	; (8003dc8 <vTaskStartScheduler+0xb0>)
 8003d48:	4820      	ldr	r0, [pc, #128]	; (8003dcc <vTaskStartScheduler+0xb4>)
 8003d4a:	f7ff fe1d 	bl	8003988 <xTaskCreateStatic>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <vTaskStartScheduler+0xb8>)
 8003d52:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d54:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <vTaskStartScheduler+0xb8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e001      	b.n	8003d66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d102      	bne.n	8003d72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d6c:	f000 fcf0 	bl	8004750 <xTimerCreateTimerTask>
 8003d70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d115      	bne.n	8003da4 <vTaskStartScheduler+0x8c>
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <vTaskStartScheduler+0xbc>)
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <vTaskStartScheduler+0xc0>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d98:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <vTaskStartScheduler+0xc4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d9e:	f001 f85b 	bl	8004e58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003da2:	e00d      	b.n	8003dc0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d109      	bne.n	8003dc0 <vTaskStartScheduler+0xa8>
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	e7fe      	b.n	8003dbe <vTaskStartScheduler+0xa6>
}
 8003dc0:	bf00      	nop
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	08005578 	.word	0x08005578
 8003dcc:	080043e9 	.word	0x080043e9
 8003dd0:	20000bec 	.word	0x20000bec
 8003dd4:	20000be8 	.word	0x20000be8
 8003dd8:	20000bd4 	.word	0x20000bd4
 8003ddc:	20000bcc 	.word	0x20000bcc

08003de0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <vTaskSuspendAll+0x18>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	4a03      	ldr	r2, [pc, #12]	; (8003df8 <vTaskSuspendAll+0x18>)
 8003dec:	6013      	str	r3, [r2, #0]
}
 8003dee:	bf00      	nop
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	20000bf0 	.word	0x20000bf0

08003dfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e0a:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <xTaskResumeAll+0x114>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <xTaskResumeAll+0x2a>
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	e7fe      	b.n	8003e24 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e26:	f001 f887 	bl	8004f38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e2a:	4b39      	ldr	r3, [pc, #228]	; (8003f10 <xTaskResumeAll+0x114>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	4a37      	ldr	r2, [pc, #220]	; (8003f10 <xTaskResumeAll+0x114>)
 8003e32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e34:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <xTaskResumeAll+0x114>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d162      	bne.n	8003f02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e3c:	4b35      	ldr	r3, [pc, #212]	; (8003f14 <xTaskResumeAll+0x118>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d05e      	beq.n	8003f02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e44:	e02f      	b.n	8003ea6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e46:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <xTaskResumeAll+0x11c>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3318      	adds	r3, #24
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff f89a 	bl	8002f8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff f895 	bl	8002f8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e66:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <xTaskResumeAll+0x120>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d903      	bls.n	8003e76 <xTaskResumeAll+0x7a>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <xTaskResumeAll+0x120>)
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <xTaskResumeAll+0x124>)
 8003e84:	441a      	add	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f7ff f822 	bl	8002ed6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	4b23      	ldr	r3, [pc, #140]	; (8003f24 <xTaskResumeAll+0x128>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d302      	bcc.n	8003ea6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ea0:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <xTaskResumeAll+0x12c>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ea6:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <xTaskResumeAll+0x11c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1cb      	bne.n	8003e46 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003eb4:	f000 fb4a 	bl	800454c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003eb8:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <xTaskResumeAll+0x130>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d010      	beq.n	8003ee6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ec4:	f000 f844 	bl	8003f50 <xTaskIncrementTick>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ece:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <xTaskResumeAll+0x12c>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f1      	bne.n	8003ec4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003ee0:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <xTaskResumeAll+0x130>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ee6:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <xTaskResumeAll+0x12c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <xTaskResumeAll+0x134>)
 8003ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f02:	f001 f847 	bl	8004f94 <vPortExitCritical>

	return xAlreadyYielded;
 8003f06:	68bb      	ldr	r3, [r7, #8]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000bf0 	.word	0x20000bf0
 8003f14:	20000bc8 	.word	0x20000bc8
 8003f18:	20000b88 	.word	0x20000b88
 8003f1c:	20000bd0 	.word	0x20000bd0
 8003f20:	200006f8 	.word	0x200006f8
 8003f24:	200006f4 	.word	0x200006f4
 8003f28:	20000bdc 	.word	0x20000bdc
 8003f2c:	20000bd8 	.word	0x20000bd8
 8003f30:	e000ed04 	.word	0xe000ed04

08003f34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <xTaskGetTickCount+0x18>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f40:	687b      	ldr	r3, [r7, #4]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	20000bcc 	.word	0x20000bcc

08003f50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f5a:	4b51      	ldr	r3, [pc, #324]	; (80040a0 <xTaskIncrementTick+0x150>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f040 808d 	bne.w	800407e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f64:	4b4f      	ldr	r3, [pc, #316]	; (80040a4 <xTaskIncrementTick+0x154>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f6c:	4a4d      	ldr	r2, [pc, #308]	; (80040a4 <xTaskIncrementTick+0x154>)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11f      	bne.n	8003fb8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f78:	4b4b      	ldr	r3, [pc, #300]	; (80040a8 <xTaskIncrementTick+0x158>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <xTaskIncrementTick+0x46>
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	e7fe      	b.n	8003f94 <xTaskIncrementTick+0x44>
 8003f96:	4b44      	ldr	r3, [pc, #272]	; (80040a8 <xTaskIncrementTick+0x158>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	4b43      	ldr	r3, [pc, #268]	; (80040ac <xTaskIncrementTick+0x15c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a41      	ldr	r2, [pc, #260]	; (80040a8 <xTaskIncrementTick+0x158>)
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	4a41      	ldr	r2, [pc, #260]	; (80040ac <xTaskIncrementTick+0x15c>)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <xTaskIncrementTick+0x160>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	4a3f      	ldr	r2, [pc, #252]	; (80040b0 <xTaskIncrementTick+0x160>)
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	f000 faca 	bl	800454c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fb8:	4b3e      	ldr	r3, [pc, #248]	; (80040b4 <xTaskIncrementTick+0x164>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d34e      	bcc.n	8004060 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fc2:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <xTaskIncrementTick+0x158>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <xTaskIncrementTick+0x80>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <xTaskIncrementTick+0x82>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d004      	beq.n	8003fe0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd6:	4b37      	ldr	r3, [pc, #220]	; (80040b4 <xTaskIncrementTick+0x164>)
 8003fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fdc:	601a      	str	r2, [r3, #0]
					break;
 8003fde:	e03f      	b.n	8004060 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fe0:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <xTaskIncrementTick+0x158>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d203      	bcs.n	8004000 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ff8:	4a2e      	ldr	r2, [pc, #184]	; (80040b4 <xTaskIncrementTick+0x164>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6013      	str	r3, [r2, #0]
						break;
 8003ffe:	e02f      	b.n	8004060 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	3304      	adds	r3, #4
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe ffc1 	bl	8002f8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3318      	adds	r3, #24
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe ffb8 	bl	8002f8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004020:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <xTaskIncrementTick+0x168>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d903      	bls.n	8004030 <xTaskIncrementTick+0xe0>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <xTaskIncrementTick+0x168>)
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4a1f      	ldr	r2, [pc, #124]	; (80040bc <xTaskIncrementTick+0x16c>)
 800403e:	441a      	add	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	3304      	adds	r3, #4
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f7fe ff45 	bl	8002ed6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004050:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <xTaskIncrementTick+0x170>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	429a      	cmp	r2, r3
 8004058:	d3b3      	bcc.n	8003fc2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800405a:	2301      	movs	r3, #1
 800405c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800405e:	e7b0      	b.n	8003fc2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004060:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <xTaskIncrementTick+0x170>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004066:	4915      	ldr	r1, [pc, #84]	; (80040bc <xTaskIncrementTick+0x16c>)
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d907      	bls.n	8004088 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004078:	2301      	movs	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e004      	b.n	8004088 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800407e:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <xTaskIncrementTick+0x174>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3301      	adds	r3, #1
 8004084:	4a0f      	ldr	r2, [pc, #60]	; (80040c4 <xTaskIncrementTick+0x174>)
 8004086:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004088:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <xTaskIncrementTick+0x178>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004094:	697b      	ldr	r3, [r7, #20]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000bf0 	.word	0x20000bf0
 80040a4:	20000bcc 	.word	0x20000bcc
 80040a8:	20000b80 	.word	0x20000b80
 80040ac:	20000b84 	.word	0x20000b84
 80040b0:	20000be0 	.word	0x20000be0
 80040b4:	20000be8 	.word	0x20000be8
 80040b8:	20000bd0 	.word	0x20000bd0
 80040bc:	200006f8 	.word	0x200006f8
 80040c0:	200006f4 	.word	0x200006f4
 80040c4:	20000bd8 	.word	0x20000bd8
 80040c8:	20000bdc 	.word	0x20000bdc

080040cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040d2:	4b27      	ldr	r3, [pc, #156]	; (8004170 <vTaskSwitchContext+0xa4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040da:	4b26      	ldr	r3, [pc, #152]	; (8004174 <vTaskSwitchContext+0xa8>)
 80040dc:	2201      	movs	r2, #1
 80040de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040e0:	e040      	b.n	8004164 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <vTaskSwitchContext+0xa8>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040e8:	4b23      	ldr	r3, [pc, #140]	; (8004178 <vTaskSwitchContext+0xac>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e00f      	b.n	8004110 <vTaskSwitchContext+0x44>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <vTaskSwitchContext+0x3e>
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	e7fe      	b.n	8004108 <vTaskSwitchContext+0x3c>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3b01      	subs	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	491a      	ldr	r1, [pc, #104]	; (800417c <vTaskSwitchContext+0xb0>)
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0e5      	beq.n	80040f0 <vTaskSwitchContext+0x24>
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4a13      	ldr	r2, [pc, #76]	; (800417c <vTaskSwitchContext+0xb0>)
 8004130:	4413      	add	r3, r2
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	3308      	adds	r3, #8
 8004146:	429a      	cmp	r2, r3
 8004148:	d104      	bne.n	8004154 <vTaskSwitchContext+0x88>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	605a      	str	r2, [r3, #4]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4a09      	ldr	r2, [pc, #36]	; (8004180 <vTaskSwitchContext+0xb4>)
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4a06      	ldr	r2, [pc, #24]	; (8004178 <vTaskSwitchContext+0xac>)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6013      	str	r3, [r2, #0]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000bf0 	.word	0x20000bf0
 8004174:	20000bdc 	.word	0x20000bdc
 8004178:	20000bd0 	.word	0x20000bd0
 800417c:	200006f8 	.word	0x200006f8
 8004180:	200006f4 	.word	0x200006f4

08004184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <vTaskPlaceOnEventList+0x24>
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	e7fe      	b.n	80041a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041a8:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <vTaskPlaceOnEventList+0x44>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3318      	adds	r3, #24
 80041ae:	4619      	mov	r1, r3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fe feb3 	bl	8002f1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041b6:	2101      	movs	r1, #1
 80041b8:	6838      	ldr	r0, [r7, #0]
 80041ba:	f000 fa75 	bl	80046a8 <prvAddCurrentTaskToDelayedList>
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	200006f4 	.word	0x200006f4

080041cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <vTaskPlaceOnEventListRestricted+0x26>
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e7fe      	b.n	80041f0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <vTaskPlaceOnEventListRestricted+0x50>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3318      	adds	r3, #24
 80041f8:	4619      	mov	r1, r3
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7fe fe6b 	bl	8002ed6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004206:	f04f 33ff 	mov.w	r3, #4294967295
 800420a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	68b8      	ldr	r0, [r7, #8]
 8004210:	f000 fa4a 	bl	80046a8 <prvAddCurrentTaskToDelayedList>
	}
 8004214:	bf00      	nop
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	200006f4 	.word	0x200006f4

08004220 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <xTaskRemoveFromEventList+0x2a>
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e7fe      	b.n	8004248 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3318      	adds	r3, #24
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fe9c 	bl	8002f8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004254:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <xTaskRemoveFromEventList+0xac>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d11d      	bne.n	8004298 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3304      	adds	r3, #4
 8004260:	4618      	mov	r0, r3
 8004262:	f7fe fe93 	bl	8002f8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <xTaskRemoveFromEventList+0xb0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d903      	bls.n	800427a <xTaskRemoveFromEventList+0x5a>
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <xTaskRemoveFromEventList+0xb0>)
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <xTaskRemoveFromEventList+0xb4>)
 8004288:	441a      	add	r2, r3
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	3304      	adds	r3, #4
 800428e:	4619      	mov	r1, r3
 8004290:	4610      	mov	r0, r2
 8004292:	f7fe fe20 	bl	8002ed6 <vListInsertEnd>
 8004296:	e005      	b.n	80042a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	3318      	adds	r3, #24
 800429c:	4619      	mov	r1, r3
 800429e:	480e      	ldr	r0, [pc, #56]	; (80042d8 <xTaskRemoveFromEventList+0xb8>)
 80042a0:	f7fe fe19 	bl	8002ed6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <xTaskRemoveFromEventList+0xbc>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d905      	bls.n	80042be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <xTaskRemoveFromEventList+0xc0>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e001      	b.n	80042c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80042c2:	697b      	ldr	r3, [r7, #20]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000bf0 	.word	0x20000bf0
 80042d0:	20000bd0 	.word	0x20000bd0
 80042d4:	200006f8 	.word	0x200006f8
 80042d8:	20000b88 	.word	0x20000b88
 80042dc:	200006f4 	.word	0x200006f4
 80042e0:	20000bdc 	.word	0x20000bdc

080042e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <vTaskInternalSetTimeOutState+0x24>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <vTaskInternalSetTimeOutState+0x28>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	605a      	str	r2, [r3, #4]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000be0 	.word	0x20000be0
 800430c:	20000bcc 	.word	0x20000bcc

08004310 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <xTaskCheckForTimeOut+0x24>
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	e7fe      	b.n	8004332 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <xTaskCheckForTimeOut+0x3e>
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	e7fe      	b.n	800434c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800434e:	f000 fdf3 	bl	8004f38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004352:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <xTaskCheckForTimeOut+0xb8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d102      	bne.n	8004372 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	e023      	b.n	80043ba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <xTaskCheckForTimeOut+0xbc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d007      	beq.n	800438e <xTaskCheckForTimeOut+0x7e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	429a      	cmp	r2, r3
 8004386:	d302      	bcc.n	800438e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004388:	2301      	movs	r3, #1
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	e015      	b.n	80043ba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	429a      	cmp	r2, r3
 8004396:	d20b      	bcs.n	80043b0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	1ad2      	subs	r2, r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff ff9d 	bl	80042e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	e004      	b.n	80043ba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043b6:	2301      	movs	r3, #1
 80043b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043ba:	f000 fdeb 	bl	8004f94 <vPortExitCritical>

	return xReturn;
 80043be:	69fb      	ldr	r3, [r7, #28]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20000bcc 	.word	0x20000bcc
 80043cc:	20000be0 	.word	0x20000be0

080043d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <vTaskMissedYield+0x14>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
}
 80043da:	bf00      	nop
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000bdc 	.word	0x20000bdc

080043e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043f0:	f000 f852 	bl	8004498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <prvIdleTask+0x28>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d9f9      	bls.n	80043f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <prvIdleTask+0x2c>)
 80043fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800440c:	e7f0      	b.n	80043f0 <prvIdleTask+0x8>
 800440e:	bf00      	nop
 8004410:	200006f8 	.word	0x200006f8
 8004414:	e000ed04 	.word	0xe000ed04

08004418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	e00c      	b.n	800443e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4a12      	ldr	r2, [pc, #72]	; (8004478 <prvInitialiseTaskLists+0x60>)
 8004430:	4413      	add	r3, r2
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fd24 	bl	8002e80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3301      	adds	r3, #1
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b37      	cmp	r3, #55	; 0x37
 8004442:	d9ef      	bls.n	8004424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004444:	480d      	ldr	r0, [pc, #52]	; (800447c <prvInitialiseTaskLists+0x64>)
 8004446:	f7fe fd1b 	bl	8002e80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800444a:	480d      	ldr	r0, [pc, #52]	; (8004480 <prvInitialiseTaskLists+0x68>)
 800444c:	f7fe fd18 	bl	8002e80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004450:	480c      	ldr	r0, [pc, #48]	; (8004484 <prvInitialiseTaskLists+0x6c>)
 8004452:	f7fe fd15 	bl	8002e80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004456:	480c      	ldr	r0, [pc, #48]	; (8004488 <prvInitialiseTaskLists+0x70>)
 8004458:	f7fe fd12 	bl	8002e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800445c:	480b      	ldr	r0, [pc, #44]	; (800448c <prvInitialiseTaskLists+0x74>)
 800445e:	f7fe fd0f 	bl	8002e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <prvInitialiseTaskLists+0x78>)
 8004464:	4a05      	ldr	r2, [pc, #20]	; (800447c <prvInitialiseTaskLists+0x64>)
 8004466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <prvInitialiseTaskLists+0x7c>)
 800446a:	4a05      	ldr	r2, [pc, #20]	; (8004480 <prvInitialiseTaskLists+0x68>)
 800446c:	601a      	str	r2, [r3, #0]
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	200006f8 	.word	0x200006f8
 800447c:	20000b58 	.word	0x20000b58
 8004480:	20000b6c 	.word	0x20000b6c
 8004484:	20000b88 	.word	0x20000b88
 8004488:	20000b9c 	.word	0x20000b9c
 800448c:	20000bb4 	.word	0x20000bb4
 8004490:	20000b80 	.word	0x20000b80
 8004494:	20000b84 	.word	0x20000b84

08004498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800449e:	e019      	b.n	80044d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044a0:	f000 fd4a 	bl	8004f38 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <prvCheckTasksWaitingTermination+0x4c>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fd6b 	bl	8002f8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <prvCheckTasksWaitingTermination+0x50>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <prvCheckTasksWaitingTermination+0x50>)
 80044be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <prvCheckTasksWaitingTermination+0x54>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <prvCheckTasksWaitingTermination+0x54>)
 80044c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044ca:	f000 fd63 	bl	8004f94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f80e 	bl	80044f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <prvCheckTasksWaitingTermination+0x54>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e1      	bne.n	80044a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20000b9c 	.word	0x20000b9c
 80044e8:	20000bc8 	.word	0x20000bc8
 80044ec:	20000bb0 	.word	0x20000bb0

080044f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d108      	bne.n	8004514 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fece 	bl	80052a8 <vPortFree>
				vPortFree( pxTCB );
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fecb 	bl	80052a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004512:	e017      	b.n	8004544 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800451a:	2b01      	cmp	r3, #1
 800451c:	d103      	bne.n	8004526 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fec2 	bl	80052a8 <vPortFree>
	}
 8004524:	e00e      	b.n	8004544 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800452c:	2b02      	cmp	r3, #2
 800452e:	d009      	beq.n	8004544 <prvDeleteTCB+0x54>
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e7fe      	b.n	8004542 <prvDeleteTCB+0x52>
	}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004552:	4b0e      	ldr	r3, [pc, #56]	; (800458c <prvResetNextTaskUnblockTime+0x40>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <prvResetNextTaskUnblockTime+0x14>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <prvResetNextTaskUnblockTime+0x16>
 8004560:	2300      	movs	r3, #0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <prvResetNextTaskUnblockTime+0x44>)
 8004568:	f04f 32ff 	mov.w	r2, #4294967295
 800456c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800456e:	e008      	b.n	8004582 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <prvResetNextTaskUnblockTime+0x40>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4a04      	ldr	r2, [pc, #16]	; (8004590 <prvResetNextTaskUnblockTime+0x44>)
 8004580:	6013      	str	r3, [r2, #0]
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	20000b80 	.word	0x20000b80
 8004590:	20000be8 	.word	0x20000be8

08004594 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <xTaskGetSchedulerState+0x34>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045a2:	2301      	movs	r3, #1
 80045a4:	607b      	str	r3, [r7, #4]
 80045a6:	e008      	b.n	80045ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a8:	4b08      	ldr	r3, [pc, #32]	; (80045cc <xTaskGetSchedulerState+0x38>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045b0:	2302      	movs	r3, #2
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	e001      	b.n	80045ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045b6:	2300      	movs	r3, #0
 80045b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045ba:	687b      	ldr	r3, [r7, #4]
	}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000bd4 	.word	0x20000bd4
 80045cc:	20000bf0 	.word	0x20000bf0

080045d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d054      	beq.n	8004690 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045e6:	4b2d      	ldr	r3, [pc, #180]	; (800469c <xTaskPriorityDisinherit+0xcc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d009      	beq.n	8004604 <xTaskPriorityDisinherit+0x34>
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	e7fe      	b.n	8004602 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <xTaskPriorityDisinherit+0x50>
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	e7fe      	b.n	800461e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004624:	1e5a      	subs	r2, r3, #1
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004632:	429a      	cmp	r2, r3
 8004634:	d02c      	beq.n	8004690 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463a:	2b00      	cmp	r3, #0
 800463c:	d128      	bne.n	8004690 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3304      	adds	r3, #4
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fca2 	bl	8002f8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <xTaskPriorityDisinherit+0xd0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d903      	bls.n	8004670 <xTaskPriorityDisinherit+0xa0>
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	4a0c      	ldr	r2, [pc, #48]	; (80046a0 <xTaskPriorityDisinherit+0xd0>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <xTaskPriorityDisinherit+0xd4>)
 800467e:	441a      	add	r2, r3
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f7fe fc25 	bl	8002ed6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800468c:	2301      	movs	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004690:	697b      	ldr	r3, [r7, #20]
	}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	200006f4 	.word	0x200006f4
 80046a0:	20000bd0 	.word	0x20000bd0
 80046a4:	200006f8 	.word	0x200006f8

080046a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046b2:	4b21      	ldr	r3, [pc, #132]	; (8004738 <prvAddCurrentTaskToDelayedList+0x90>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b8:	4b20      	ldr	r3, [pc, #128]	; (800473c <prvAddCurrentTaskToDelayedList+0x94>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3304      	adds	r3, #4
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe fc64 	bl	8002f8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ca:	d10a      	bne.n	80046e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d2:	4b1a      	ldr	r3, [pc, #104]	; (800473c <prvAddCurrentTaskToDelayedList+0x94>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4819      	ldr	r0, [pc, #100]	; (8004740 <prvAddCurrentTaskToDelayedList+0x98>)
 80046dc:	f7fe fbfb 	bl	8002ed6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046e0:	e026      	b.n	8004730 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4413      	add	r3, r2
 80046e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <prvAddCurrentTaskToDelayedList+0x94>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d209      	bcs.n	800470e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <prvAddCurrentTaskToDelayedList+0x94>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3304      	adds	r3, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f7fe fc08 	bl	8002f1c <vListInsert>
}
 800470c:	e010      	b.n	8004730 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800470e:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <prvAddCurrentTaskToDelayedList+0x94>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3304      	adds	r3, #4
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f7fe fbfe 	bl	8002f1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	d202      	bcs.n	8004730 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800472a:	4a08      	ldr	r2, [pc, #32]	; (800474c <prvAddCurrentTaskToDelayedList+0xa4>)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	6013      	str	r3, [r2, #0]
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000bcc 	.word	0x20000bcc
 800473c:	200006f4 	.word	0x200006f4
 8004740:	20000bb4 	.word	0x20000bb4
 8004744:	20000b84 	.word	0x20000b84
 8004748:	20000b80 	.word	0x20000b80
 800474c:	20000be8 	.word	0x20000be8

08004750 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	; 0x28
 8004754:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800475a:	f000 fac3 	bl	8004ce4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800475e:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <xTimerCreateTimerTask+0x80>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d021      	beq.n	80047aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800476a:	2300      	movs	r3, #0
 800476c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800476e:	1d3a      	adds	r2, r7, #4
 8004770:	f107 0108 	add.w	r1, r7, #8
 8004774:	f107 030c 	add.w	r3, r7, #12
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe fb67 	bl	8002e4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	9202      	str	r2, [sp, #8]
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	2302      	movs	r3, #2
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	2300      	movs	r3, #0
 800478e:	460a      	mov	r2, r1
 8004790:	4910      	ldr	r1, [pc, #64]	; (80047d4 <xTimerCreateTimerTask+0x84>)
 8004792:	4811      	ldr	r0, [pc, #68]	; (80047d8 <xTimerCreateTimerTask+0x88>)
 8004794:	f7ff f8f8 	bl	8003988 <xTaskCreateStatic>
 8004798:	4602      	mov	r2, r0
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <xTimerCreateTimerTask+0x8c>)
 800479c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <xTimerCreateTimerTask+0x8c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80047a6:	2301      	movs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <xTimerCreateTimerTask+0x74>
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	e7fe      	b.n	80047c2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80047c4:	697b      	ldr	r3, [r7, #20]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000c24 	.word	0x20000c24
 80047d4:	08005580 	.word	0x08005580
 80047d8:	080048f9 	.word	0x080048f9
 80047dc:	20000c28 	.word	0x20000c28

080047e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	; 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <xTimerGenericCommand+0x2c>
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	623b      	str	r3, [r7, #32]
 800480a:	e7fe      	b.n	800480a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800480c:	4b19      	ldr	r3, [pc, #100]	; (8004874 <xTimerGenericCommand+0x94>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d02a      	beq.n	800486a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b05      	cmp	r3, #5
 8004824:	dc18      	bgt.n	8004858 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004826:	f7ff feb5 	bl	8004594 <xTaskGetSchedulerState>
 800482a:	4603      	mov	r3, r0
 800482c:	2b02      	cmp	r3, #2
 800482e:	d109      	bne.n	8004844 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004830:	4b10      	ldr	r3, [pc, #64]	; (8004874 <xTimerGenericCommand+0x94>)
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	f107 0110 	add.w	r1, r7, #16
 8004838:	2300      	movs	r3, #0
 800483a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483c:	f7fe fcce 	bl	80031dc <xQueueGenericSend>
 8004840:	6278      	str	r0, [r7, #36]	; 0x24
 8004842:	e012      	b.n	800486a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <xTimerGenericCommand+0x94>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	f107 0110 	add.w	r1, r7, #16
 800484c:	2300      	movs	r3, #0
 800484e:	2200      	movs	r2, #0
 8004850:	f7fe fcc4 	bl	80031dc <xQueueGenericSend>
 8004854:	6278      	str	r0, [r7, #36]	; 0x24
 8004856:	e008      	b.n	800486a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <xTimerGenericCommand+0x94>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	f107 0110 	add.w	r1, r7, #16
 8004860:	2300      	movs	r3, #0
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	f7fe fdb4 	bl	80033d0 <xQueueGenericSendFromISR>
 8004868:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800486c:	4618      	mov	r0, r3
 800486e:	3728      	adds	r7, #40	; 0x28
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000c24 	.word	0x20000c24

08004878 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af02      	add	r7, sp, #8
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004882:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <prvProcessExpiredTimer+0x7c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe fb7b 	bl	8002f8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d121      	bne.n	80048e2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	18d1      	adds	r1, r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	6978      	ldr	r0, [r7, #20]
 80048ac:	f000 f8c8 	bl	8004a40 <prvInsertTimerInActiveList>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d015      	beq.n	80048e2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048b6:	2300      	movs	r3, #0
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	2300      	movs	r3, #0
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	2100      	movs	r1, #0
 80048c0:	6978      	ldr	r0, [r7, #20]
 80048c2:	f7ff ff8d 	bl	80047e0 <xTimerGenericCommand>
 80048c6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <prvProcessExpiredTimer+0x6a>
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e7fe      	b.n	80048e0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	6978      	ldr	r0, [r7, #20]
 80048e8:	4798      	blx	r3
}
 80048ea:	bf00      	nop
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000c1c 	.word	0x20000c1c

080048f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004900:	f107 0308 	add.w	r3, r7, #8
 8004904:	4618      	mov	r0, r3
 8004906:	f000 f857 	bl	80049b8 <prvGetNextExpireTime>
 800490a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4619      	mov	r1, r3
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f803 	bl	800491c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004916:	f000 f8d5 	bl	8004ac4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800491a:	e7f1      	b.n	8004900 <prvTimerTask+0x8>

0800491c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004926:	f7ff fa5b 	bl	8003de0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800492a:	f107 0308 	add.w	r3, r7, #8
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f866 	bl	8004a00 <prvSampleTimeNow>
 8004934:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d130      	bne.n	800499e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <prvProcessTimerOrBlockTask+0x3c>
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	429a      	cmp	r2, r3
 8004948:	d806      	bhi.n	8004958 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800494a:	f7ff fa57 	bl	8003dfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff ff91 	bl	8004878 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004956:	e024      	b.n	80049a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <prvProcessTimerOrBlockTask+0x90>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf0c      	ite	eq
 8004968:	2301      	moveq	r3, #1
 800496a:	2300      	movne	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004970:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <prvProcessTimerOrBlockTask+0x94>)
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	4619      	mov	r1, r3
 800497e:	f7fe ffcf 	bl	8003920 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004982:	f7ff fa3b 	bl	8003dfc <xTaskResumeAll>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <prvProcessTimerOrBlockTask+0x98>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	f3bf 8f6f 	isb	sy
}
 800499c:	e001      	b.n	80049a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800499e:	f7ff fa2d 	bl	8003dfc <xTaskResumeAll>
}
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000c20 	.word	0x20000c20
 80049b0:	20000c24 	.word	0x20000c24
 80049b4:	e000ed04 	.word	0xe000ed04

080049b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049c0:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <prvGetNextExpireTime+0x44>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bf0c      	ite	eq
 80049ca:	2301      	moveq	r3, #1
 80049cc:	2300      	movne	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d105      	bne.n	80049ea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <prvGetNextExpireTime+0x44>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e001      	b.n	80049ee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049ee:	68fb      	ldr	r3, [r7, #12]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000c1c 	.word	0x20000c1c

08004a00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a08:	f7ff fa94 	bl	8003f34 <xTaskGetTickCount>
 8004a0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <prvSampleTimeNow+0x3c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d205      	bcs.n	8004a24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a18:	f000 f904 	bl	8004c24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e002      	b.n	8004a2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a2a:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <prvSampleTimeNow+0x3c>)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a30:	68fb      	ldr	r3, [r7, #12]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000c2c 	.word	0x20000c2c

08004a40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d812      	bhi.n	8004a8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	1ad2      	subs	r2, r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d302      	bcc.n	8004a7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e01b      	b.n	8004ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <prvInsertTimerInActiveList+0x7c>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3304      	adds	r3, #4
 8004a82:	4619      	mov	r1, r3
 8004a84:	4610      	mov	r0, r2
 8004a86:	f7fe fa49 	bl	8002f1c <vListInsert>
 8004a8a:	e012      	b.n	8004ab2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d206      	bcs.n	8004aa2 <prvInsertTimerInActiveList+0x62>
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d302      	bcc.n	8004aa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	e007      	b.n	8004ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aa2:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <prvInsertTimerInActiveList+0x80>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f7fe fa35 	bl	8002f1c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ab2:	697b      	ldr	r3, [r7, #20]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	20000c20 	.word	0x20000c20
 8004ac0:	20000c1c 	.word	0x20000c1c

08004ac4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08e      	sub	sp, #56	; 0x38
 8004ac8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aca:	e099      	b.n	8004c00 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	da17      	bge.n	8004b02 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ad2:	1d3b      	adds	r3, r7, #4
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <prvProcessReceivedCommands+0x2e>
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	e7fe      	b.n	8004af0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004af8:	6850      	ldr	r0, [r2, #4]
 8004afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004afc:	6892      	ldr	r2, [r2, #8]
 8004afe:	4611      	mov	r1, r2
 8004b00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	db7a      	blt.n	8004bfe <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d004      	beq.n	8004b1e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	3304      	adds	r3, #4
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe fa37 	bl	8002f8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b1e:	463b      	mov	r3, r7
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff6d 	bl	8004a00 <prvSampleTimeNow>
 8004b26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b09      	cmp	r3, #9
 8004b2c:	d868      	bhi.n	8004c00 <prvProcessReceivedCommands+0x13c>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <prvProcessReceivedCommands+0x70>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b5d 	.word	0x08004b5d
 8004b38:	08004b5d 	.word	0x08004b5d
 8004b3c:	08004b5d 	.word	0x08004b5d
 8004b40:	08004c01 	.word	0x08004c01
 8004b44:	08004bb7 	.word	0x08004bb7
 8004b48:	08004bed 	.word	0x08004bed
 8004b4c:	08004b5d 	.word	0x08004b5d
 8004b50:	08004b5d 	.word	0x08004b5d
 8004b54:	08004c01 	.word	0x08004c01
 8004b58:	08004bb7 	.word	0x08004bb7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	18d1      	adds	r1, r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b6a:	f7ff ff69 	bl	8004a40 <prvInsertTimerInActiveList>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d045      	beq.n	8004c00 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b7a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d13d      	bne.n	8004c00 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	441a      	add	r2, r3
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2300      	movs	r3, #0
 8004b92:	2100      	movs	r1, #0
 8004b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b96:	f7ff fe23 	bl	80047e0 <xTimerGenericCommand>
 8004b9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d12e      	bne.n	8004c00 <prvProcessReceivedCommands+0x13c>
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	61bb      	str	r3, [r7, #24]
 8004bb4:	e7fe      	b.n	8004bb4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <prvProcessReceivedCommands+0x114>
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e7fe      	b.n	8004bd6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	699a      	ldr	r2, [r3, #24]
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	18d1      	adds	r1, r2, r3
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be6:	f7ff ff2b 	bl	8004a40 <prvInsertTimerInActiveList>
					break;
 8004bea:	e009      	b.n	8004c00 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d104      	bne.n	8004c00 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf8:	f000 fb56 	bl	80052a8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004bfc:	e000      	b.n	8004c00 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004bfe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <prvProcessReceivedCommands+0x15c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	1d39      	adds	r1, r7, #4
 8004c06:	2200      	movs	r2, #0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe fc75 	bl	80034f8 <xQueueReceive>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f47f af5b 	bne.w	8004acc <prvProcessReceivedCommands+0x8>
	}
}
 8004c16:	bf00      	nop
 8004c18:	3730      	adds	r7, #48	; 0x30
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000c24 	.word	0x20000c24

08004c24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c2a:	e044      	b.n	8004cb6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <prvSwitchTimerLists+0xb8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c36:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <prvSwitchTimerLists+0xb8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fe f9a1 	bl	8002f8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d12d      	bne.n	8004cb6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4413      	add	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d90e      	bls.n	8004c8a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c78:	4b18      	ldr	r3, [pc, #96]	; (8004cdc <prvSwitchTimerLists+0xb8>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f7fe f94a 	bl	8002f1c <vListInsert>
 8004c88:	e015      	b.n	8004cb6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	2100      	movs	r1, #0
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff fda3 	bl	80047e0 <xTimerGenericCommand>
 8004c9a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <prvSwitchTimerLists+0x92>
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	e7fe      	b.n	8004cb4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cb6:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <prvSwitchTimerLists+0xb8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1b5      	bne.n	8004c2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <prvSwitchTimerLists+0xb8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004cc6:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <prvSwitchTimerLists+0xbc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <prvSwitchTimerLists+0xb8>)
 8004ccc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004cce:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <prvSwitchTimerLists+0xbc>)
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	6013      	str	r3, [r2, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000c1c 	.word	0x20000c1c
 8004ce0:	20000c20 	.word	0x20000c20

08004ce4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004cea:	f000 f925 	bl	8004f38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004cee:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <prvCheckForValidListAndQueue+0x60>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d120      	bne.n	8004d38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004cf6:	4814      	ldr	r0, [pc, #80]	; (8004d48 <prvCheckForValidListAndQueue+0x64>)
 8004cf8:	f7fe f8c2 	bl	8002e80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004cfc:	4813      	ldr	r0, [pc, #76]	; (8004d4c <prvCheckForValidListAndQueue+0x68>)
 8004cfe:	f7fe f8bf 	bl	8002e80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d02:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <prvCheckForValidListAndQueue+0x6c>)
 8004d04:	4a10      	ldr	r2, [pc, #64]	; (8004d48 <prvCheckForValidListAndQueue+0x64>)
 8004d06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d08:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <prvCheckForValidListAndQueue+0x70>)
 8004d0a:	4a10      	ldr	r2, [pc, #64]	; (8004d4c <prvCheckForValidListAndQueue+0x68>)
 8004d0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d0e:	2300      	movs	r3, #0
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <prvCheckForValidListAndQueue+0x74>)
 8004d14:	4a11      	ldr	r2, [pc, #68]	; (8004d5c <prvCheckForValidListAndQueue+0x78>)
 8004d16:	2110      	movs	r1, #16
 8004d18:	200a      	movs	r0, #10
 8004d1a:	f7fe f9c9 	bl	80030b0 <xQueueGenericCreateStatic>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <prvCheckForValidListAndQueue+0x60>)
 8004d22:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d24:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <prvCheckForValidListAndQueue+0x60>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <prvCheckForValidListAndQueue+0x60>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	490b      	ldr	r1, [pc, #44]	; (8004d60 <prvCheckForValidListAndQueue+0x7c>)
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fdcc 	bl	80038d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d38:	f000 f92c 	bl	8004f94 <vPortExitCritical>
}
 8004d3c:	bf00      	nop
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000c24 	.word	0x20000c24
 8004d48:	20000bf4 	.word	0x20000bf4
 8004d4c:	20000c08 	.word	0x20000c08
 8004d50:	20000c1c 	.word	0x20000c1c
 8004d54:	20000c20 	.word	0x20000c20
 8004d58:	20000cd0 	.word	0x20000cd0
 8004d5c:	20000c30 	.word	0x20000c30
 8004d60:	08005588 	.word	0x08005588

08004d64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3b04      	subs	r3, #4
 8004d74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3b04      	subs	r3, #4
 8004d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f023 0201 	bic.w	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3b04      	subs	r3, #4
 8004d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d94:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <pxPortInitialiseStack+0x54>)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3b14      	subs	r3, #20
 8004d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3b20      	subs	r3, #32
 8004daa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004dac:	68fb      	ldr	r3, [r7, #12]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr
 8004db8:	08004dbd 	.word	0x08004dbd

08004dbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <prvTaskExitError+0x4c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dce:	d009      	beq.n	8004de4 <prvTaskExitError+0x28>
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e7fe      	b.n	8004de2 <prvTaskExitError+0x26>
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004df6:	bf00      	nop
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0fc      	beq.n	8004df8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr
 8004e08:	2000000c 	.word	0x2000000c
 8004e0c:	00000000 	.word	0x00000000

08004e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <pxCurrentTCBConst2>)
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	6808      	ldr	r0, [r1, #0]
 8004e16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e1a:	f380 8809 	msr	PSP, r0
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f380 8811 	msr	BASEPRI, r0
 8004e2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004e2e:	4770      	bx	lr

08004e30 <pxCurrentTCBConst2>:
 8004e30:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop

08004e38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004e38:	4806      	ldr	r0, [pc, #24]	; (8004e54 <prvPortStartFirstTask+0x1c>)
 8004e3a:	6800      	ldr	r0, [r0, #0]
 8004e3c:	6800      	ldr	r0, [r0, #0]
 8004e3e:	f380 8808 	msr	MSP, r0
 8004e42:	b662      	cpsie	i
 8004e44:	b661      	cpsie	f
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	df00      	svc	0
 8004e50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e52:	bf00      	nop
 8004e54:	e000ed08 	.word	0xe000ed08

08004e58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e5e:	4b31      	ldr	r3, [pc, #196]	; (8004f24 <xPortStartScheduler+0xcc>)
 8004e60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	22ff      	movs	r2, #255	; 0xff
 8004e6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <xPortStartScheduler+0xd0>)
 8004e84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e86:	4b29      	ldr	r3, [pc, #164]	; (8004f2c <xPortStartScheduler+0xd4>)
 8004e88:	2207      	movs	r2, #7
 8004e8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e8c:	e009      	b.n	8004ea2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004e8e:	4b27      	ldr	r3, [pc, #156]	; (8004f2c <xPortStartScheduler+0xd4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <xPortStartScheduler+0xd4>)
 8004e96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eaa:	2b80      	cmp	r3, #128	; 0x80
 8004eac:	d0ef      	beq.n	8004e8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004eae:	4b1f      	ldr	r3, [pc, #124]	; (8004f2c <xPortStartScheduler+0xd4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f1c3 0307 	rsb	r3, r3, #7
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d009      	beq.n	8004ece <xPortStartScheduler+0x76>
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	e7fe      	b.n	8004ecc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ece:	4b17      	ldr	r3, [pc, #92]	; (8004f2c <xPortStartScheduler+0xd4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <xPortStartScheduler+0xd4>)
 8004ed6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ed8:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <xPortStartScheduler+0xd4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ee0:	4a12      	ldr	r2, [pc, #72]	; (8004f2c <xPortStartScheduler+0xd4>)
 8004ee2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004eec:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <xPortStartScheduler+0xd8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0f      	ldr	r2, [pc, #60]	; (8004f30 <xPortStartScheduler+0xd8>)
 8004ef2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ef6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ef8:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <xPortStartScheduler+0xd8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a0c      	ldr	r2, [pc, #48]	; (8004f30 <xPortStartScheduler+0xd8>)
 8004efe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f04:	f000 f8b0 	bl	8005068 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f08:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <xPortStartScheduler+0xdc>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f0e:	f7ff ff93 	bl	8004e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f12:	f7ff f8db 	bl	80040cc <vTaskSwitchContext>
	prvTaskExitError();
 8004f16:	f7ff ff51 	bl	8004dbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	e000e400 	.word	0xe000e400
 8004f28:	20000d20 	.word	0x20000d20
 8004f2c:	20000d24 	.word	0x20000d24
 8004f30:	e000ed20 	.word	0xe000ed20
 8004f34:	2000000c 	.word	0x2000000c

08004f38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f50:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <vPortEnterCritical+0x54>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	4a0d      	ldr	r2, [pc, #52]	; (8004f8c <vPortEnterCritical+0x54>)
 8004f58:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <vPortEnterCritical+0x54>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d10e      	bne.n	8004f80 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f62:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <vPortEnterCritical+0x58>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <vPortEnterCritical+0x48>
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	603b      	str	r3, [r7, #0]
 8004f7e:	e7fe      	b.n	8004f7e <vPortEnterCritical+0x46>
	}
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	2000000c 	.word	0x2000000c
 8004f90:	e000ed04 	.word	0xe000ed04

08004f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <vPortExitCritical+0x48>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <vPortExitCritical+0x22>
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	e7fe      	b.n	8004fb4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004fb6:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <vPortExitCritical+0x48>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	4a07      	ldr	r2, [pc, #28]	; (8004fdc <vPortExitCritical+0x48>)
 8004fbe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fc0:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <vPortExitCritical+0x48>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <vPortExitCritical+0x3e>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr
 8004fdc:	2000000c 	.word	0x2000000c

08004fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fe0:	f3ef 8009 	mrs	r0, PSP
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <pxCurrentTCBConst>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ff0:	6010      	str	r0, [r2, #0]
 8004ff2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ff6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ffa:	f380 8811 	msr	BASEPRI, r0
 8004ffe:	f7ff f865 	bl	80040cc <vTaskSwitchContext>
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f380 8811 	msr	BASEPRI, r0
 800500a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	6808      	ldr	r0, [r1, #0]
 8005012:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005016:	f380 8809 	msr	PSP, r0
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	4770      	bx	lr

08005020 <pxCurrentTCBConst>:
 8005020:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005040:	f7fe ff86 	bl	8003f50 <xTaskIncrementTick>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800504a:	4b06      	ldr	r3, [pc, #24]	; (8005064 <SysTick_Handler+0x3c>)
 800504c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	2300      	movs	r3, #0
 8005054:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <vPortSetupTimerInterrupt+0x30>)
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <vPortSetupTimerInterrupt+0x34>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005078:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <vPortSetupTimerInterrupt+0x38>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a09      	ldr	r2, [pc, #36]	; (80050a4 <vPortSetupTimerInterrupt+0x3c>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	099b      	lsrs	r3, r3, #6
 8005084:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <vPortSetupTimerInterrupt+0x40>)
 8005086:	3b01      	subs	r3, #1
 8005088:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800508a:	4b03      	ldr	r3, [pc, #12]	; (8005098 <vPortSetupTimerInterrupt+0x30>)
 800508c:	2207      	movs	r2, #7
 800508e:	601a      	str	r2, [r3, #0]
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr
 8005098:	e000e010 	.word	0xe000e010
 800509c:	e000e018 	.word	0xe000e018
 80050a0:	20000000 	.word	0x20000000
 80050a4:	10624dd3 	.word	0x10624dd3
 80050a8:	e000e014 	.word	0xe000e014

080050ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050b2:	f3ef 8305 	mrs	r3, IPSR
 80050b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b0f      	cmp	r3, #15
 80050bc:	d913      	bls.n	80050e6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050be:	4a15      	ldr	r2, [pc, #84]	; (8005114 <vPortValidateInterruptPriority+0x68>)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050c8:	4b13      	ldr	r3, [pc, #76]	; (8005118 <vPortValidateInterruptPriority+0x6c>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	7afa      	ldrb	r2, [r7, #11]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d209      	bcs.n	80050e6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	607b      	str	r3, [r7, #4]
 80050e4:	e7fe      	b.n	80050e4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <vPortValidateInterruptPriority+0x70>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050ee:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <vPortValidateInterruptPriority+0x74>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d909      	bls.n	800510a <vPortValidateInterruptPriority+0x5e>
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	e7fe      	b.n	8005108 <vPortValidateInterruptPriority+0x5c>
	}
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	e000e3f0 	.word	0xe000e3f0
 8005118:	20000d20 	.word	0x20000d20
 800511c:	e000ed0c 	.word	0xe000ed0c
 8005120:	20000d24 	.word	0x20000d24

08005124 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	; 0x28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005130:	f7fe fe56 	bl	8003de0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005134:	4b57      	ldr	r3, [pc, #348]	; (8005294 <pvPortMalloc+0x170>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800513c:	f000 f90c 	bl	8005358 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005140:	4b55      	ldr	r3, [pc, #340]	; (8005298 <pvPortMalloc+0x174>)
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	f040 808c 	bne.w	8005266 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01c      	beq.n	800518e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005154:	2208      	movs	r2, #8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4413      	add	r3, r2
 800515a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	2b00      	cmp	r3, #0
 8005164:	d013      	beq.n	800518e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f023 0307 	bic.w	r3, r3, #7
 800516c:	3308      	adds	r3, #8
 800516e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <pvPortMalloc+0x6a>
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	e7fe      	b.n	800518c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d068      	beq.n	8005266 <pvPortMalloc+0x142>
 8005194:	4b41      	ldr	r3, [pc, #260]	; (800529c <pvPortMalloc+0x178>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	d863      	bhi.n	8005266 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800519e:	4b40      	ldr	r3, [pc, #256]	; (80052a0 <pvPortMalloc+0x17c>)
 80051a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051a2:	4b3f      	ldr	r3, [pc, #252]	; (80052a0 <pvPortMalloc+0x17c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051a8:	e004      	b.n	80051b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d903      	bls.n	80051c6 <pvPortMalloc+0xa2>
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f1      	bne.n	80051aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051c6:	4b33      	ldr	r3, [pc, #204]	; (8005294 <pvPortMalloc+0x170>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d04a      	beq.n	8005266 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2208      	movs	r2, #8
 80051d6:	4413      	add	r3, r2
 80051d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	1ad2      	subs	r2, r2, r3
 80051ea:	2308      	movs	r3, #8
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d91e      	bls.n	8005230 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4413      	add	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	2b00      	cmp	r3, #0
 8005202:	d009      	beq.n	8005218 <pvPortMalloc+0xf4>
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	e7fe      	b.n	8005216 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	1ad2      	subs	r2, r2, r3
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800522a:	69b8      	ldr	r0, [r7, #24]
 800522c:	f000 f8f6 	bl	800541c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005230:	4b1a      	ldr	r3, [pc, #104]	; (800529c <pvPortMalloc+0x178>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	4a18      	ldr	r2, [pc, #96]	; (800529c <pvPortMalloc+0x178>)
 800523c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800523e:	4b17      	ldr	r3, [pc, #92]	; (800529c <pvPortMalloc+0x178>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b18      	ldr	r3, [pc, #96]	; (80052a4 <pvPortMalloc+0x180>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d203      	bcs.n	8005252 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800524a:	4b14      	ldr	r3, [pc, #80]	; (800529c <pvPortMalloc+0x178>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a15      	ldr	r2, [pc, #84]	; (80052a4 <pvPortMalloc+0x180>)
 8005250:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <pvPortMalloc+0x174>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	431a      	orrs	r2, r3
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005266:	f7fe fdc9 	bl	8003dfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	2b00      	cmp	r3, #0
 8005272:	d009      	beq.n	8005288 <pvPortMalloc+0x164>
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e7fe      	b.n	8005286 <pvPortMalloc+0x162>
	return pvReturn;
 8005288:	69fb      	ldr	r3, [r7, #28]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3728      	adds	r7, #40	; 0x28
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20001930 	.word	0x20001930
 8005298:	2000193c 	.word	0x2000193c
 800529c:	20001934 	.word	0x20001934
 80052a0:	20001928 	.word	0x20001928
 80052a4:	20001938 	.word	0x20001938

080052a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d046      	beq.n	8005348 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052ba:	2308      	movs	r3, #8
 80052bc:	425b      	negs	r3, r3
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4413      	add	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	4b20      	ldr	r3, [pc, #128]	; (8005350 <vPortFree+0xa8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <vPortFree+0x42>
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e7fe      	b.n	80052e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <vPortFree+0x5e>
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	e7fe      	b.n	8005304 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	4b11      	ldr	r3, [pc, #68]	; (8005350 <vPortFree+0xa8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d019      	beq.n	8005348 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d115      	bne.n	8005348 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <vPortFree+0xa8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	43db      	mvns	r3, r3
 8005326:	401a      	ands	r2, r3
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800532c:	f7fe fd58 	bl	8003de0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	4b07      	ldr	r3, [pc, #28]	; (8005354 <vPortFree+0xac>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4413      	add	r3, r2
 800533a:	4a06      	ldr	r2, [pc, #24]	; (8005354 <vPortFree+0xac>)
 800533c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800533e:	6938      	ldr	r0, [r7, #16]
 8005340:	f000 f86c 	bl	800541c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005344:	f7fe fd5a 	bl	8003dfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005348:	bf00      	nop
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	2000193c 	.word	0x2000193c
 8005354:	20001934 	.word	0x20001934

08005358 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800535e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005362:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005364:	4b27      	ldr	r3, [pc, #156]	; (8005404 <prvHeapInit+0xac>)
 8005366:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00c      	beq.n	800538c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3307      	adds	r3, #7
 8005376:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0307 	bic.w	r3, r3, #7
 800537e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	4a1f      	ldr	r2, [pc, #124]	; (8005404 <prvHeapInit+0xac>)
 8005388:	4413      	add	r3, r2
 800538a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005390:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <prvHeapInit+0xb0>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005396:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <prvHeapInit+0xb0>)
 8005398:	2200      	movs	r2, #0
 800539a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	4413      	add	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053a4:	2208      	movs	r2, #8
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0307 	bic.w	r3, r3, #7
 80053b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4a15      	ldr	r2, [pc, #84]	; (800540c <prvHeapInit+0xb4>)
 80053b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053ba:	4b14      	ldr	r3, [pc, #80]	; (800540c <prvHeapInit+0xb4>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2200      	movs	r2, #0
 80053c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053c2:	4b12      	ldr	r3, [pc, #72]	; (800540c <prvHeapInit+0xb4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	1ad2      	subs	r2, r2, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <prvHeapInit+0xb4>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	4a0a      	ldr	r2, [pc, #40]	; (8005410 <prvHeapInit+0xb8>)
 80053e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a09      	ldr	r2, [pc, #36]	; (8005414 <prvHeapInit+0xbc>)
 80053ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053f0:	4b09      	ldr	r3, [pc, #36]	; (8005418 <prvHeapInit+0xc0>)
 80053f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053f6:	601a      	str	r2, [r3, #0]
}
 80053f8:	bf00      	nop
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000d28 	.word	0x20000d28
 8005408:	20001928 	.word	0x20001928
 800540c:	20001930 	.word	0x20001930
 8005410:	20001938 	.word	0x20001938
 8005414:	20001934 	.word	0x20001934
 8005418:	2000193c 	.word	0x2000193c

0800541c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005424:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <prvInsertBlockIntoFreeList+0xa8>)
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	e002      	b.n	8005430 <prvInsertBlockIntoFreeList+0x14>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d8f7      	bhi.n	800542a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	4413      	add	r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d108      	bne.n	800545e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	441a      	add	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	441a      	add	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d118      	bne.n	80054a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <prvInsertBlockIntoFreeList+0xac>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d00d      	beq.n	800549a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	441a      	add	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	e008      	b.n	80054ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800549a:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <prvInsertBlockIntoFreeList+0xac>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	e003      	b.n	80054ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d002      	beq.n	80054ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr
 80054c4:	20001928 	.word	0x20001928
 80054c8:	20001930 	.word	0x20001930

080054cc <__libc_init_array>:
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	2500      	movs	r5, #0
 80054d0:	4e0c      	ldr	r6, [pc, #48]	; (8005504 <__libc_init_array+0x38>)
 80054d2:	4c0d      	ldr	r4, [pc, #52]	; (8005508 <__libc_init_array+0x3c>)
 80054d4:	1ba4      	subs	r4, r4, r6
 80054d6:	10a4      	asrs	r4, r4, #2
 80054d8:	42a5      	cmp	r5, r4
 80054da:	d109      	bne.n	80054f0 <__libc_init_array+0x24>
 80054dc:	f000 f82e 	bl	800553c <_init>
 80054e0:	2500      	movs	r5, #0
 80054e2:	4e0a      	ldr	r6, [pc, #40]	; (800550c <__libc_init_array+0x40>)
 80054e4:	4c0a      	ldr	r4, [pc, #40]	; (8005510 <__libc_init_array+0x44>)
 80054e6:	1ba4      	subs	r4, r4, r6
 80054e8:	10a4      	asrs	r4, r4, #2
 80054ea:	42a5      	cmp	r5, r4
 80054ec:	d105      	bne.n	80054fa <__libc_init_array+0x2e>
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054f4:	4798      	blx	r3
 80054f6:	3501      	adds	r5, #1
 80054f8:	e7ee      	b.n	80054d8 <__libc_init_array+0xc>
 80054fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054fe:	4798      	blx	r3
 8005500:	3501      	adds	r5, #1
 8005502:	e7f2      	b.n	80054ea <__libc_init_array+0x1e>
 8005504:	080055f0 	.word	0x080055f0
 8005508:	080055f0 	.word	0x080055f0
 800550c:	080055f0 	.word	0x080055f0
 8005510:	080055f4 	.word	0x080055f4

08005514 <memcpy>:
 8005514:	b510      	push	{r4, lr}
 8005516:	1e43      	subs	r3, r0, #1
 8005518:	440a      	add	r2, r1
 800551a:	4291      	cmp	r1, r2
 800551c:	d100      	bne.n	8005520 <memcpy+0xc>
 800551e:	bd10      	pop	{r4, pc}
 8005520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005528:	e7f7      	b.n	800551a <memcpy+0x6>

0800552a <memset>:
 800552a:	4603      	mov	r3, r0
 800552c:	4402      	add	r2, r0
 800552e:	4293      	cmp	r3, r2
 8005530:	d100      	bne.n	8005534 <memset+0xa>
 8005532:	4770      	bx	lr
 8005534:	f803 1b01 	strb.w	r1, [r3], #1
 8005538:	e7f9      	b.n	800552e <memset+0x4>
	...

0800553c <_init>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	bf00      	nop
 8005540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005542:	bc08      	pop	{r3}
 8005544:	469e      	mov	lr, r3
 8005546:	4770      	bx	lr

08005548 <_fini>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	bf00      	nop
 800554c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554e:	bc08      	pop	{r3}
 8005550:	469e      	mov	lr, r3
 8005552:	4770      	bx	lr
